
Smart_Home2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000288  00800060  00006060  000060f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008002e8  008002e8  0000637c  2**0
                  ALLOC
  3 .stab         00006bb8  00000000  00000000  0000637c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a3c  00000000  00000000  0000cf34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000eb10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ed02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012493  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001366c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001382c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 35 25 	jmp	0x4a6a	; 0x4a6a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <main>
      8a:	0c 94 2e 30 	jmp	0x605c	; 0x605c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f7 2f 	jmp	0x5fee	; 0x5fee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ea       	ldi	r26, 0xA9	; 169
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 13 30 	jmp	0x6026	; 0x6026 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 03 30 	jmp	0x6006	; 0x6006 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 03 30 	jmp	0x6006	; 0x6006 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f7 2f 	jmp	0x5fee	; 0x5fee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ea       	ldi	r24, 0xA9	; 169
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 13 30 	jmp	0x6026	; 0x6026 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ff 2f 	jmp	0x5ffe	; 0x5ffe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ea       	ldi	r22, 0xA9	; 169
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 03 30 	jmp	0x6006	; 0x6006 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 03 30 	jmp	0x6006	; 0x6006 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 03 30 	jmp	0x6006	; 0x6006 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 07 30 	jmp	0x600e	; 0x600e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ff 2f 	jmp	0x5ffe	; 0x5ffe <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 54       	subi	r30, 0x4F	; 79
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <login>:
uint8 ADMIN_NAME[]={'2','2','9','9'};
uint8 ADMIN_PASS[]={'0','0','0','0'};


uint8 login()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	ec 97       	sbiw	r28, 0x3c	; 60
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	uint8 name[user_limit];
	uint8 pass[pass_limit];

	uint8 admin_check[user_limit];
	uint8 pass_admin_check[pass_limit];
	uint8 x[]={'-','-','-','-'};
     e42:	8d e2       	ldi	r24, 0x2D	; 45
     e44:	8f ab       	std	Y+55, r24	; 0x37
     e46:	8d e2       	ldi	r24, 0x2D	; 45
     e48:	88 af       	std	Y+56, r24	; 0x38
     e4a:	8d e2       	ldi	r24, 0x2D	; 45
     e4c:	89 af       	std	Y+57, r24	; 0x39
     e4e:	8d e2       	ldi	r24, 0x2D	; 45
     e50:	8a af       	std	Y+58, r24	; 0x3a
	EEPROM_Read_Block_From_Address(200, admin_check, user_limit);
     e52:	9e 01       	movw	r18, r28
     e54:	21 5d       	subi	r18, 0xD1	; 209
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	88 ec       	ldi	r24, 0xC8	; 200
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	b9 01       	movw	r22, r18
     e5e:	44 e0       	ldi	r20, 0x04	; 4
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
	EEPROM_Read_Block_From_Address(205,pass_admin_check , pass_limit);
     e66:	9e 01       	movw	r18, r28
     e68:	2d 5c       	subi	r18, 0xCD	; 205
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	8d ec       	ldi	r24, 0xCD	; 205
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	b9 01       	movw	r22, r18
     e72:	44 e0       	ldi	r20, 0x04	; 4
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>

	if(admin_check[0]==x[0]||EEPROM_Read_Byte_From_Address(200)==0xFF)
     e7a:	9f a5       	ldd	r25, Y+47	; 0x2f
     e7c:	8f a9       	ldd	r24, Y+55	; 0x37
     e7e:	98 17       	cp	r25, r24
     e80:	39 f0       	breq	.+14     	; 0xe90 <login+0x62>
     e82:	88 ec       	ldi	r24, 0xC8	; 200
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
     e8a:	8f 3f       	cpi	r24, 0xFF	; 255
     e8c:	91 05       	cpc	r25, r1
     e8e:	69 f4       	brne	.+26     	; 0xeaa <login+0x7c>
	{
		ADD_NEW_ADMIN();
     e90:	0e 94 26 0c 	call	0x184c	; 0x184c <ADD_NEW_ADMIN>
		LCD_Init();
     e94:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		LCD_WriteString("added");
     e98:	80 e6       	ldi	r24, 0x60	; 96
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
		LCD_Init();
     ea0:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		main();
     ea4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <main>
     ea8:	a1 c1       	rjmp	.+834    	; 0x11ec <login+0x3be>
	}
	else
	{

	LCD_WriteString("user name: ");
     eaa:	86 e6       	ldi	r24, 0x66	; 102
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>

	for(int i=0 ;i< user_limit ;)
     eb2:	1e a2       	std	Y+38, r1	; 0x26
     eb4:	1d a2       	std	Y+37, r1	; 0x25
     eb6:	89 c0       	rjmp	.+274    	; 0xfca <login+0x19c>
	{
		uint8 letter =GET_Input();
     eb8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
     ebc:	8c a3       	std	Y+36, r24	; 0x24
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a8 e4       	ldi	r26, 0x48	; 72
     ec4:	b3 e4       	ldi	r27, 0x43	; 67
     ec6:	89 8f       	std	Y+25, r24	; 0x19
     ec8:	9a 8f       	std	Y+26, r25	; 0x1a
     eca:	ab 8f       	std	Y+27, r26	; 0x1b
     ecc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ece:	69 8d       	ldd	r22, Y+25	; 0x19
     ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a e7       	ldi	r20, 0x7A	; 122
     edc:	55 e4       	ldi	r21, 0x45	; 69
     ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	8d 8b       	std	Y+21, r24	; 0x15
     ee8:	9e 8b       	std	Y+22, r25	; 0x16
     eea:	af 8b       	std	Y+23, r26	; 0x17
     eec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eee:	6d 89       	ldd	r22, Y+21	; 0x15
     ef0:	7e 89       	ldd	r23, Y+22	; 0x16
     ef2:	8f 89       	ldd	r24, Y+23	; 0x17
     ef4:	98 8d       	ldd	r25, Y+24	; 0x18
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f02:	88 23       	and	r24, r24
     f04:	2c f4       	brge	.+10     	; 0xf10 <login+0xe2>
		__ticks = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9c 8b       	std	Y+20, r25	; 0x14
     f0c:	8b 8b       	std	Y+19, r24	; 0x13
     f0e:	3f c0       	rjmp	.+126    	; 0xf8e <login+0x160>
	else if (__tmp > 65535)
     f10:	6d 89       	ldd	r22, Y+21	; 0x15
     f12:	7e 89       	ldd	r23, Y+22	; 0x16
     f14:	8f 89       	ldd	r24, Y+23	; 0x17
     f16:	98 8d       	ldd	r25, Y+24	; 0x18
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	4f e7       	ldi	r20, 0x7F	; 127
     f1e:	57 e4       	ldi	r21, 0x47	; 71
     f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f24:	18 16       	cp	r1, r24
     f26:	4c f5       	brge	.+82     	; 0xf7a <login+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f28:	69 8d       	ldd	r22, Y+25	; 0x19
     f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9c 8b       	std	Y+20, r25	; 0x14
     f4e:	8b 8b       	std	Y+19, r24	; 0x13
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <login+0x142>
     f52:	80 e9       	ldi	r24, 0x90	; 144
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	9a 8b       	std	Y+18, r25	; 0x12
     f58:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f5a:	89 89       	ldd	r24, Y+17	; 0x11
     f5c:	9a 89       	ldd	r25, Y+18	; 0x12
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <login+0x130>
     f62:	9a 8b       	std	Y+18, r25	; 0x12
     f64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	8b 89       	ldd	r24, Y+19	; 0x13
     f68:	9c 89       	ldd	r25, Y+20	; 0x14
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	9c 8b       	std	Y+20, r25	; 0x14
     f6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	8b 89       	ldd	r24, Y+19	; 0x13
     f72:	9c 89       	ldd	r25, Y+20	; 0x14
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	69 f7       	brne	.-38     	; 0xf52 <login+0x124>
     f78:	14 c0       	rjmp	.+40     	; 0xfa2 <login+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7a:	6d 89       	ldd	r22, Y+21	; 0x15
     f7c:	7e 89       	ldd	r23, Y+22	; 0x16
     f7e:	8f 89       	ldd	r24, Y+23	; 0x17
     f80:	98 8d       	ldd	r25, Y+24	; 0x18
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9c 8b       	std	Y+20, r25	; 0x14
     f8c:	8b 8b       	std	Y+19, r24	; 0x13
     f8e:	8b 89       	ldd	r24, Y+19	; 0x13
     f90:	9c 89       	ldd	r25, Y+20	; 0x14
     f92:	98 8b       	std	Y+16, r25	; 0x10
     f94:	8f 87       	std	Y+15, r24	; 0x0f
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	98 89       	ldd	r25, Y+16	; 0x10
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <login+0x16c>
     f9e:	98 8b       	std	Y+16, r25	; 0x10
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		if(letter!='m'){
     fa2:	8c a1       	ldd	r24, Y+36	; 0x24
     fa4:	8d 36       	cpi	r24, 0x6D	; 109
     fa6:	89 f0       	breq	.+34     	; 0xfca <login+0x19c>
		LCD_WriteChar(letter);
     fa8:	8c a1       	ldd	r24, Y+36	; 0x24
     faa:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
		name[i]=letter;
     fae:	2d a1       	ldd	r18, Y+37	; 0x25
     fb0:	3e a1       	ldd	r19, Y+38	; 0x26
     fb2:	ce 01       	movw	r24, r28
     fb4:	87 96       	adiw	r24, 0x27	; 39
     fb6:	fc 01       	movw	r30, r24
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	8c a1       	ldd	r24, Y+36	; 0x24
     fbe:	80 83       	st	Z, r24
		i++;
     fc0:	8d a1       	ldd	r24, Y+37	; 0x25
     fc2:	9e a1       	ldd	r25, Y+38	; 0x26
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	9e a3       	std	Y+38, r25	; 0x26
     fc8:	8d a3       	std	Y+37, r24	; 0x25
	else
	{

	LCD_WriteString("user name: ");

	for(int i=0 ;i< user_limit ;)
     fca:	8d a1       	ldd	r24, Y+37	; 0x25
     fcc:	9e a1       	ldd	r25, Y+38	; 0x26
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	91 05       	cpc	r25, r1
     fd2:	0c f4       	brge	.+2      	; 0xfd6 <login+0x1a8>
     fd4:	71 cf       	rjmp	.-286    	; 0xeb8 <login+0x8a>
		i++;
		}

	}

    LCD_GoTo(1, 0);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
    LCD_WriteString("password: ");
     fde:	82 e7       	ldi	r24, 0x72	; 114
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    for(int i=0 ;i<pass_limit;)
     fe6:	1b a2       	std	Y+35, r1	; 0x23
     fe8:	1a a2       	std	Y+34, r1	; 0x22
     fea:	89 c0       	rjmp	.+274    	; 0x10fe <login+0x2d0>
    {
    	uint8 letter =GET_Input();
     fec:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
     ff0:	89 a3       	std	Y+33, r24	; 0x21
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a8 e4       	ldi	r26, 0x48	; 72
     ff8:	b3 e4       	ldi	r27, 0x43	; 67
     ffa:	8b 87       	std	Y+11, r24	; 0x0b
     ffc:	9c 87       	std	Y+12, r25	; 0x0c
     ffe:	ad 87       	std	Y+13, r26	; 0x0d
    1000:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1002:	6b 85       	ldd	r22, Y+11	; 0x0b
    1004:	7c 85       	ldd	r23, Y+12	; 0x0c
    1006:	8d 85       	ldd	r24, Y+13	; 0x0d
    1008:	9e 85       	ldd	r25, Y+14	; 0x0e
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	4a e7       	ldi	r20, 0x7A	; 122
    1010:	55 e4       	ldi	r21, 0x45	; 69
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	8f 83       	std	Y+7, r24	; 0x07
    101c:	98 87       	std	Y+8, r25	; 0x08
    101e:	a9 87       	std	Y+9, r26	; 0x09
    1020:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1022:	6f 81       	ldd	r22, Y+7	; 0x07
    1024:	78 85       	ldd	r23, Y+8	; 0x08
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1036:	88 23       	and	r24, r24
    1038:	2c f4       	brge	.+10     	; 0x1044 <login+0x216>
		__ticks = 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
    1042:	3f c0       	rjmp	.+126    	; 0x10c2 <login+0x294>
	else if (__tmp > 65535)
    1044:	6f 81       	ldd	r22, Y+7	; 0x07
    1046:	78 85       	ldd	r23, Y+8	; 0x08
    1048:	89 85       	ldd	r24, Y+9	; 0x09
    104a:	9a 85       	ldd	r25, Y+10	; 0x0a
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	3f ef       	ldi	r19, 0xFF	; 255
    1050:	4f e7       	ldi	r20, 0x7F	; 127
    1052:	57 e4       	ldi	r21, 0x47	; 71
    1054:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1058:	18 16       	cp	r1, r24
    105a:	4c f5       	brge	.+82     	; 0x10ae <login+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105c:	6b 85       	ldd	r22, Y+11	; 0x0b
    105e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1060:	8d 85       	ldd	r24, Y+13	; 0x0d
    1062:	9e 85       	ldd	r25, Y+14	; 0x0e
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
    1084:	0f c0       	rjmp	.+30     	; 0x10a4 <login+0x276>
    1086:	80 e9       	ldi	r24, 0x90	; 144
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	9c 83       	std	Y+4, r25	; 0x04
    108c:	8b 83       	std	Y+3, r24	; 0x03
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <login+0x264>
    1096:	9c 83       	std	Y+4, r25	; 0x04
    1098:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	69 f7       	brne	.-38     	; 0x1086 <login+0x258>
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <login+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ae:	6f 81       	ldd	r22, Y+7	; 0x07
    10b0:	78 85       	ldd	r23, Y+8	; 0x08
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9e 83       	std	Y+6, r25	; 0x06
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <login+0x2a0>
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(200);
    	if(letter!='m'){
    10d6:	89 a1       	ldd	r24, Y+33	; 0x21
    10d8:	8d 36       	cpi	r24, 0x6D	; 109
    10da:	89 f0       	breq	.+34     	; 0x10fe <login+0x2d0>
    	LCD_WriteChar(letter);
    10dc:	89 a1       	ldd	r24, Y+33	; 0x21
    10de:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
    	pass[i]=letter;
    10e2:	2a a1       	ldd	r18, Y+34	; 0x22
    10e4:	3b a1       	ldd	r19, Y+35	; 0x23
    10e6:	ce 01       	movw	r24, r28
    10e8:	8b 96       	adiw	r24, 0x2b	; 43
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	89 a1       	ldd	r24, Y+33	; 0x21
    10f2:	80 83       	st	Z, r24
    	i++;
    10f4:	8a a1       	ldd	r24, Y+34	; 0x22
    10f6:	9b a1       	ldd	r25, Y+35	; 0x23
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	9b a3       	std	Y+35, r25	; 0x23
    10fc:	8a a3       	std	Y+34, r24	; 0x22

	}

    LCD_GoTo(1, 0);
    LCD_WriteString("password: ");
    for(int i=0 ;i<pass_limit;)
    10fe:	8a a1       	ldd	r24, Y+34	; 0x22
    1100:	9b a1       	ldd	r25, Y+35	; 0x23
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	91 05       	cpc	r25, r1
    1106:	0c f4       	brge	.+2      	; 0x110a <login+0x2dc>
    1108:	71 cf       	rjmp	.-286    	; 0xfec <login+0x1be>
    	pass[i]=letter;
    	i++;

    }
    }
    if(name[0]==admin_check[0])
    110a:	9f a1       	ldd	r25, Y+39	; 0x27
    110c:	8f a5       	ldd	r24, Y+47	; 0x2f
    110e:	98 17       	cp	r25, r24
    1110:	09 f0       	breq	.+2      	; 0x1114 <login+0x2e6>
    1112:	4c c0       	rjmp	.+152    	; 0x11ac <login+0x37e>
    		{
    			for(int i=0 ; i<user_limit ;)
    1114:	18 a2       	std	Y+32, r1	; 0x20
    1116:	1f 8e       	std	Y+31, r1	; 0x1f
    1118:	43 c0       	rjmp	.+134    	; 0x11a0 <login+0x372>
    			{
    				if(name[i]==admin_check[i])
    111a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    111c:	38 a1       	ldd	r19, Y+32	; 0x20
    111e:	ce 01       	movw	r24, r28
    1120:	87 96       	adiw	r24, 0x27	; 39
    1122:	fc 01       	movw	r30, r24
    1124:	e2 0f       	add	r30, r18
    1126:	f3 1f       	adc	r31, r19
    1128:	40 81       	ld	r20, Z
    112a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    112c:	38 a1       	ldd	r19, Y+32	; 0x20
    112e:	ce 01       	movw	r24, r28
    1130:	8f 96       	adiw	r24, 0x2f	; 47
    1132:	fc 01       	movw	r30, r24
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	80 81       	ld	r24, Z
    113a:	48 17       	cp	r20, r24
    113c:	89 f5       	brne	.+98     	; 0x11a0 <login+0x372>
    				{

    					i++;
    113e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1140:	98 a1       	ldd	r25, Y+32	; 0x20
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	98 a3       	std	Y+32, r25	; 0x20
    1146:	8f 8f       	std	Y+31, r24	; 0x1f
    					if(i==user_limit)
    1148:	8f 8d       	ldd	r24, Y+31	; 0x1f
    114a:	98 a1       	ldd	r25, Y+32	; 0x20
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	91 05       	cpc	r25, r1
    1150:	39 f5       	brne	.+78     	; 0x11a0 <login+0x372>
    					{

    						for(int j=0 ;j < pass_limit ;)
    1152:	1e 8e       	std	Y+30, r1	; 0x1e
    1154:	1d 8e       	std	Y+29, r1	; 0x1d
    1156:	1f c0       	rjmp	.+62     	; 0x1196 <login+0x368>
    						{

    							if(pass[j]==pass_admin_check[j])
    1158:	2d 8d       	ldd	r18, Y+29	; 0x1d
    115a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    115c:	ce 01       	movw	r24, r28
    115e:	8b 96       	adiw	r24, 0x2b	; 43
    1160:	fc 01       	movw	r30, r24
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	40 81       	ld	r20, Z
    1168:	2d 8d       	ldd	r18, Y+29	; 0x1d
    116a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    116c:	ce 01       	movw	r24, r28
    116e:	c3 96       	adiw	r24, 0x33	; 51
    1170:	fc 01       	movw	r30, r24
    1172:	e2 0f       	add	r30, r18
    1174:	f3 1f       	adc	r31, r19
    1176:	80 81       	ld	r24, Z
    1178:	48 17       	cp	r20, r24
    117a:	69 f4       	brne	.+26     	; 0x1196 <login+0x368>
    							{

    								j++;
    117c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    117e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	9e 8f       	std	Y+30, r25	; 0x1e
    1184:	8d 8f       	std	Y+29, r24	; 0x1d
    								if(j==pass_limit)
    1186:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1188:	9e 8d       	ldd	r25, Y+30	; 0x1e
    118a:	84 30       	cpi	r24, 0x04	; 4
    118c:	91 05       	cpc	r25, r1
    118e:	19 f4       	brne	.+6      	; 0x1196 <login+0x368>
    								{
    									return 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	8b af       	std	Y+59, r24	; 0x3b
    1194:	29 c0       	rjmp	.+82     	; 0x11e8 <login+0x3ba>

    					i++;
    					if(i==user_limit)
    					{

    						for(int j=0 ;j < pass_limit ;)
    1196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	91 05       	cpc	r25, r1
    119e:	e4 f2       	brlt	.-72     	; 0x1158 <login+0x32a>

    }
    }
    if(name[0]==admin_check[0])
    		{
    			for(int i=0 ; i<user_limit ;)
    11a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11a2:	98 a1       	ldd	r25, Y+32	; 0x20
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	91 05       	cpc	r25, r1
    11a8:	0c f4       	brge	.+2      	; 0x11ac <login+0x37e>
    11aa:	b7 cf       	rjmp	.-146    	; 0x111a <login+0x2ec>


    			}
    		}

   if(Check_User(&name, &pass))
    11ac:	ce 01       	movw	r24, r28
    11ae:	87 96       	adiw	r24, 0x27	; 39
    11b0:	9e 01       	movw	r18, r28
    11b2:	25 5d       	subi	r18, 0xD5	; 213
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	b9 01       	movw	r22, r18
    11b8:	0e 94 49 0a 	call	0x1492	; 0x1492 <Check_User>
    11bc:	88 23       	and	r24, r24
    11be:	59 f0       	breq	.+22     	; 0x11d6 <login+0x3a8>
   {
	  LCD_Init();
    11c0:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	  LCD_WriteString("login success");
    11c4:	8d e7       	ldi	r24, 0x7D	; 125
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	 // _delay_ms(500);
	  LCD_Init();
    11cc:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	   return 2;
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	8b af       	std	Y+59, r24	; 0x3b
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <login+0x3ba>
   }

   else
   {
	   LCD_Init();
    11d6:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	   LCD_WriteString("wrong pass or user");
    11da:	8b e8       	ldi	r24, 0x8B	; 139
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	   //_delay_ms(500);
	   LCD_Init();
    11e2:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	   return 0;
    11e6:	1b ae       	std	Y+59, r1	; 0x3b
    11e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    11ea:	8c af       	std	Y+60, r24	; 0x3c
   }



}
}
    11ec:	8c ad       	ldd	r24, Y+60	; 0x3c
    11ee:	ec 96       	adiw	r28, 0x3c	; 60
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <Add_New_user>:

void Add_New_user()
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	6b 97       	sbiw	r28, 0x1b	; 27
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61


LCD_Init();
    1214:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	static uint16 count=0;




	 if(EEPROM_Read_Byte_From_Address(85)>0&&EEPROM_Read_Byte_From_Address(85)<=10)
    1218:	85 e5       	ldi	r24, 0x55	; 85
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    1220:	18 16       	cp	r1, r24
    1222:	19 06       	cpc	r1, r25
    1224:	84 f4       	brge	.+32     	; 0x1246 <Add_New_user+0x46>
    1226:	85 e5       	ldi	r24, 0x55	; 85
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    122e:	8b 30       	cpi	r24, 0x0B	; 11
    1230:	91 05       	cpc	r25, r1
    1232:	4c f4       	brge	.+18     	; 0x1246 <Add_New_user+0x46>
	 {
		count= EEPROM_Read_Byte_From_Address(85);
    1234:	85 e5       	ldi	r24, 0x55	; 85
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    123c:	90 93 eb 02 	sts	0x02EB, r25
    1240:	80 93 ea 02 	sts	0x02EA, r24
    1244:	04 c0       	rjmp	.+8      	; 0x124e <Add_New_user+0x4e>
	 }
	 else
	 {
		 count=0;
    1246:	10 92 eb 02 	sts	0x02EB, r1
    124a:	10 92 ea 02 	sts	0x02EA, r1
	 }



	 uint8 erase_count =EEPROM_Read_Byte_From_Address(90);
    124e:	8a e5       	ldi	r24, 0x5A	; 90
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    1256:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 name1[user_limit];
	uint8 pass[pass_limit];

	static uint16 numUsers=0;
	static uint16 numPass=41;
	 if(erase_count>0&&erase_count<=10)
    1258:	8b 85       	ldd	r24, Y+11	; 0x0b
    125a:	88 23       	and	r24, r24
    125c:	09 f4       	brne	.+2      	; 0x1260 <Add_New_user+0x60>
    125e:	4f c0       	rjmp	.+158    	; 0x12fe <Add_New_user+0xfe>
    1260:	8b 85       	ldd	r24, Y+11	; 0x0b
    1262:	8b 30       	cpi	r24, 0x0B	; 11
    1264:	08 f0       	brcs	.+2      	; 0x1268 <Add_New_user+0x68>
    1266:	4b c0       	rjmp	.+150    	; 0x12fe <Add_New_user+0xfe>
	 {
		 uint16 numUsers_d=0;
    1268:	1a 86       	std	Y+10, r1	; 0x0a
    126a:	19 86       	std	Y+9, r1	; 0x09
		 uint16 numPass_d=41;
    126c:	89 e2       	ldi	r24, 0x29	; 41
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	98 87       	std	Y+8, r25	; 0x08
    1272:	8f 83       	std	Y+7, r24	; 0x07
    1274:	3d c0       	rjmp	.+122    	; 0x12f0 <Add_New_user+0xf0>

			for(;numUsers_d<41;)
			{
				uint8 arr[user_limit];
				uint8 arr_pass[pass_limit];
				EEPROM_Read_Block_From_Address(numUsers_d,arr , user_limit);
    1276:	89 85       	ldd	r24, Y+9	; 0x09
    1278:	9a 85       	ldd	r25, Y+10	; 0x0a
    127a:	9e 01       	movw	r18, r28
    127c:	2c 5e       	subi	r18, 0xEC	; 236
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	b9 01       	movw	r22, r18
    1282:	44 e0       	ldi	r20, 0x04	; 4
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
				EEPROM_Read_Block_From_Address(numPass_d,arr_pass , pass_limit);
    128a:	8f 81       	ldd	r24, Y+7	; 0x07
    128c:	98 85       	ldd	r25, Y+8	; 0x08
    128e:	9e 01       	movw	r18, r28
    1290:	28 5e       	subi	r18, 0xE8	; 232
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	b9 01       	movw	r22, r18
    1296:	44 e0       	ldi	r20, 0x04	; 4
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>


						if(arr[0]=='-')
    129e:	8c 89       	ldd	r24, Y+20	; 0x14
    12a0:	8d 32       	cpi	r24, 0x2D	; 45
    12a2:	e1 f4       	brne	.+56     	; 0x12dc <Add_New_user+0xdc>
						{

							numUsers=numUsers_d;
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	90 93 e9 02 	sts	0x02E9, r25
    12ac:	80 93 e8 02 	sts	0x02E8, r24
							numPass=numPass_d;
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	90 93 ba 02 	sts	0x02BA, r25
    12b8:	80 93 b9 02 	sts	0x02B9, r24
							erase_count--;
    12bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12be:	81 50       	subi	r24, 0x01	; 1
    12c0:	8b 87       	std	Y+11, r24	; 0x0b
							EEPROM_Write_Byte_To_Address(90, erase_count);
    12c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	8a e5       	ldi	r24, 0x5A	; 90
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	b9 01       	movw	r22, r18
    12ce:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>
							LCD_WriteString("done");
    12d2:	8e e9       	ldi	r24, 0x9E	; 158
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    12da:	37 c0       	rjmp	.+110    	; 0x134a <Add_New_user+0x14a>
							break;
						}


				numUsers_d+=4;
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	04 96       	adiw	r24, 0x04	; 4
    12e2:	9a 87       	std	Y+10, r25	; 0x0a
    12e4:	89 87       	std	Y+9, r24	; 0x09
				numPass_d+=4;
    12e6:	8f 81       	ldd	r24, Y+7	; 0x07
    12e8:	98 85       	ldd	r25, Y+8	; 0x08
    12ea:	04 96       	adiw	r24, 0x04	; 4
    12ec:	98 87       	std	Y+8, r25	; 0x08
    12ee:	8f 83       	std	Y+7, r24	; 0x07
	 if(erase_count>0&&erase_count<=10)
	 {
		 uint16 numUsers_d=0;
		 uint16 numPass_d=41;

			for(;numUsers_d<41;)
    12f0:	89 85       	ldd	r24, Y+9	; 0x09
    12f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f4:	89 32       	cpi	r24, 0x29	; 41
    12f6:	91 05       	cpc	r25, r1
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <Add_New_user+0xfc>
    12fa:	bd cf       	rjmp	.-134    	; 0x1276 <Add_New_user+0x76>
    12fc:	26 c0       	rjmp	.+76     	; 0x134a <Add_New_user+0x14a>


	 }
	 else
	 {
		 numUsers =numUsers+(4*count);
    12fe:	80 91 ea 02 	lds	r24, 0x02EA
    1302:	90 91 eb 02 	lds	r25, 0x02EB
    1306:	9c 01       	movw	r18, r24
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	80 91 e8 02 	lds	r24, 0x02E8
    1314:	90 91 e9 02 	lds	r25, 0x02E9
    1318:	82 0f       	add	r24, r18
    131a:	93 1f       	adc	r25, r19
    131c:	90 93 e9 02 	sts	0x02E9, r25
    1320:	80 93 e8 02 	sts	0x02E8, r24
		 numPass=numPass+(4*count);
    1324:	80 91 ea 02 	lds	r24, 0x02EA
    1328:	90 91 eb 02 	lds	r25, 0x02EB
    132c:	9c 01       	movw	r18, r24
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	22 0f       	add	r18, r18
    1334:	33 1f       	adc	r19, r19
    1336:	80 91 b9 02 	lds	r24, 0x02B9
    133a:	90 91 ba 02 	lds	r25, 0x02BA
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	90 93 ba 02 	sts	0x02BA, r25
    1346:	80 93 b9 02 	sts	0x02B9, r24
	 }



	LCD_WriteString("user name: ");
    134a:	86 e6       	ldi	r24, 0x66	; 102
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>

	for(int i=0 ;i< user_limit ;)
    1352:	1e 82       	std	Y+6, r1	; 0x06
    1354:	1d 82       	std	Y+5, r1	; 0x05
    1356:	17 c0       	rjmp	.+46     	; 0x1386 <Add_New_user+0x186>
	{
		uint8 letter =GET_Input();
    1358:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    135c:	8c 83       	std	Y+4, r24	; 0x04
		//_delay_ms(20);
		if(letter!='m'){
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	8d 36       	cpi	r24, 0x6D	; 109
    1362:	89 f0       	breq	.+34     	; 0x1386 <Add_New_user+0x186>
		LCD_WriteChar(letter);
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
		name1[i]=letter;
    136a:	2d 81       	ldd	r18, Y+5	; 0x05
    136c:	3e 81       	ldd	r19, Y+6	; 0x06
    136e:	ce 01       	movw	r24, r28
    1370:	0c 96       	adiw	r24, 0x0c	; 12
    1372:	fc 01       	movw	r30, r24
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	80 83       	st	Z, r24
		i++;
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05



	LCD_WriteString("user name: ");

	for(int i=0 ;i< user_limit ;)
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	91 05       	cpc	r25, r1
    138e:	24 f3       	brlt	.-56     	; 0x1358 <Add_New_user+0x158>
		}
	}



    LCD_GoTo(1, 0);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
    LCD_WriteString("password: ");
    1398:	82 e7       	ldi	r24, 0x72	; 114
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    for(int i=0 ;i<pass_limit;)
    13a0:	1b 82       	std	Y+3, r1	; 0x03
    13a2:	1a 82       	std	Y+2, r1	; 0x02
    13a4:	17 c0       	rjmp	.+46     	; 0x13d4 <Add_New_user+0x1d4>
    {
    	uint8 letter =GET_Input();
    13a6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    13aa:	89 83       	std	Y+1, r24	; 0x01
    	//_delay_ms(20);
    	if(letter!='m'){
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	8d 36       	cpi	r24, 0x6D	; 109
    13b0:	89 f0       	breq	.+34     	; 0x13d4 <Add_New_user+0x1d4>
    	LCD_WriteChar(letter);
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
    	pass[i]=letter;
    13b8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ba:	3b 81       	ldd	r19, Y+3	; 0x03
    13bc:	ce 01       	movw	r24, r28
    13be:	40 96       	adiw	r24, 0x10	; 16
    13c0:	fc 01       	movw	r30, r24
    13c2:	e2 0f       	add	r30, r18
    13c4:	f3 1f       	adc	r31, r19
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	80 83       	st	Z, r24
    	i++;
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	9b 83       	std	Y+3, r25	; 0x03
    13d2:	8a 83       	std	Y+2, r24	; 0x02



    LCD_GoTo(1, 0);
    LCD_WriteString("password: ");
    for(int i=0 ;i<pass_limit;)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	91 05       	cpc	r25, r1
    13dc:	24 f3       	brlt	.-56     	; 0x13a6 <Add_New_user+0x1a6>
    	i++;

       }
    }

    if(Check_User_Exist(name1, pass))
    13de:	ce 01       	movw	r24, r28
    13e0:	0c 96       	adiw	r24, 0x0c	; 12
    13e2:	9e 01       	movw	r18, r28
    13e4:	20 5f       	subi	r18, 0xF0	; 240
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	b9 01       	movw	r22, r18
    13ea:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Check_User_Exist>
    13ee:	88 23       	and	r24, r24
    13f0:	e9 f1       	breq	.+122    	; 0x146c <Add_New_user+0x26c>
    {
        EEPROM_Write_Block_To_Address(numUsers, name1 ,user_limit);
    13f2:	80 91 e8 02 	lds	r24, 0x02E8
    13f6:	90 91 e9 02 	lds	r25, 0x02E9
    13fa:	9e 01       	movw	r18, r28
    13fc:	24 5f       	subi	r18, 0xF4	; 244
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	b9 01       	movw	r22, r18
    1402:	44 e0       	ldi	r20, 0x04	; 4
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
    	EEPROM_Write_Block_To_Address(numPass, pass ,pass_limit);
    140a:	80 91 b9 02 	lds	r24, 0x02B9
    140e:	90 91 ba 02 	lds	r25, 0x02BA
    1412:	9e 01       	movw	r18, r28
    1414:	20 5f       	subi	r18, 0xF0	; 240
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	b9 01       	movw	r22, r18
    141a:	44 e0       	ldi	r20, 0x04	; 4
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
        numUsers+=4;
    1422:	80 91 e8 02 	lds	r24, 0x02E8
    1426:	90 91 e9 02 	lds	r25, 0x02E9
    142a:	04 96       	adiw	r24, 0x04	; 4
    142c:	90 93 e9 02 	sts	0x02E9, r25
    1430:	80 93 e8 02 	sts	0x02E8, r24
        numPass+=4;
    1434:	80 91 b9 02 	lds	r24, 0x02B9
    1438:	90 91 ba 02 	lds	r25, 0x02BA
    143c:	04 96       	adiw	r24, 0x04	; 4
    143e:	90 93 ba 02 	sts	0x02BA, r25
    1442:	80 93 b9 02 	sts	0x02B9, r24
        count++;
    1446:	80 91 ea 02 	lds	r24, 0x02EA
    144a:	90 91 eb 02 	lds	r25, 0x02EB
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	90 93 eb 02 	sts	0x02EB, r25
    1454:	80 93 ea 02 	sts	0x02EA, r24
        EEPROM_Write_Byte_To_Address(85, count);
    1458:	20 91 ea 02 	lds	r18, 0x02EA
    145c:	30 91 eb 02 	lds	r19, 0x02EB
    1460:	85 e5       	ldi	r24, 0x55	; 85
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	b9 01       	movw	r22, r18
    1466:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>
    146a:	0a c0       	rjmp	.+20     	; 0x1480 <Add_New_user+0x280>
    }
    else
    {
    	LCD_Init();
    146c:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    	LCD_WriteString("antother one");
    1470:	83 ea       	ldi	r24, 0xA3	; 163
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    	LCD_Init();
    1478:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    	Add_New_user();
    147c:	0e 94 00 09 	call	0x1200	; 0x1200 <Add_New_user>

    }



}
    1480:	6b 96       	adiw	r28, 0x1b	; 27
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <Check_User>:

uint8 Check_User(uint8 name[],uint8 pass[])
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	65 97       	sbiw	r28, 0x15	; 21
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	9a 8b       	std	Y+18, r25	; 0x12
    14a8:	89 8b       	std	Y+17, r24	; 0x11
    14aa:	7c 8b       	std	Y+20, r23	; 0x14
    14ac:	6b 8b       	std	Y+19, r22	; 0x13
	 uint16 numUsers=0;
    14ae:	18 86       	std	Y+8, r1	; 0x08
    14b0:	1f 82       	std	Y+7, r1	; 0x07
	 uint16 numPass=41;
    14b2:	89 e2       	ldi	r24, 0x29	; 41
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	9e 83       	std	Y+6, r25	; 0x06
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	76 c0       	rjmp	.+236    	; 0x15a8 <Check_User+0x116>

	for(;numUsers<41;)
	{
		uint8 arr[user_limit];
		uint8 arr_pass[pass_limit];
		EEPROM_Read_Block_From_Address(numUsers,arr , user_limit);
    14bc:	8f 81       	ldd	r24, Y+7	; 0x07
    14be:	98 85       	ldd	r25, Y+8	; 0x08
    14c0:	9e 01       	movw	r18, r28
    14c2:	27 5f       	subi	r18, 0xF7	; 247
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	b9 01       	movw	r22, r18
    14c8:	44 e0       	ldi	r20, 0x04	; 4
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
		EEPROM_Read_Block_From_Address(numPass,arr_pass , pass_limit);
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	9e 01       	movw	r18, r28
    14d6:	23 5f       	subi	r18, 0xF3	; 243
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	b9 01       	movw	r22, r18
    14dc:	44 e0       	ldi	r20, 0x04	; 4
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
		if(arr[0]==name[0])
    14e4:	99 85       	ldd	r25, Y+9	; 0x09
    14e6:	e9 89       	ldd	r30, Y+17	; 0x11
    14e8:	fa 89       	ldd	r31, Y+18	; 0x12
    14ea:	80 81       	ld	r24, Z
    14ec:	98 17       	cp	r25, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <Check_User+0x60>
    14f0:	51 c0       	rjmp	.+162    	; 0x1594 <Check_User+0x102>
		{
			for(int i=0 ; i<user_limit ;)
    14f2:	1c 82       	std	Y+4, r1	; 0x04
    14f4:	1b 82       	std	Y+3, r1	; 0x03
    14f6:	48 c0       	rjmp	.+144    	; 0x1588 <Check_User+0xf6>
			{
				if(arr[i]==name[i])
    14f8:	2b 81       	ldd	r18, Y+3	; 0x03
    14fa:	3c 81       	ldd	r19, Y+4	; 0x04
    14fc:	ce 01       	movw	r24, r28
    14fe:	09 96       	adiw	r24, 0x09	; 9
    1500:	fc 01       	movw	r30, r24
    1502:	e2 0f       	add	r30, r18
    1504:	f3 1f       	adc	r31, r19
    1506:	40 81       	ld	r20, Z
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	89 89       	ldd	r24, Y+17	; 0x11
    150e:	9a 89       	ldd	r25, Y+18	; 0x12
    1510:	fc 01       	movw	r30, r24
    1512:	e2 0f       	add	r30, r18
    1514:	f3 1f       	adc	r31, r19
    1516:	80 81       	ld	r24, Z
    1518:	48 17       	cp	r20, r24
    151a:	a1 f5       	brne	.+104    	; 0x1584 <Check_User+0xf2>
				{

					i++;
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	9c 83       	std	Y+4, r25	; 0x04
    1524:	8b 83       	std	Y+3, r24	; 0x03
					if(i==user_limit)
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	91 05       	cpc	r25, r1
    152e:	61 f5       	brne	.+88     	; 0x1588 <Check_User+0xf6>
					{
						for(int j=0 ;j < pass_limit ;)
    1530:	1a 82       	std	Y+2, r1	; 0x02
    1532:	19 82       	std	Y+1, r1	; 0x01
    1534:	21 c0       	rjmp	.+66     	; 0x1578 <Check_User+0xe6>
						{
							if(pass[j]==arr_pass[j])
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	3a 81       	ldd	r19, Y+2	; 0x02
    153a:	8b 89       	ldd	r24, Y+19	; 0x13
    153c:	9c 89       	ldd	r25, Y+20	; 0x14
    153e:	fc 01       	movw	r30, r24
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	40 81       	ld	r20, Z
    1546:	29 81       	ldd	r18, Y+1	; 0x01
    1548:	3a 81       	ldd	r19, Y+2	; 0x02
    154a:	ce 01       	movw	r24, r28
    154c:	0d 96       	adiw	r24, 0x0d	; 13
    154e:	fc 01       	movw	r30, r24
    1550:	e2 0f       	add	r30, r18
    1552:	f3 1f       	adc	r31, r19
    1554:	80 81       	ld	r24, Z
    1556:	48 17       	cp	r20, r24
    1558:	69 f4       	brne	.+26     	; 0x1574 <Check_User+0xe2>
							{
								j++;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
								if(j==pass_limit)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	91 05       	cpc	r25, r1
    156c:	29 f4       	brne	.+10     	; 0x1578 <Check_User+0xe6>
								{
									return 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	8d 8b       	std	Y+21, r24	; 0x15
    1572:	21 c0       	rjmp	.+66     	; 0x15b6 <Check_User+0x124>
								}
							}
							else
							{
								return 0;
    1574:	1d 8a       	std	Y+21, r1	; 0x15
    1576:	1f c0       	rjmp	.+62     	; 0x15b6 <Check_User+0x124>
				{

					i++;
					if(i==user_limit)
					{
						for(int j=0 ;j < pass_limit ;)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	91 05       	cpc	r25, r1
    1580:	d4 f2       	brlt	.-76     	; 0x1536 <Check_User+0xa4>
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <Check_User+0xf6>
					}

				}
				else
				{
					return 0;
    1584:	1d 8a       	std	Y+21, r1	; 0x15
    1586:	17 c0       	rjmp	.+46     	; 0x15b6 <Check_User+0x124>
		uint8 arr_pass[pass_limit];
		EEPROM_Read_Block_From_Address(numUsers,arr , user_limit);
		EEPROM_Read_Block_From_Address(numPass,arr_pass , pass_limit);
		if(arr[0]==name[0])
		{
			for(int i=0 ; i<user_limit ;)
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	91 05       	cpc	r25, r1
    1590:	0c f4       	brge	.+2      	; 0x1594 <Check_User+0x102>
    1592:	b2 cf       	rjmp	.-156    	; 0x14f8 <Check_User+0x66>
					return 0;
				}

			}
		}
		numUsers+=4;
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	04 96       	adiw	r24, 0x04	; 4
    159a:	98 87       	std	Y+8, r25	; 0x08
    159c:	8f 83       	std	Y+7, r24	; 0x07
		numPass+=4;
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	04 96       	adiw	r24, 0x04	; 4
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
uint8 Check_User(uint8 name[],uint8 pass[])
{
	 uint16 numUsers=0;
	 uint16 numPass=41;

	for(;numUsers<41;)
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	98 85       	ldd	r25, Y+8	; 0x08
    15ac:	89 32       	cpi	r24, 0x29	; 41
    15ae:	91 05       	cpc	r25, r1
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <Check_User+0x122>
    15b2:	84 cf       	rjmp	.-248    	; 0x14bc <Check_User+0x2a>
			}
		}
		numUsers+=4;
		numPass+=4;
	}
	return 0;
    15b4:	1d 8a       	std	Y+21, r1	; 0x15
    15b6:	8d 89       	ldd	r24, Y+21	; 0x15


}
    15b8:	65 96       	adiw	r28, 0x15	; 21
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <delete_user>:

void delete_user(uint8 name[])
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	65 97       	sbiw	r28, 0x15	; 21
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	9d 8b       	std	Y+21, r25	; 0x15
    15e0:	8c 8b       	std	Y+20, r24	; 0x14
	 uint16 numUsers=0;
    15e2:	1f 82       	std	Y+7, r1	; 0x07
    15e4:	1e 82       	std	Y+6, r1	; 0x06
	 uint16 numPass=41;
    15e6:	89 e2       	ldi	r24, 0x29	; 41
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9d 83       	std	Y+5, r25	; 0x05
    15ec:	8c 83       	std	Y+4, r24	; 0x04
	 uint8 arr_deleted[4]={'-','-','-','-'};
    15ee:	8d e2       	ldi	r24, 0x2D	; 45
    15f0:	88 87       	std	Y+8, r24	; 0x08
    15f2:	8d e2       	ldi	r24, 0x2D	; 45
    15f4:	89 87       	std	Y+9, r24	; 0x09
    15f6:	8d e2       	ldi	r24, 0x2D	; 45
    15f8:	8a 87       	std	Y+10, r24	; 0x0a
    15fa:	8d e2       	ldi	r24, 0x2D	; 45
    15fc:	8b 87       	std	Y+11, r24	; 0x0b
	 static uint8 erase=0;
	 if(EEPROM_Read_Byte_From_Address(90)>0&&EEPROM_Read_Byte_From_Address(90)<=10)
    15fe:	8a e5       	ldi	r24, 0x5A	; 90
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    1606:	18 16       	cp	r1, r24
    1608:	19 06       	cpc	r1, r25
    160a:	74 f4       	brge	.+28     	; 0x1628 <delete_user+0x5e>
    160c:	8a e5       	ldi	r24, 0x5A	; 90
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    1614:	8b 30       	cpi	r24, 0x0B	; 11
    1616:	91 05       	cpc	r25, r1
    1618:	3c f4       	brge	.+14     	; 0x1628 <delete_user+0x5e>
		 {
			erase= EEPROM_Read_Byte_From_Address(90);
    161a:	8a e5       	ldi	r24, 0x5A	; 90
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    1622:	80 93 ec 02 	sts	0x02EC, r24
    1626:	89 c0       	rjmp	.+274    	; 0x173a <delete_user+0x170>
		 }
		 else
		 {
			 erase=0;
    1628:	10 92 ec 02 	sts	0x02EC, r1
			 EEPROM_Write_Byte_To_Address(90, erase);
    162c:	80 91 ec 02 	lds	r24, 0x02EC
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8a e5       	ldi	r24, 0x5A	; 90
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	b9 01       	movw	r22, r18
    163a:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>
    163e:	7d c0       	rjmp	.+250    	; 0x173a <delete_user+0x170>

		for(;numUsers<41;)
		{
			uint8 arr[user_limit];
			uint8 arr_pass[pass_limit];
			EEPROM_Read_Block_From_Address(numUsers,arr , user_limit);
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	9e 01       	movw	r18, r28
    1646:	24 5f       	subi	r18, 0xF4	; 244
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	b9 01       	movw	r22, r18
    164c:	44 e0       	ldi	r20, 0x04	; 4
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
			EEPROM_Read_Block_From_Address(numPass,arr_pass , pass_limit);
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	9e 01       	movw	r18, r28
    165a:	20 5f       	subi	r18, 0xF0	; 240
    165c:	3f 4f       	sbci	r19, 0xFF	; 255
    165e:	b9 01       	movw	r22, r18
    1660:	44 e0       	ldi	r20, 0x04	; 4
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
			if(arr[0]==name[0])
    1668:	9c 85       	ldd	r25, Y+12	; 0x0c
    166a:	ec 89       	ldd	r30, Y+20	; 0x14
    166c:	fd 89       	ldd	r31, Y+21	; 0x15
    166e:	80 81       	ld	r24, Z
    1670:	98 17       	cp	r25, r24
    1672:	09 f0       	breq	.+2      	; 0x1676 <delete_user+0xac>
    1674:	58 c0       	rjmp	.+176    	; 0x1726 <delete_user+0x15c>
			{
				for(int i=0 ; i<user_limit ;)
    1676:	1b 82       	std	Y+3, r1	; 0x03
    1678:	1a 82       	std	Y+2, r1	; 0x02
    167a:	4f c0       	rjmp	.+158    	; 0x171a <delete_user+0x150>
				{
					if(arr[i]==name[i])
    167c:	2a 81       	ldd	r18, Y+2	; 0x02
    167e:	3b 81       	ldd	r19, Y+3	; 0x03
    1680:	ce 01       	movw	r24, r28
    1682:	0c 96       	adiw	r24, 0x0c	; 12
    1684:	fc 01       	movw	r30, r24
    1686:	e2 0f       	add	r30, r18
    1688:	f3 1f       	adc	r31, r19
    168a:	40 81       	ld	r20, Z
    168c:	2a 81       	ldd	r18, Y+2	; 0x02
    168e:	3b 81       	ldd	r19, Y+3	; 0x03
    1690:	8c 89       	ldd	r24, Y+20	; 0x14
    1692:	9d 89       	ldd	r25, Y+21	; 0x15
    1694:	fc 01       	movw	r30, r24
    1696:	e2 0f       	add	r30, r18
    1698:	f3 1f       	adc	r31, r19
    169a:	80 81       	ld	r24, Z
    169c:	48 17       	cp	r20, r24
    169e:	e9 f5       	brne	.+122    	; 0x171a <delete_user+0x150>
					{


						i++;
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	9b 81       	ldd	r25, Y+3	; 0x03
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	9b 83       	std	Y+3, r25	; 0x03
    16a8:	8a 83       	std	Y+2, r24	; 0x02
						if(i==user_limit)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	9b 81       	ldd	r25, Y+3	; 0x03
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	91 05       	cpc	r25, r1
    16b2:	99 f5       	brne	.+102    	; 0x171a <delete_user+0x150>
						{
							EEPROM_Write_Block_To_Address(numUsers ,arr_deleted, 4);
    16b4:	8e 81       	ldd	r24, Y+6	; 0x06
    16b6:	9f 81       	ldd	r25, Y+7	; 0x07
    16b8:	9e 01       	movw	r18, r28
    16ba:	28 5f       	subi	r18, 0xF8	; 248
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	b9 01       	movw	r22, r18
    16c0:	44 e0       	ldi	r20, 0x04	; 4
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
							EEPROM_Write_Block_To_Address(numPass, arr_deleted, 4);
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	9e 01       	movw	r18, r28
    16ce:	28 5f       	subi	r18, 0xF8	; 248
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	b9 01       	movw	r22, r18
    16d4:	44 e0       	ldi	r20, 0x04	; 4
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
							erase++;
    16dc:	80 91 ec 02 	lds	r24, 0x02EC
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	80 93 ec 02 	sts	0x02EC, r24
							EEPROM_Write_Byte_To_Address(90, erase);
    16e6:	80 91 ec 02 	lds	r24, 0x02EC
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	8a e5       	ldi	r24, 0x5A	; 90
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	b9 01       	movw	r22, r18
    16f4:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>
							uint8 x=EEPROM_Read_Byte_From_Address(85);
    16f8:	85 e5       	ldi	r24, 0x55	; 85
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    1700:	89 83       	std	Y+1, r24	; 0x01
							x--;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	81 50       	subi	r24, 0x01	; 1
    1706:	89 83       	std	Y+1, r24	; 0x01
							EEPROM_Write_Byte_To_Address(85, x);
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	85 e5       	ldi	r24, 0x55	; 85
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	b9 01       	movw	r22, r18
    1714:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>
    1718:	1c c0       	rjmp	.+56     	; 0x1752 <delete_user+0x188>
			uint8 arr_pass[pass_limit];
			EEPROM_Read_Block_From_Address(numUsers,arr , user_limit);
			EEPROM_Read_Block_From_Address(numPass,arr_pass , pass_limit);
			if(arr[0]==name[0])
			{
				for(int i=0 ; i<user_limit ;)
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	91 05       	cpc	r25, r1
    1722:	0c f4       	brge	.+2      	; 0x1726 <delete_user+0x15c>
    1724:	ab cf       	rjmp	.-170    	; 0x167c <delete_user+0xb2>

					}

				}
			}
			numUsers+=4;
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	04 96       	adiw	r24, 0x04	; 4
    172c:	9f 83       	std	Y+7, r25	; 0x07
    172e:	8e 83       	std	Y+6, r24	; 0x06
			numPass+=4;
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	04 96       	adiw	r24, 0x04	; 4
    1736:	9d 83       	std	Y+5, r25	; 0x05
    1738:	8c 83       	std	Y+4, r24	; 0x04





		for(;numUsers<41;)
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	89 32       	cpi	r24, 0x29	; 41
    1740:	91 05       	cpc	r25, r1
    1742:	08 f4       	brcc	.+2      	; 0x1746 <delete_user+0x17c>
    1744:	7d cf       	rjmp	.-262    	; 0x1640 <delete_user+0x76>
				}
			}
			numUsers+=4;
			numPass+=4;
}
		LCD_Init();
    1746:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		LCD_WriteString("error");
    174a:	80 eb       	ldi	r24, 0xB0	; 176
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>

		return ;


}
    1752:	65 96       	adiw	r28, 0x15	; 21
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <Check_User_Exist>:


uint8 Check_User_Exist(uint8 name[],uint8 pass[])
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	63 97       	sbiw	r28, 0x13	; 19
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	98 8b       	std	Y+16, r25	; 0x10
    177a:	8f 87       	std	Y+15, r24	; 0x0f
    177c:	7a 8b       	std	Y+18, r23	; 0x12
    177e:	69 8b       	std	Y+17, r22	; 0x11
	 uint16 numUsers=0;
    1780:	1e 82       	std	Y+6, r1	; 0x06
    1782:	1d 82       	std	Y+5, r1	; 0x05
	 uint16 numPass=41;
    1784:	89 e2       	ldi	r24, 0x29	; 41
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
    178c:	4d c0       	rjmp	.+154    	; 0x1828 <Check_User_Exist+0xc4>

	for(;numUsers<41;)
	{
		uint8 arr[user_limit];
		uint8 arr_pass[pass_limit];
		EEPROM_Read_Block_From_Address(numUsers,arr , user_limit);
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	9e 01       	movw	r18, r28
    1794:	29 5f       	subi	r18, 0xF9	; 249
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	b9 01       	movw	r22, r18
    179a:	44 e0       	ldi	r20, 0x04	; 4
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
		EEPROM_Read_Block_From_Address(numPass,arr_pass , pass_limit);
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	9e 01       	movw	r18, r28
    17a8:	25 5f       	subi	r18, 0xF5	; 245
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	b9 01       	movw	r22, r18
    17ae:	44 e0       	ldi	r20, 0x04	; 4
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
		if(arr[0]==name[0])
    17b6:	9f 81       	ldd	r25, Y+7	; 0x07
    17b8:	ef 85       	ldd	r30, Y+15	; 0x0f
    17ba:	f8 89       	ldd	r31, Y+16	; 0x10
    17bc:	80 81       	ld	r24, Z
    17be:	98 17       	cp	r25, r24
    17c0:	49 f5       	brne	.+82     	; 0x1814 <Check_User_Exist+0xb0>
		{
			for(int i=0 ; i<user_limit ;)
    17c2:	1a 82       	std	Y+2, r1	; 0x02
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	21 c0       	rjmp	.+66     	; 0x180a <Check_User_Exist+0xa6>
			{
				if(arr[i]==name[i])
    17c8:	29 81       	ldd	r18, Y+1	; 0x01
    17ca:	3a 81       	ldd	r19, Y+2	; 0x02
    17cc:	ce 01       	movw	r24, r28
    17ce:	07 96       	adiw	r24, 0x07	; 7
    17d0:	fc 01       	movw	r30, r24
    17d2:	e2 0f       	add	r30, r18
    17d4:	f3 1f       	adc	r31, r19
    17d6:	40 81       	ld	r20, Z
    17d8:	29 81       	ldd	r18, Y+1	; 0x01
    17da:	3a 81       	ldd	r19, Y+2	; 0x02
    17dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17de:	98 89       	ldd	r25, Y+16	; 0x10
    17e0:	fc 01       	movw	r30, r24
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	80 81       	ld	r24, Z
    17e8:	48 17       	cp	r20, r24
    17ea:	61 f4       	brne	.+24     	; 0x1804 <Check_User_Exist+0xa0>
				{

					i++;
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
					if(i==user_limit)
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	84 30       	cpi	r24, 0x04	; 4
    17fc:	91 05       	cpc	r25, r1
    17fe:	29 f4       	brne	.+10     	; 0x180a <Check_User_Exist+0xa6>
					{
						return 0;
    1800:	1b 8a       	std	Y+19, r1	; 0x13
    1802:	1a c0       	rjmp	.+52     	; 0x1838 <Check_User_Exist+0xd4>
					}

				}
				else
				{
					return 1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	8b 8b       	std	Y+19, r24	; 0x13
    1808:	17 c0       	rjmp	.+46     	; 0x1838 <Check_User_Exist+0xd4>
		uint8 arr_pass[pass_limit];
		EEPROM_Read_Block_From_Address(numUsers,arr , user_limit);
		EEPROM_Read_Block_From_Address(numPass,arr_pass , pass_limit);
		if(arr[0]==name[0])
		{
			for(int i=0 ; i<user_limit ;)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	91 05       	cpc	r25, r1
    1812:	d4 f2       	brlt	.-76     	; 0x17c8 <Check_User_Exist+0x64>
					return 1;
				}

			}
		}
		numUsers+=4;
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	04 96       	adiw	r24, 0x04	; 4
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
		numPass+=4;
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	04 96       	adiw	r24, 0x04	; 4
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
uint8 Check_User_Exist(uint8 name[],uint8 pass[])
{
	 uint16 numUsers=0;
	 uint16 numPass=41;

	for(;numUsers<41;)
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	89 32       	cpi	r24, 0x29	; 41
    182e:	91 05       	cpc	r25, r1
    1830:	08 f4       	brcc	.+2      	; 0x1834 <Check_User_Exist+0xd0>
    1832:	ad cf       	rjmp	.-166    	; 0x178e <Check_User_Exist+0x2a>
			}
		}
		numUsers+=4;
		numPass+=4;
	}
	return 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	8b 8b       	std	Y+19, r24	; 0x13
    1838:	8b 89       	ldd	r24, Y+19	; 0x13


}
    183a:	63 96       	adiw	r28, 0x13	; 19
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <ADD_NEW_ADMIN>:

void ADD_NEW_ADMIN()
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	e8 97       	sbiw	r28, 0x38	; 56
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61


	    LCD_Init();
    1860:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	    LCD_WriteString("add admin");
    1864:	86 eb       	ldi	r24, 0xB6	; 182
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a8 e4       	ldi	r26, 0x48	; 72
    1872:	b3 e4       	ldi	r27, 0x43	; 67
    1874:	8f a3       	std	Y+39, r24	; 0x27
    1876:	98 a7       	std	Y+40, r25	; 0x28
    1878:	a9 a7       	std	Y+41, r26	; 0x29
    187a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187c:	6f a1       	ldd	r22, Y+39	; 0x27
    187e:	78 a5       	ldd	r23, Y+40	; 0x28
    1880:	89 a5       	ldd	r24, Y+41	; 0x29
    1882:	9a a5       	ldd	r25, Y+42	; 0x2a
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a e7       	ldi	r20, 0x7A	; 122
    188a:	55 e4       	ldi	r21, 0x45	; 69
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	8b a3       	std	Y+35, r24	; 0x23
    1896:	9c a3       	std	Y+36, r25	; 0x24
    1898:	ad a3       	std	Y+37, r26	; 0x25
    189a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    189c:	6b a1       	ldd	r22, Y+35	; 0x23
    189e:	7c a1       	ldd	r23, Y+36	; 0x24
    18a0:	8d a1       	ldd	r24, Y+37	; 0x25
    18a2:	9e a1       	ldd	r25, Y+38	; 0x26
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	2c f4       	brge	.+10     	; 0x18be <ADD_NEW_ADMIN+0x72>
		__ticks = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9a a3       	std	Y+34, r25	; 0x22
    18ba:	89 a3       	std	Y+33, r24	; 0x21
    18bc:	3f c0       	rjmp	.+126    	; 0x193c <ADD_NEW_ADMIN+0xf0>
	else if (__tmp > 65535)
    18be:	6b a1       	ldd	r22, Y+35	; 0x23
    18c0:	7c a1       	ldd	r23, Y+36	; 0x24
    18c2:	8d a1       	ldd	r24, Y+37	; 0x25
    18c4:	9e a1       	ldd	r25, Y+38	; 0x26
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    18ca:	4f e7       	ldi	r20, 0x7F	; 127
    18cc:	57 e4       	ldi	r21, 0x47	; 71
    18ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d2:	18 16       	cp	r1, r24
    18d4:	4c f5       	brge	.+82     	; 0x1928 <ADD_NEW_ADMIN+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d6:	6f a1       	ldd	r22, Y+39	; 0x27
    18d8:	78 a5       	ldd	r23, Y+40	; 0x28
    18da:	89 a5       	ldd	r24, Y+41	; 0x29
    18dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9a a3       	std	Y+34, r25	; 0x22
    18fc:	89 a3       	std	Y+33, r24	; 0x21
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <ADD_NEW_ADMIN+0xd2>
    1900:	80 e9       	ldi	r24, 0x90	; 144
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	98 a3       	std	Y+32, r25	; 0x20
    1906:	8f 8f       	std	Y+31, r24	; 0x1f
    1908:	8f 8d       	ldd	r24, Y+31	; 0x1f
    190a:	98 a1       	ldd	r25, Y+32	; 0x20
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <ADD_NEW_ADMIN+0xc0>
    1910:	98 a3       	std	Y+32, r25	; 0x20
    1912:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	89 a1       	ldd	r24, Y+33	; 0x21
    1916:	9a a1       	ldd	r25, Y+34	; 0x22
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	9a a3       	std	Y+34, r25	; 0x22
    191c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191e:	89 a1       	ldd	r24, Y+33	; 0x21
    1920:	9a a1       	ldd	r25, Y+34	; 0x22
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	69 f7       	brne	.-38     	; 0x1900 <ADD_NEW_ADMIN+0xb4>
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <ADD_NEW_ADMIN+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	6b a1       	ldd	r22, Y+35	; 0x23
    192a:	7c a1       	ldd	r23, Y+36	; 0x24
    192c:	8d a1       	ldd	r24, Y+37	; 0x25
    192e:	9e a1       	ldd	r25, Y+38	; 0x26
    1930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	9a a3       	std	Y+34, r25	; 0x22
    193a:	89 a3       	std	Y+33, r24	; 0x21
    193c:	89 a1       	ldd	r24, Y+33	; 0x21
    193e:	9a a1       	ldd	r25, Y+34	; 0x22
    1940:	9e 8f       	std	Y+30, r25	; 0x1e
    1942:	8d 8f       	std	Y+29, r24	; 0x1d
    1944:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1946:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <ADD_NEW_ADMIN+0xfc>
    194c:	9e 8f       	std	Y+30, r25	; 0x1e
    194e:	8d 8f       	std	Y+29, r24	; 0x1d
	    _delay_ms(200);
	    LCD_Init();
    1950:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		static uint16 adminPass=205;




		LCD_WriteString("user name: ");
    1954:	86 e6       	ldi	r24, 0x66	; 102
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>

		for(int i=0 ;i< user_limit ;)
    195c:	18 aa       	std	Y+48, r1	; 0x30
    195e:	1f a6       	std	Y+47, r1	; 0x2f
    1960:	89 c0       	rjmp	.+274    	; 0x1a74 <ADD_NEW_ADMIN+0x228>
		{
			uint8 letter =GET_Input();
    1962:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    1966:	8e a7       	std	Y+46, r24	; 0x2e
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a8 e4       	ldi	r26, 0x48	; 72
    196e:	b3 e4       	ldi	r27, 0x43	; 67
    1970:	89 8f       	std	Y+25, r24	; 0x19
    1972:	9a 8f       	std	Y+26, r25	; 0x1a
    1974:	ab 8f       	std	Y+27, r26	; 0x1b
    1976:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	69 8d       	ldd	r22, Y+25	; 0x19
    197a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a e7       	ldi	r20, 0x7A	; 122
    1986:	55 e4       	ldi	r21, 0x45	; 69
    1988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8d 8b       	std	Y+21, r24	; 0x15
    1992:	9e 8b       	std	Y+22, r25	; 0x16
    1994:	af 8b       	std	Y+23, r26	; 0x17
    1996:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1998:	6d 89       	ldd	r22, Y+21	; 0x15
    199a:	7e 89       	ldd	r23, Y+22	; 0x16
    199c:	8f 89       	ldd	r24, Y+23	; 0x17
    199e:	98 8d       	ldd	r25, Y+24	; 0x18
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <ADD_NEW_ADMIN+0x16e>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9c 8b       	std	Y+20, r25	; 0x14
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
    19b8:	3f c0       	rjmp	.+126    	; 0x1a38 <ADD_NEW_ADMIN+0x1ec>
	else if (__tmp > 65535)
    19ba:	6d 89       	ldd	r22, Y+21	; 0x15
    19bc:	7e 89       	ldd	r23, Y+22	; 0x16
    19be:	8f 89       	ldd	r24, Y+23	; 0x17
    19c0:	98 8d       	ldd	r25, Y+24	; 0x18
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	4f e7       	ldi	r20, 0x7F	; 127
    19c8:	57 e4       	ldi	r21, 0x47	; 71
    19ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	4c f5       	brge	.+82     	; 0x1a24 <ADD_NEW_ADMIN+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	69 8d       	ldd	r22, Y+25	; 0x19
    19d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9c 8b       	std	Y+20, r25	; 0x14
    19f8:	8b 8b       	std	Y+19, r24	; 0x13
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <ADD_NEW_ADMIN+0x1ce>
    19fc:	80 e9       	ldi	r24, 0x90	; 144
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
    1a04:	89 89       	ldd	r24, Y+17	; 0x11
    1a06:	9a 89       	ldd	r25, Y+18	; 0x12
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <ADD_NEW_ADMIN+0x1bc>
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	9c 8b       	std	Y+20, r25	; 0x14
    1a18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	69 f7       	brne	.-38     	; 0x19fc <ADD_NEW_ADMIN+0x1b0>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <ADD_NEW_ADMIN+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	6d 89       	ldd	r22, Y+21	; 0x15
    1a26:	7e 89       	ldd	r23, Y+22	; 0x16
    1a28:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9c 8b       	std	Y+20, r25	; 0x14
    1a36:	8b 8b       	std	Y+19, r24	; 0x13
    1a38:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
    1a40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a42:	98 89       	ldd	r25, Y+16	; 0x10
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <ADD_NEW_ADMIN+0x1f8>
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			if(letter!='m'){
    1a4c:	8e a5       	ldd	r24, Y+46	; 0x2e
    1a4e:	8d 36       	cpi	r24, 0x6D	; 109
    1a50:	89 f0       	breq	.+34     	; 0x1a74 <ADD_NEW_ADMIN+0x228>
			LCD_WriteChar(letter);
    1a52:	8e a5       	ldd	r24, Y+46	; 0x2e
    1a54:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
			name1[i]=letter;
    1a58:	2f a5       	ldd	r18, Y+47	; 0x2f
    1a5a:	38 a9       	ldd	r19, Y+48	; 0x30
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	c1 96       	adiw	r24, 0x31	; 49
    1a60:	fc 01       	movw	r30, r24
    1a62:	e2 0f       	add	r30, r18
    1a64:	f3 1f       	adc	r31, r19
    1a66:	8e a5       	ldd	r24, Y+46	; 0x2e
    1a68:	80 83       	st	Z, r24
			i++;
    1a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	98 ab       	std	Y+48, r25	; 0x30
    1a72:	8f a7       	std	Y+47, r24	; 0x2f



		LCD_WriteString("user name: ");

		for(int i=0 ;i< user_limit ;)
    1a74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a76:	98 a9       	ldd	r25, Y+48	; 0x30
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	0c f4       	brge	.+2      	; 0x1a80 <ADD_NEW_ADMIN+0x234>
    1a7e:	71 cf       	rjmp	.-286    	; 0x1962 <ADD_NEW_ADMIN+0x116>
			}
		}



	    LCD_GoTo(1, 0);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
	    LCD_WriteString("password: ");
    1a88:	82 e7       	ldi	r24, 0x72	; 114
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	    for(int i=0 ;i<pass_limit;)
    1a90:	1d a6       	std	Y+45, r1	; 0x2d
    1a92:	1c a6       	std	Y+44, r1	; 0x2c
    1a94:	89 c0       	rjmp	.+274    	; 0x1ba8 <ADD_NEW_ADMIN+0x35c>
	    {
	    	uint8 letter =GET_Input();
    1a96:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    1a9a:	8b a7       	std	Y+43, r24	; 0x2b
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a8 e4       	ldi	r26, 0x48	; 72
    1aa2:	b3 e4       	ldi	r27, 0x43	; 67
    1aa4:	8b 87       	std	Y+11, r24	; 0x0b
    1aa6:	9c 87       	std	Y+12, r25	; 0x0c
    1aa8:	ad 87       	std	Y+13, r26	; 0x0d
    1aaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a e7       	ldi	r20, 0x7A	; 122
    1aba:	55 e4       	ldi	r21, 0x45	; 69
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	8f 83       	std	Y+7, r24	; 0x07
    1ac6:	98 87       	std	Y+8, r25	; 0x08
    1ac8:	a9 87       	std	Y+9, r26	; 0x09
    1aca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <ADD_NEW_ADMIN+0x2a2>
		__ticks = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	3f c0       	rjmp	.+126    	; 0x1b6c <ADD_NEW_ADMIN+0x320>
	else if (__tmp > 65535)
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	4c f5       	brge	.+82     	; 0x1b58 <ADD_NEW_ADMIN+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <ADD_NEW_ADMIN+0x302>
    1b30:	80 e9       	ldi	r24, 0x90	; 144
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <ADD_NEW_ADMIN+0x2f0>
    1b40:	9c 83       	std	Y+4, r25	; 0x04
    1b42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <ADD_NEW_ADMIN+0x2e4>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <ADD_NEW_ADMIN+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <ADD_NEW_ADMIN+0x32c>
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	    	_delay_ms(200);
	    	if(letter!='m'){
    1b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b82:	8d 36       	cpi	r24, 0x6D	; 109
    1b84:	89 f0       	breq	.+34     	; 0x1ba8 <ADD_NEW_ADMIN+0x35c>
	    	LCD_WriteChar(letter);
    1b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b88:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
	    	pass[i]=letter;
    1b8c:	2c a5       	ldd	r18, Y+44	; 0x2c
    1b8e:	3d a5       	ldd	r19, Y+45	; 0x2d
    1b90:	ce 01       	movw	r24, r28
    1b92:	c5 96       	adiw	r24, 0x35	; 53
    1b94:	fc 01       	movw	r30, r24
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b9c:	80 83       	st	Z, r24
	    	i++;
    1b9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ba0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	9d a7       	std	Y+45, r25	; 0x2d
    1ba6:	8c a7       	std	Y+44, r24	; 0x2c



	    LCD_GoTo(1, 0);
	    LCD_WriteString("password: ");
	    for(int i=0 ;i<pass_limit;)
    1ba8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1baa:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	91 05       	cpc	r25, r1
    1bb0:	0c f4       	brge	.+2      	; 0x1bb4 <ADD_NEW_ADMIN+0x368>
    1bb2:	71 cf       	rjmp	.-286    	; 0x1a96 <ADD_NEW_ADMIN+0x24a>

	       }
	    }


	        EEPROM_Write_Block_To_Address(adminUsers, name1 ,user_limit);
    1bb4:	80 91 bd 02 	lds	r24, 0x02BD
    1bb8:	90 91 be 02 	lds	r25, 0x02BE
    1bbc:	9e 01       	movw	r18, r28
    1bbe:	2f 5c       	subi	r18, 0xCF	; 207
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	b9 01       	movw	r22, r18
    1bc4:	44 e0       	ldi	r20, 0x04	; 4
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
	    	EEPROM_Write_Block_To_Address(adminPass, pass ,pass_limit);
    1bcc:	80 91 bb 02 	lds	r24, 0x02BB
    1bd0:	90 91 bc 02 	lds	r25, 0x02BC
    1bd4:	9e 01       	movw	r18, r28
    1bd6:	2b 5c       	subi	r18, 0xCB	; 203
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	b9 01       	movw	r22, r18
    1bdc:	44 e0       	ldi	r20, 0x04	; 4
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>





}
    1be4:	e8 96       	adiw	r28, 0x38	; 56
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <Delete_ALL>:

void Delete_ALL()
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <Delete_ALL+0x6>
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <Delete_ALL+0x8>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <Delete_ALL+0xa>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
	for(int i=0 ;i<82 ;i++)
    1c04:	1a 82       	std	Y+2, r1	; 0x02
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	0b c0       	rjmp	.+22     	; 0x1c20 <Delete_ALL+0x2a>
	{
		EEPROM_Write_Byte_To_Address(i, '-');
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	6d e2       	ldi	r22, 0x2D	; 45
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>

}

void Delete_ALL()
{
	for(int i=0 ;i<82 ;i++)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	82 35       	cpi	r24, 0x52	; 82
    1c26:	91 05       	cpc	r25, r1
    1c28:	84 f3       	brlt	.-32     	; 0x1c0a <Delete_ALL+0x14>
	{
		EEPROM_Write_Byte_To_Address(i, '-');
	}
	uint8 o[4]={'-','-','-','-'};
    1c2a:	8d e2       	ldi	r24, 0x2D	; 45
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
    1c2e:	8d e2       	ldi	r24, 0x2D	; 45
    1c30:	8c 83       	std	Y+4, r24	; 0x04
    1c32:	8d e2       	ldi	r24, 0x2D	; 45
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	8d e2       	ldi	r24, 0x2D	; 45
    1c38:	8e 83       	std	Y+6, r24	; 0x06
	EEPROM_Write_Block_To_Address(200, o, 4);
    1c3a:	9e 01       	movw	r18, r28
    1c3c:	2d 5f       	subi	r18, 0xFD	; 253
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	b9 01       	movw	r22, r18
    1c46:	44 e0       	ldi	r20, 0x04	; 4
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
	EEPROM_Write_Block_To_Address(205, o, 4);
    1c4e:	9e 01       	movw	r18, r28
    1c50:	2d 5f       	subi	r18, 0xFD	; 253
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	8d ec       	ldi	r24, 0xCD	; 205
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	b9 01       	movw	r22, r18
    1c5a:	44 e0       	ldi	r20, 0x04	; 4
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
	EEPROM_Write_Byte_To_Address(85, 0);
    1c62:	85 e5       	ldi	r24, 0x55	; 85
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>
	EEPROM_Write_Byte_To_Address(90, 0);
    1c6e:	8a e5       	ldi	r24, 0x5A	; 90
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <EEPROM_Write_Byte_To_Address>


}
    1c7a:	26 96       	adiw	r28, 0x06	; 6
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <GET_Input>:

uint8 GET_Input()
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <GET_Input+0x6>
    1c92:	0f 92       	push	r0
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
	 while(1)
					{
					uint8 x=UART_RxChar();
    1c98:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <UART_RxChar>
    1c9c:	8a 83       	std	Y+2, r24	; 0x02

						if(KeyPad_GetChar()!='m'){
    1c9e:	0e 94 bb 28 	call	0x5176	; 0x5176 <KeyPad_GetChar>
    1ca2:	8d 36       	cpi	r24, 0x6D	; 109
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	31 f0       	breq	.+12     	; 0x1cb4 <GET_Input+0x28>
						uint8 x =KeyPad_GetChar();
    1ca8:	0e 94 bb 28 	call	0x5176	; 0x5176 <KeyPad_GetChar>
    1cac:	89 83       	std	Y+1, r24	; 0x01
						return x;
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <GET_Input+0x32>
						x='m';
			            break;
						}

						else if(x!='m')
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	8d 36       	cpi	r24, 0x6D	; 109
    1cb8:	79 f3       	breq	.-34     	; 0x1c98 <GET_Input+0xc>
						{
						return x;
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
							x='m';
							break;
						}

					}
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <main>:




int main()
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	ac 97       	sbiw	r28, 0x2c	; 44
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61

    BUZZER_init();
    1ce0:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <BUZZER_init>
	LCD_Init();
    1ce4:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	KeyPad_Init();
    1ce8:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <KeyPad_Init>
	TEMP_Init();
    1cec:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <TEMP_Init>
	all_led_init();
    1cf0:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <all_led_init>
	ServoMotor_Init();
    1cf4:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <ServoMotor_Init>
	UART_Init();
    1cf8:	0e 94 42 26 	call	0x4c84	; 0x4c84 <UART_Init>




uint8 counter_of_wrong_login=0;
    1cfc:	1c a6       	std	Y+44, r1	; 0x2c
uint8 x=login();
    1cfe:	0e 94 17 07 	call	0xe2e	; 0xe2e <login>
    1d02:	8b a7       	std	Y+43, r24	; 0x2b
    1d04:	80 c0       	rjmp	.+256    	; 0x1e06 <main+0x13a>
while(x==0)
{
counter_of_wrong_login++;
    1d06:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	8c a7       	std	Y+44, r24	; 0x2c
if(counter_of_wrong_login==3)
    1d0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <main+0x48>
    1d12:	76 c0       	rjmp	.+236    	; 0x1e00 <main+0x134>
{
	BUZZER_START();
    1d14:	0e 94 da 26 	call	0x4db4	; 0x4db4 <BUZZER_START>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	aa ef       	ldi	r26, 0xFA	; 250
    1d1e:	b3 e4       	ldi	r27, 0x43	; 67
    1d20:	8f a3       	std	Y+39, r24	; 0x27
    1d22:	98 a7       	std	Y+40, r25	; 0x28
    1d24:	a9 a7       	std	Y+41, r26	; 0x29
    1d26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a e7       	ldi	r20, 0x7A	; 122
    1d36:	55 e4       	ldi	r21, 0x45	; 69
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8b a3       	std	Y+35, r24	; 0x23
    1d42:	9c a3       	std	Y+36, r25	; 0x24
    1d44:	ad a3       	std	Y+37, r26	; 0x25
    1d46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d48:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <main+0x9e>
		__ticks = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <main+0x11c>
	else if (__tmp > 65535)
    1d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d70:	9e a1       	ldd	r25, Y+38	; 0x26
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	4c f5       	brge	.+82     	; 0x1dd4 <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	6f a1       	ldd	r22, Y+39	; 0x27
    1d84:	78 a5       	ldd	r23, Y+40	; 0x28
    1d86:	89 a5       	ldd	r24, Y+41	; 0x29
    1d88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9a a3       	std	Y+34, r25	; 0x22
    1da8:	89 a3       	std	Y+33, r24	; 0x21
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <main+0xfe>
    1dac:	80 e9       	ldi	r24, 0x90	; 144
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	98 a3       	std	Y+32, r25	; 0x20
    1db2:	8f 8f       	std	Y+31, r24	; 0x1f
    1db4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1db6:	98 a1       	ldd	r25, Y+32	; 0x20
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <main+0xec>
    1dbc:	98 a3       	std	Y+32, r25	; 0x20
    1dbe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	9a a3       	std	Y+34, r25	; 0x22
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	89 a1       	ldd	r24, Y+33	; 0x21
    1dcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <main+0xe0>
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dda:	9e a1       	ldd	r25, Y+38	; 0x26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9a a3       	std	Y+34, r25	; 0x22
    1de6:	89 a3       	std	Y+33, r24	; 0x21
    1de8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dea:	9a a1       	ldd	r25, Y+34	; 0x22
    1dec:	9e 8f       	std	Y+30, r25	; 0x1e
    1dee:	8d 8f       	std	Y+29, r24	; 0x1d
    1df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <main+0x128>
    1df8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dfa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	BUZZER_STOP();
    1dfc:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <BUZZER_STOP>
}
x=login();
    1e00:	0e 94 17 07 	call	0xe2e	; 0xe2e <login>
    1e04:	8b a7       	std	Y+43, r24	; 0x2b



uint8 counter_of_wrong_login=0;
uint8 x=login();
while(x==0)
    1e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <main+0x142>
    1e0c:	7c cf       	rjmp	.-264    	; 0x1d06 <main+0x3a>
	_delay_ms(500);
	BUZZER_STOP();
}
x=login();
}
		if(x==1)
    1e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <main+0x14a>
    1e14:	7b c0       	rjmp	.+246    	; 0x1f0c <main+0x240>
		{
			ServoMotor_Set_Degree(2);
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <ServoMotor_Set_Degree>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	aa ef       	ldi	r26, 0xFA	; 250
    1e22:	b3 e4       	ldi	r27, 0x43	; 67
    1e24:	89 8f       	std	Y+25, r24	; 0x19
    1e26:	9a 8f       	std	Y+26, r25	; 0x1a
    1e28:	ab 8f       	std	Y+27, r26	; 0x1b
    1e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a e7       	ldi	r20, 0x7A	; 122
    1e3a:	55 e4       	ldi	r21, 0x45	; 69
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8d 8b       	std	Y+21, r24	; 0x15
    1e46:	9e 8b       	std	Y+22, r25	; 0x16
    1e48:	af 8b       	std	Y+23, r26	; 0x17
    1e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	98 8d       	ldd	r25, Y+24	; 0x18
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <main+0x1a2>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9c 8b       	std	Y+20, r25	; 0x14
    1e6a:	8b 8b       	std	Y+19, r24	; 0x13
    1e6c:	3f c0       	rjmp	.+126    	; 0x1eec <main+0x220>
	else if (__tmp > 65535)
    1e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e70:	7e 89       	ldd	r23, Y+22	; 0x16
    1e72:	8f 89       	ldd	r24, Y+23	; 0x17
    1e74:	98 8d       	ldd	r25, Y+24	; 0x18
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	4c f5       	brge	.+82     	; 0x1ed8 <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e86:	69 8d       	ldd	r22, Y+25	; 0x19
    1e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9c 8b       	std	Y+20, r25	; 0x14
    1eac:	8b 8b       	std	Y+19, r24	; 0x13
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <main+0x202>
    1eb0:	80 e9       	ldi	r24, 0x90	; 144
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	9a 8b       	std	Y+18, r25	; 0x12
    1eb6:	89 8b       	std	Y+17, r24	; 0x11
    1eb8:	89 89       	ldd	r24, Y+17	; 0x11
    1eba:	9a 89       	ldd	r25, Y+18	; 0x12
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <main+0x1f0>
    1ec0:	9a 8b       	std	Y+18, r25	; 0x12
    1ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9c 8b       	std	Y+20, r25	; 0x14
    1ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	69 f7       	brne	.-38     	; 0x1eb0 <main+0x1e4>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eda:	7e 89       	ldd	r23, Y+22	; 0x16
    1edc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ede:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	8b 8b       	std	Y+19, r24	; 0x13
    1eec:	8b 89       	ldd	r24, Y+19	; 0x13
    1eee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef0:	98 8b       	std	Y+16, r25	; 0x10
    1ef2:	8f 87       	std	Y+15, r24	; 0x0f
    1ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef6:	98 89       	ldd	r25, Y+16	; 0x10
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <main+0x22c>
    1efc:	98 8b       	std	Y+16, r25	; 0x10
    1efe:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			ServoMotor_Set_Degree(0);
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <ServoMotor_Set_Degree>
			Menu_For_Admin();
    1f06:	0e 94 a6 1b 	call	0x374c	; 0x374c <Menu_For_Admin>
    1f0a:	7e c0       	rjmp	.+252    	; 0x2008 <main+0x33c>
		}
		else if(x==2)
    1f0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <main+0x248>
    1f12:	7a c0       	rjmp	.+244    	; 0x2008 <main+0x33c>
		{
			ServoMotor_Set_Degree(2);
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <ServoMotor_Set_Degree>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	aa ef       	ldi	r26, 0xFA	; 250
    1f20:	b3 e4       	ldi	r27, 0x43	; 67
    1f22:	8b 87       	std	Y+11, r24	; 0x0b
    1f24:	9c 87       	std	Y+12, r25	; 0x0c
    1f26:	ad 87       	std	Y+13, r26	; 0x0d
    1f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	55 e4       	ldi	r21, 0x45	; 69
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8f 83       	std	Y+7, r24	; 0x07
    1f44:	98 87       	std	Y+8, r25	; 0x08
    1f46:	a9 87       	std	Y+9, r26	; 0x09
    1f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <main+0x2a0>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <main+0x31e>
	else if (__tmp > 65535)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <main+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <main+0x300>
    1fae:	80 e9       	ldi	r24, 0x90	; 144
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <main+0x2ee>
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <main+0x2e2>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <main+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <main+0x32a>
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			ServoMotor_Set_Degree(0);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <ServoMotor_Set_Degree>
			Menu_For_User();
    2004:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <Menu_For_User>
		}


   return 0;
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
	}
    200c:	ac 96       	adiw	r28, 0x2c	; 44
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <lED>:

#include "menu.h"

void lED()
{
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	cd 59       	subi	r28, 0x9D	; 157
    202c:	d0 40       	sbci	r29, 0x00	; 0
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    2038:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	LCD_WriteString("1-room1 2-room2");
    203c:	80 ec       	ldi	r24, 0xC0	; 192
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	LCD_GoTo(1, 0);
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
	LCD_WriteString("3-room3  4-more");
    204c:	80 ed       	ldi	r24, 0xD0	; 208
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	uint8 x = GET_Input();
    2054:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    2058:	fe 01       	movw	r30, r28
    205a:	e3 57       	subi	r30, 0x73	; 115
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 83       	st	Z, r24
    2060:	fe 01       	movw	r30, r28
    2062:	e5 58       	subi	r30, 0x85	; 133
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a8 e4       	ldi	r26, 0x48	; 72
    206c:	b3 e4       	ldi	r27, 0x43	; 67
    206e:	80 83       	st	Z, r24
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	a2 83       	std	Z+2, r26	; 0x02
    2074:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	8e 01       	movw	r16, r28
    2078:	09 58       	subi	r16, 0x89	; 137
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e5 58       	subi	r30, 0x85	; 133
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a e7       	ldi	r20, 0x7A	; 122
    2090:	55 e4       	ldi	r21, 0x45	; 69
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	f8 01       	movw	r30, r16
    209c:	80 83       	st	Z, r24
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	a2 83       	std	Z+2, r26	; 0x02
    20a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a4:	fe 01       	movw	r30, r28
    20a6:	e9 58       	subi	r30, 0x89	; 137
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	44 f4       	brge	.+16     	; 0x20d2 <lED+0xb4>
		__ticks = 1;
    20c2:	fe 01       	movw	r30, r28
    20c4:	eb 58       	subi	r30, 0x8B	; 139
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	64 c0       	rjmp	.+200    	; 0x219a <lED+0x17c>
	else if (__tmp > 65535)
    20d2:	fe 01       	movw	r30, r28
    20d4:	e9 58       	subi	r30, 0x89	; 137
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <lED+0xd4>
    20f0:	43 c0       	rjmp	.+134    	; 0x2178 <lED+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	fe 01       	movw	r30, r28
    20f4:	e5 58       	subi	r30, 0x85	; 133
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	60 81       	ld	r22, Z
    20fa:	71 81       	ldd	r23, Z+1	; 0x01
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	8e 01       	movw	r16, r28
    2112:	0b 58       	subi	r16, 0x8B	; 139
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	f8 01       	movw	r30, r16
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	1f c0       	rjmp	.+62     	; 0x2168 <lED+0x14a>
    212a:	fe 01       	movw	r30, r28
    212c:	ed 58       	subi	r30, 0x8D	; 141
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	80 e9       	ldi	r24, 0x90	; 144
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
    2138:	fe 01       	movw	r30, r28
    213a:	ed 58       	subi	r30, 0x8D	; 141
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <lED+0x124>
    2146:	fe 01       	movw	r30, r28
    2148:	ed 58       	subi	r30, 0x8D	; 141
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	de 01       	movw	r26, r28
    2152:	ab 58       	subi	r26, 0x8B	; 139
    2154:	bf 4f       	sbci	r27, 0xFF	; 255
    2156:	fe 01       	movw	r30, r28
    2158:	eb 58       	subi	r30, 0x8B	; 139
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	11 96       	adiw	r26, 0x01	; 1
    2164:	9c 93       	st	X, r25
    2166:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	fe 01       	movw	r30, r28
    216a:	eb 58       	subi	r30, 0x8B	; 139
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	d1 f6       	brne	.-76     	; 0x212a <lED+0x10c>
    2176:	28 c0       	rjmp	.+80     	; 0x21c8 <lED+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	8e 01       	movw	r16, r28
    217a:	0b 58       	subi	r16, 0x8B	; 139
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	fe 01       	movw	r30, r28
    2180:	e9 58       	subi	r30, 0x89	; 137
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	f8 01       	movw	r30, r16
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	de 01       	movw	r26, r28
    219c:	af 58       	subi	r26, 0x8F	; 143
    219e:	bf 4f       	sbci	r27, 0xFF	; 255
    21a0:	fe 01       	movw	r30, r28
    21a2:	eb 58       	subi	r30, 0x8B	; 139
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	9c 93       	st	X, r25
    21ae:	8e 93       	st	-X, r24
    21b0:	fe 01       	movw	r30, r28
    21b2:	ef 58       	subi	r30, 0x8F	; 143
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <lED+0x19c>
    21be:	fe 01       	movw	r30, r28
    21c0:	ef 58       	subi	r30, 0x8F	; 143
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
	_delay_ms(200);


	switch (x)
    21c8:	fe 01       	movw	r30, r28
    21ca:	e3 57       	subi	r30, 0x73	; 115
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	c4 56       	subi	r28, 0x64	; 100
    21d6:	df 4f       	sbci	r29, 0xFF	; 255
    21d8:	39 83       	std	Y+1, r19	; 0x01
    21da:	28 83       	st	Y, r18
    21dc:	cc 59       	subi	r28, 0x9C	; 156
    21de:	d0 40       	sbci	r29, 0x00	; 0
    21e0:	c4 56       	subi	r28, 0x64	; 100
    21e2:	df 4f       	sbci	r29, 0xFF	; 255
    21e4:	88 81       	ld	r24, Y
    21e6:	99 81       	ldd	r25, Y+1	; 0x01
    21e8:	cc 59       	subi	r28, 0x9C	; 156
    21ea:	d0 40       	sbci	r29, 0x00	; 0
    21ec:	82 33       	cpi	r24, 0x32	; 50
    21ee:	91 05       	cpc	r25, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <lED+0x1d6>
    21f2:	2c c1       	rjmp	.+600    	; 0x244c <lED+0x42e>
    21f4:	c4 56       	subi	r28, 0x64	; 100
    21f6:	df 4f       	sbci	r29, 0xFF	; 255
    21f8:	e8 81       	ld	r30, Y
    21fa:	f9 81       	ldd	r31, Y+1	; 0x01
    21fc:	cc 59       	subi	r28, 0x9C	; 156
    21fe:	d0 40       	sbci	r29, 0x00	; 0
    2200:	e3 33       	cpi	r30, 0x33	; 51
    2202:	f1 05       	cpc	r31, r1
    2204:	54 f4       	brge	.+20     	; 0x221a <lED+0x1fc>
    2206:	c4 56       	subi	r28, 0x64	; 100
    2208:	df 4f       	sbci	r29, 0xFF	; 255
    220a:	28 81       	ld	r18, Y
    220c:	39 81       	ldd	r19, Y+1	; 0x01
    220e:	cc 59       	subi	r28, 0x9C	; 156
    2210:	d0 40       	sbci	r29, 0x00	; 0
    2212:	21 33       	cpi	r18, 0x31	; 49
    2214:	31 05       	cpc	r19, r1
    2216:	b1 f0       	breq	.+44     	; 0x2244 <lED+0x226>
    2218:	49 c6       	rjmp	.+3218   	; 0x2eac <lED+0xe8e>
    221a:	c4 56       	subi	r28, 0x64	; 100
    221c:	df 4f       	sbci	r29, 0xFF	; 255
    221e:	88 81       	ld	r24, Y
    2220:	99 81       	ldd	r25, Y+1	; 0x01
    2222:	cc 59       	subi	r28, 0x9C	; 156
    2224:	d0 40       	sbci	r29, 0x00	; 0
    2226:	83 33       	cpi	r24, 0x33	; 51
    2228:	91 05       	cpc	r25, r1
    222a:	09 f4       	brne	.+2      	; 0x222e <lED+0x210>
    222c:	13 c2       	rjmp	.+1062   	; 0x2654 <lED+0x636>
    222e:	c4 56       	subi	r28, 0x64	; 100
    2230:	df 4f       	sbci	r29, 0xFF	; 255
    2232:	e8 81       	ld	r30, Y
    2234:	f9 81       	ldd	r31, Y+1	; 0x01
    2236:	cc 59       	subi	r28, 0x9C	; 156
    2238:	d0 40       	sbci	r29, 0x00	; 0
    223a:	e4 33       	cpi	r30, 0x34	; 52
    223c:	f1 05       	cpc	r31, r1
    223e:	09 f4       	brne	.+2      	; 0x2242 <lED+0x224>
    2240:	1a c3       	rjmp	.+1588   	; 0x2876 <lED+0x858>
    2242:	34 c6       	rjmp	.+3176   	; 0x2eac <lED+0xe8e>
	{

	case('1'):
	{
		LCD_Init();
    2244:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		LCD_WriteString("1-ON 2-OFF");
    2248:	80 ee       	ldi	r24, 0xE0	; 224
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>

		/*while (x == 'm')
		{
			x = KeyPad_GetChar();
		}*/
		uint8 y=0;
    2250:	fe 01       	movw	r30, r28
    2252:	e4 57       	subi	r30, 0x74	; 116
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	10 82       	st	Z, r1
		do
		{
			uint8 x = GET_Input();
    2258:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    225c:	fe 01       	movw	r30, r28
    225e:	e5 57       	subi	r30, 0x75	; 117
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 83       	st	Z, r24
    2264:	fe 01       	movw	r30, r28
    2266:	e3 59       	subi	r30, 0x93	; 147
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a8 e4       	ldi	r26, 0x48	; 72
    2270:	b3 e4       	ldi	r27, 0x43	; 67
    2272:	80 83       	st	Z, r24
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	a2 83       	std	Z+2, r26	; 0x02
    2278:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	8e 01       	movw	r16, r28
    227c:	07 59       	subi	r16, 0x97	; 151
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	fe 01       	movw	r30, r28
    2282:	e3 59       	subi	r30, 0x93	; 147
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a e7       	ldi	r20, 0x7A	; 122
    2294:	55 e4       	ldi	r21, 0x45	; 69
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	f8 01       	movw	r30, r16
    22a0:	80 83       	st	Z, r24
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	a2 83       	std	Z+2, r26	; 0x02
    22a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a8:	fe 01       	movw	r30, r28
    22aa:	e7 59       	subi	r30, 0x97	; 151
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	44 f4       	brge	.+16     	; 0x22d6 <lED+0x2b8>
		__ticks = 1;
    22c6:	fe 01       	movw	r30, r28
    22c8:	e9 59       	subi	r30, 0x99	; 153
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	64 c0       	rjmp	.+200    	; 0x239e <lED+0x380>
	else if (__tmp > 65535)
    22d6:	fe 01       	movw	r30, r28
    22d8:	e7 59       	subi	r30, 0x97	; 151
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <lED+0x2d8>
    22f4:	43 c0       	rjmp	.+134    	; 0x237c <lED+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	fe 01       	movw	r30, r28
    22f8:	e3 59       	subi	r30, 0x93	; 147
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8e 01       	movw	r16, r28
    2316:	09 59       	subi	r16, 0x99	; 153
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	1f c0       	rjmp	.+62     	; 0x236c <lED+0x34e>
    232e:	fe 01       	movw	r30, r28
    2330:	eb 59       	subi	r30, 0x9B	; 155
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 e9       	ldi	r24, 0x90	; 144
    2336:	91 e0       	ldi	r25, 0x01	; 1
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	fe 01       	movw	r30, r28
    233e:	eb 59       	subi	r30, 0x9B	; 155
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <lED+0x328>
    234a:	fe 01       	movw	r30, r28
    234c:	eb 59       	subi	r30, 0x9B	; 155
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	de 01       	movw	r26, r28
    2356:	a9 59       	subi	r26, 0x99	; 153
    2358:	bf 4f       	sbci	r27, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	e9 59       	subi	r30, 0x99	; 153
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	11 96       	adiw	r26, 0x01	; 1
    2368:	9c 93       	st	X, r25
    236a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	fe 01       	movw	r30, r28
    236e:	e9 59       	subi	r30, 0x99	; 153
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	d1 f6       	brne	.-76     	; 0x232e <lED+0x310>
    237a:	28 c0       	rjmp	.+80     	; 0x23cc <lED+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	8e 01       	movw	r16, r28
    237e:	09 59       	subi	r16, 0x99	; 153
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e7 59       	subi	r30, 0x97	; 151
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	f8 01       	movw	r30, r16
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	de 01       	movw	r26, r28
    23a0:	ad 59       	subi	r26, 0x9D	; 157
    23a2:	bf 4f       	sbci	r27, 0xFF	; 255
    23a4:	fe 01       	movw	r30, r28
    23a6:	e9 59       	subi	r30, 0x99	; 153
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	11 96       	adiw	r26, 0x01	; 1
    23b0:	9c 93       	st	X, r25
    23b2:	8e 93       	st	-X, r24
    23b4:	fe 01       	movw	r30, r28
    23b6:	ed 59       	subi	r30, 0x9D	; 157
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <lED+0x3a0>
    23c2:	fe 01       	movw	r30, r28
    23c4:	ed 59       	subi	r30, 0x9D	; 157
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
					_delay_ms(200);
			switch (x)
    23cc:	fe 01       	movw	r30, r28
    23ce:	e5 57       	subi	r30, 0x75	; 117
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	c6 56       	subi	r28, 0x66	; 102
    23da:	df 4f       	sbci	r29, 0xFF	; 255
    23dc:	39 83       	std	Y+1, r19	; 0x01
    23de:	28 83       	st	Y, r18
    23e0:	ca 59       	subi	r28, 0x9A	; 154
    23e2:	d0 40       	sbci	r29, 0x00	; 0
    23e4:	c6 56       	subi	r28, 0x66	; 102
    23e6:	df 4f       	sbci	r29, 0xFF	; 255
    23e8:	88 81       	ld	r24, Y
    23ea:	99 81       	ldd	r25, Y+1	; 0x01
    23ec:	ca 59       	subi	r28, 0x9A	; 154
    23ee:	d0 40       	sbci	r29, 0x00	; 0
    23f0:	81 33       	cpi	r24, 0x31	; 49
    23f2:	91 05       	cpc	r25, r1
    23f4:	51 f0       	breq	.+20     	; 0x240a <lED+0x3ec>
    23f6:	c6 56       	subi	r28, 0x66	; 102
    23f8:	df 4f       	sbci	r29, 0xFF	; 255
    23fa:	e8 81       	ld	r30, Y
    23fc:	f9 81       	ldd	r31, Y+1	; 0x01
    23fe:	ca 59       	subi	r28, 0x9A	; 154
    2400:	d0 40       	sbci	r29, 0x00	; 0
    2402:	e2 33       	cpi	r30, 0x32	; 50
    2404:	f1 05       	cpc	r31, r1
    2406:	61 f0       	breq	.+24     	; 0x2420 <lED+0x402>
    2408:	16 c0       	rjmp	.+44     	; 0x2436 <lED+0x418>
					{
					case('1'):
					{
						LED1_TurnOn();
    240a:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <LED1_TurnOn>
						LCD_Init();
    240e:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    2412:	8b ee       	ldi	r24, 0xEB	; 235
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    241a:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    241e:	c2 c5       	rjmp	.+2948   	; 0x2fa4 <lED+0xf86>
						return;

					}
					case('2'):
					{
						LED1_TurnOff();
    2420:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <LED1_TurnOff>
						LCD_Init();
    2424:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    2428:	8b ee       	ldi	r24, 0xEB	; 235
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2430:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2434:	b7 c5       	rjmp	.+2926   	; 0x2fa4 <lED+0xf86>
						//leds();
						return;
					}
					default : y=-1;
    2436:	fe 01       	movw	r30, r28
    2438:	e4 57       	subi	r30, 0x74	; 116
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	8f ef       	ldi	r24, 0xFF	; 255
    243e:	80 83       	st	Z, r24


		}

		}
		while(y=-1);
    2440:	fe 01       	movw	r30, r28
    2442:	e4 57       	subi	r30, 0x74	; 116
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	80 83       	st	Z, r24
    244a:	06 cf       	rjmp	.-500    	; 0x2258 <lED+0x23a>
	}
	case('2'):
	{
		LCD_Init();
    244c:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		LCD_WriteString("1-ON 2-OFF");
    2450:	80 ee       	ldi	r24, 0xE0	; 224
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
		uint8 y=0;
    2458:	fe 01       	movw	r30, r28
    245a:	e6 57       	subi	r30, 0x76	; 118
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	10 82       	st	Z, r1
		do
		{
			uint8 x = GET_Input();
    2460:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    2464:	fe 01       	movw	r30, r28
    2466:	e7 57       	subi	r30, 0x77	; 119
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 83       	st	Z, r24
    246c:	fe 01       	movw	r30, r28
    246e:	e1 5a       	subi	r30, 0xA1	; 161
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a8 e4       	ldi	r26, 0x48	; 72
    2478:	b3 e4       	ldi	r27, 0x43	; 67
    247a:	80 83       	st	Z, r24
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	a2 83       	std	Z+2, r26	; 0x02
    2480:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2482:	8e 01       	movw	r16, r28
    2484:	05 5a       	subi	r16, 0xA5	; 165
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	e1 5a       	subi	r30, 0xA1	; 161
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	55 e4       	ldi	r21, 0x45	; 69
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	f8 01       	movw	r30, r16
    24a8:	80 83       	st	Z, r24
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	a2 83       	std	Z+2, r26	; 0x02
    24ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b0:	fe 01       	movw	r30, r28
    24b2:	e5 5a       	subi	r30, 0xA5	; 165
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	44 f4       	brge	.+16     	; 0x24de <lED+0x4c0>
		__ticks = 1;
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5a       	subi	r30, 0xA7	; 167
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	64 c0       	rjmp	.+200    	; 0x25a6 <lED+0x588>
	else if (__tmp > 65535)
    24de:	fe 01       	movw	r30, r28
    24e0:	e5 5a       	subi	r30, 0xA5	; 165
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	0c f0       	brlt	.+2      	; 0x24fe <lED+0x4e0>
    24fc:	43 c0       	rjmp	.+134    	; 0x2584 <lED+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	fe 01       	movw	r30, r28
    2500:	e1 5a       	subi	r30, 0xA1	; 161
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8e 01       	movw	r16, r28
    251e:	07 5a       	subi	r16, 0xA7	; 167
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	1f c0       	rjmp	.+62     	; 0x2574 <lED+0x556>
    2536:	fe 01       	movw	r30, r28
    2538:	e9 5a       	subi	r30, 0xA9	; 169
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 e9       	ldi	r24, 0x90	; 144
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	fe 01       	movw	r30, r28
    2546:	e9 5a       	subi	r30, 0xA9	; 169
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <lED+0x530>
    2552:	fe 01       	movw	r30, r28
    2554:	e9 5a       	subi	r30, 0xA9	; 169
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255c:	de 01       	movw	r26, r28
    255e:	a7 5a       	subi	r26, 0xA7	; 167
    2560:	bf 4f       	sbci	r27, 0xFF	; 255
    2562:	fe 01       	movw	r30, r28
    2564:	e7 5a       	subi	r30, 0xA7	; 167
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	11 96       	adiw	r26, 0x01	; 1
    2570:	9c 93       	st	X, r25
    2572:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	fe 01       	movw	r30, r28
    2576:	e7 5a       	subi	r30, 0xA7	; 167
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	d1 f6       	brne	.-76     	; 0x2536 <lED+0x518>
    2582:	28 c0       	rjmp	.+80     	; 0x25d4 <lED+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	8e 01       	movw	r16, r28
    2586:	07 5a       	subi	r16, 0xA7	; 167
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	e5 5a       	subi	r30, 0xA5	; 165
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	f8 01       	movw	r30, r16
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	de 01       	movw	r26, r28
    25a8:	ab 5a       	subi	r26, 0xAB	; 171
    25aa:	bf 4f       	sbci	r27, 0xFF	; 255
    25ac:	fe 01       	movw	r30, r28
    25ae:	e7 5a       	subi	r30, 0xA7	; 167
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	9c 93       	st	X, r25
    25ba:	8e 93       	st	-X, r24
    25bc:	fe 01       	movw	r30, r28
    25be:	eb 5a       	subi	r30, 0xAB	; 171
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <lED+0x5a8>
    25ca:	fe 01       	movw	r30, r28
    25cc:	eb 5a       	subi	r30, 0xAB	; 171
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
					_delay_ms(200);

					switch (x)
    25d4:	fe 01       	movw	r30, r28
    25d6:	e7 57       	subi	r30, 0x77	; 119
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	80 81       	ld	r24, Z
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	c8 56       	subi	r28, 0x68	; 104
    25e2:	df 4f       	sbci	r29, 0xFF	; 255
    25e4:	39 83       	std	Y+1, r19	; 0x01
    25e6:	28 83       	st	Y, r18
    25e8:	c8 59       	subi	r28, 0x98	; 152
    25ea:	d0 40       	sbci	r29, 0x00	; 0
    25ec:	c8 56       	subi	r28, 0x68	; 104
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	88 81       	ld	r24, Y
    25f2:	99 81       	ldd	r25, Y+1	; 0x01
    25f4:	c8 59       	subi	r28, 0x98	; 152
    25f6:	d0 40       	sbci	r29, 0x00	; 0
    25f8:	81 33       	cpi	r24, 0x31	; 49
    25fa:	91 05       	cpc	r25, r1
    25fc:	51 f0       	breq	.+20     	; 0x2612 <lED+0x5f4>
    25fe:	c8 56       	subi	r28, 0x68	; 104
    2600:	df 4f       	sbci	r29, 0xFF	; 255
    2602:	e8 81       	ld	r30, Y
    2604:	f9 81       	ldd	r31, Y+1	; 0x01
    2606:	c8 59       	subi	r28, 0x98	; 152
    2608:	d0 40       	sbci	r29, 0x00	; 0
    260a:	e2 33       	cpi	r30, 0x32	; 50
    260c:	f1 05       	cpc	r31, r1
    260e:	61 f0       	breq	.+24     	; 0x2628 <lED+0x60a>
    2610:	16 c0       	rjmp	.+44     	; 0x263e <lED+0x620>
					{
					case('1'):
					{
						LED2_TurnOn();
    2612:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <LED2_TurnOn>
						LCD_Init();
    2616:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    261a:	8b ee       	ldi	r24, 0xEB	; 235
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2622:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2626:	be c4       	rjmp	.+2428   	; 0x2fa4 <lED+0xf86>
						return;
						break;
					}
					case('2'):
					{
						LED2_TurnOff();
    2628:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <LED2_TurnOff>
						LCD_Init();
    262c:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    2630:	8b ee       	ldi	r24, 0xEB	; 235
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2638:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    263c:	b3 c4       	rjmp	.+2406   	; 0x2fa4 <lED+0xf86>

						return;
						break;
					}
					default : y=-1;
    263e:	fe 01       	movw	r30, r28
    2640:	e6 57       	subi	r30, 0x76	; 118
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	80 83       	st	Z, r24
					}

		}while(y=-1);
    2648:	fe 01       	movw	r30, r28
    264a:	e6 57       	subi	r30, 0x76	; 118
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	8f ef       	ldi	r24, 0xFF	; 255
    2650:	80 83       	st	Z, r24
    2652:	06 cf       	rjmp	.-500    	; 0x2460 <lED+0x442>

	}
	case('3'):
	{
		LCD_Init();
    2654:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		LCD_WriteString("1-ON 2-OFF");
    2658:	80 ee       	ldi	r24, 0xE0	; 224
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
		uint8 y=0;
    2660:	fe 01       	movw	r30, r28
    2662:	e8 57       	subi	r30, 0x78	; 120
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	10 82       	st	Z, r1
		do
		{
			uint8 x = GET_Input();
    2668:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    266c:	fe 01       	movw	r30, r28
    266e:	e9 57       	subi	r30, 0x79	; 121
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 83       	st	Z, r24
    2674:	fe 01       	movw	r30, r28
    2676:	ef 5a       	subi	r30, 0xAF	; 175
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a8 e4       	ldi	r26, 0x48	; 72
    2680:	b3 e4       	ldi	r27, 0x43	; 67
    2682:	80 83       	st	Z, r24
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	a2 83       	std	Z+2, r26	; 0x02
    2688:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	8e 01       	movw	r16, r28
    268c:	03 5b       	subi	r16, 0xB3	; 179
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	fe 01       	movw	r30, r28
    2692:	ef 5a       	subi	r30, 0xAF	; 175
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	55 e4       	ldi	r21, 0x45	; 69
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	f8 01       	movw	r30, r16
    26b0:	80 83       	st	Z, r24
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	a2 83       	std	Z+2, r26	; 0x02
    26b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b8:	fe 01       	movw	r30, r28
    26ba:	e3 5b       	subi	r30, 0xB3	; 179
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	44 f4       	brge	.+16     	; 0x26e6 <lED+0x6c8>
		__ticks = 1;
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 5b       	subi	r30, 0xB5	; 181
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	64 c0       	rjmp	.+200    	; 0x27ae <lED+0x790>
	else if (__tmp > 65535)
    26e6:	fe 01       	movw	r30, r28
    26e8:	e3 5b       	subi	r30, 0xB3	; 179
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	3f ef       	ldi	r19, 0xFF	; 255
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	57 e4       	ldi	r21, 0x47	; 71
    26fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	0c f0       	brlt	.+2      	; 0x2706 <lED+0x6e8>
    2704:	43 c0       	rjmp	.+134    	; 0x278c <lED+0x76e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2706:	fe 01       	movw	r30, r28
    2708:	ef 5a       	subi	r30, 0xAF	; 175
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e2       	ldi	r20, 0x20	; 32
    271a:	51 e4       	ldi	r21, 0x41	; 65
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	8e 01       	movw	r16, r28
    2726:	05 5b       	subi	r16, 0xB5	; 181
    2728:	1f 4f       	sbci	r17, 0xFF	; 255
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	1f c0       	rjmp	.+62     	; 0x277c <lED+0x75e>
    273e:	fe 01       	movw	r30, r28
    2740:	e7 5b       	subi	r30, 0xB7	; 183
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 e9       	ldi	r24, 0x90	; 144
    2746:	91 e0       	ldi	r25, 0x01	; 1
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24
    274c:	fe 01       	movw	r30, r28
    274e:	e7 5b       	subi	r30, 0xB7	; 183
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <lED+0x738>
    275a:	fe 01       	movw	r30, r28
    275c:	e7 5b       	subi	r30, 0xB7	; 183
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	de 01       	movw	r26, r28
    2766:	a5 5b       	subi	r26, 0xB5	; 181
    2768:	bf 4f       	sbci	r27, 0xFF	; 255
    276a:	fe 01       	movw	r30, r28
    276c:	e5 5b       	subi	r30, 0xB5	; 181
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	11 96       	adiw	r26, 0x01	; 1
    2778:	9c 93       	st	X, r25
    277a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277c:	fe 01       	movw	r30, r28
    277e:	e5 5b       	subi	r30, 0xB5	; 181
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	d1 f6       	brne	.-76     	; 0x273e <lED+0x720>
    278a:	2f c0       	rjmp	.+94     	; 0x27ea <lED+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278c:	8e 01       	movw	r16, r28
    278e:	05 5b       	subi	r16, 0xB5	; 181
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	fe 01       	movw	r30, r28
    2794:	e3 5b       	subi	r30, 0xB3	; 179
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	60 81       	ld	r22, Z
    279a:	71 81       	ldd	r23, Z+1	; 0x01
    279c:	82 81       	ldd	r24, Z+2	; 0x02
    279e:	93 81       	ldd	r25, Z+3	; 0x03
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	f8 01       	movw	r30, r16
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	80 83       	st	Z, r24
    27ae:	de 01       	movw	r26, r28
    27b0:	a9 5b       	subi	r26, 0xB9	; 185
    27b2:	bf 4f       	sbci	r27, 0xFF	; 255
    27b4:	fe 01       	movw	r30, r28
    27b6:	e5 5b       	subi	r30, 0xB5	; 181
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	91 81       	ldd	r25, Z+1	; 0x01
    27be:	11 96       	adiw	r26, 0x01	; 1
    27c0:	9c 93       	st	X, r25
    27c2:	8e 93       	st	-X, r24
    27c4:	fe 01       	movw	r30, r28
    27c6:	e9 5b       	subi	r30, 0xB9	; 185
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <lED+0x7b0>
    27d2:	fe 01       	movw	r30, r28
    27d4:	e9 5b       	subi	r30, 0xB9	; 185
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
    27dc:	06 c0       	rjmp	.+12     	; 0x27ea <lED+0x7cc>
			_delay_ms(200);
			while (x == 'm')
			{
				x = KeyPad_GetChar();
    27de:	0e 94 bb 28 	call	0x5176	; 0x5176 <KeyPad_GetChar>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e9 57       	subi	r30, 0x79	; 121
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 83       	st	Z, r24
		uint8 y=0;
		do
		{
			uint8 x = GET_Input();
			_delay_ms(200);
			while (x == 'm')
    27ea:	fe 01       	movw	r30, r28
    27ec:	e9 57       	subi	r30, 0x79	; 121
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	8d 36       	cpi	r24, 0x6D	; 109
    27f4:	a1 f3       	breq	.-24     	; 0x27de <lED+0x7c0>
			{
				x = KeyPad_GetChar();
			}
			switch (x)
    27f6:	fe 01       	movw	r30, r28
    27f8:	e9 57       	subi	r30, 0x79	; 121
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	ca 56       	subi	r28, 0x6A	; 106
    2804:	df 4f       	sbci	r29, 0xFF	; 255
    2806:	39 83       	std	Y+1, r19	; 0x01
    2808:	28 83       	st	Y, r18
    280a:	c6 59       	subi	r28, 0x96	; 150
    280c:	d0 40       	sbci	r29, 0x00	; 0
    280e:	ca 56       	subi	r28, 0x6A	; 106
    2810:	df 4f       	sbci	r29, 0xFF	; 255
    2812:	88 81       	ld	r24, Y
    2814:	99 81       	ldd	r25, Y+1	; 0x01
    2816:	c6 59       	subi	r28, 0x96	; 150
    2818:	d0 40       	sbci	r29, 0x00	; 0
    281a:	81 33       	cpi	r24, 0x31	; 49
    281c:	91 05       	cpc	r25, r1
    281e:	51 f0       	breq	.+20     	; 0x2834 <lED+0x816>
    2820:	ca 56       	subi	r28, 0x6A	; 106
    2822:	df 4f       	sbci	r29, 0xFF	; 255
    2824:	e8 81       	ld	r30, Y
    2826:	f9 81       	ldd	r31, Y+1	; 0x01
    2828:	c6 59       	subi	r28, 0x96	; 150
    282a:	d0 40       	sbci	r29, 0x00	; 0
    282c:	e2 33       	cpi	r30, 0x32	; 50
    282e:	f1 05       	cpc	r31, r1
    2830:	61 f0       	breq	.+24     	; 0x284a <lED+0x82c>
    2832:	16 c0       	rjmp	.+44     	; 0x2860 <lED+0x842>
			{
			case('1'):
			{
				LED3_TurnOn();
    2834:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LED3_TurnOn>
				LCD_Init();
    2838:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
				LCD_WriteString("done");
    283c:	8b ee       	ldi	r24, 0xEB	; 235
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
				LCD_Init();
    2844:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2848:	ad c3       	rjmp	.+1882   	; 0x2fa4 <lED+0xf86>
				return;
				break;
			}
			case('2'):
			{
				LED3_TurnOff();
    284a:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <LED3_TurnOff>
				LCD_Init();
    284e:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
				LCD_WriteString("done");
    2852:	8b ee       	ldi	r24, 0xEB	; 235
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
				LCD_Init();
    285a:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    285e:	a2 c3       	rjmp	.+1860   	; 0x2fa4 <lED+0xf86>
				//leds();
				return;
				break;
			}
			default : y=-1;
    2860:	fe 01       	movw	r30, r28
    2862:	e8 57       	subi	r30, 0x78	; 120
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	8f ef       	ldi	r24, 0xFF	; 255
    2868:	80 83       	st	Z, r24
			}
		}while(y=-1);
    286a:	fe 01       	movw	r30, r28
    286c:	e8 57       	subi	r30, 0x78	; 120
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	8f ef       	ldi	r24, 0xFF	; 255
    2872:	80 83       	st	Z, r24
    2874:	f9 ce       	rjmp	.-526    	; 0x2668 <lED+0x64a>


	}
	case('4'):
	{
		LCD_Init();
    2876:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
		LCD_WriteString("1-room4 2-room5");
    287a:	80 ef       	ldi	r24, 0xF0	; 240
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
		LCD_GoTo(1, 0);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
		LCD_WriteString("3-dimmer lamp");
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	91 e0       	ldi	r25, 0x01	; 1
    288e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
		uint8 u=0;
    2892:	fe 01       	movw	r30, r28
    2894:	ea 57       	subi	r30, 0x7A	; 122
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	10 82       	st	Z, r1
		do
		{
			uint8 x = GET_Input();
    289a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    289e:	fe 01       	movw	r30, r28
    28a0:	eb 57       	subi	r30, 0x7B	; 123
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 83       	st	Z, r24
    28a6:	fe 01       	movw	r30, r28
    28a8:	ed 5b       	subi	r30, 0xBD	; 189
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a8 e4       	ldi	r26, 0x48	; 72
    28b2:	b3 e4       	ldi	r27, 0x43	; 67
    28b4:	80 83       	st	Z, r24
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	a2 83       	std	Z+2, r26	; 0x02
    28ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	8e 01       	movw	r16, r28
    28be:	01 5c       	subi	r16, 0xC1	; 193
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	ed 5b       	subi	r30, 0xBD	; 189
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	4a e7       	ldi	r20, 0x7A	; 122
    28d6:	55 e4       	ldi	r21, 0x45	; 69
    28d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	f8 01       	movw	r30, r16
    28e2:	80 83       	st	Z, r24
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	a2 83       	std	Z+2, r26	; 0x02
    28e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ea:	fe 01       	movw	r30, r28
    28ec:	ff 96       	adiw	r30, 0x3f	; 63
    28ee:	60 81       	ld	r22, Z
    28f0:	71 81       	ldd	r23, Z+1	; 0x01
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <lED+0x8f2>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9e af       	std	Y+62, r25	; 0x3e
    290c:	8d af       	std	Y+61, r24	; 0x3d
    290e:	46 c0       	rjmp	.+140    	; 0x299c <lED+0x97e>
	else if (__tmp > 65535)
    2910:	fe 01       	movw	r30, r28
    2912:	ff 96       	adiw	r30, 0x3f	; 63
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	57 e4       	ldi	r21, 0x47	; 71
    2924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	64 f5       	brge	.+88     	; 0x2984 <lED+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292c:	fe 01       	movw	r30, r28
    292e:	ed 5b       	subi	r30, 0xBD	; 189
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9e af       	std	Y+62, r25	; 0x3e
    2958:	8d af       	std	Y+61, r24	; 0x3d
    295a:	0f c0       	rjmp	.+30     	; 0x297a <lED+0x95c>
    295c:	80 e9       	ldi	r24, 0x90	; 144
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	9c af       	std	Y+60, r25	; 0x3c
    2962:	8b af       	std	Y+59, r24	; 0x3b
    2964:	8b ad       	ldd	r24, Y+59	; 0x3b
    2966:	9c ad       	ldd	r25, Y+60	; 0x3c
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <lED+0x94a>
    296c:	9c af       	std	Y+60, r25	; 0x3c
    296e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	8d ad       	ldd	r24, Y+61	; 0x3d
    2972:	9e ad       	ldd	r25, Y+62	; 0x3e
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9e af       	std	Y+62, r25	; 0x3e
    2978:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	8d ad       	ldd	r24, Y+61	; 0x3d
    297c:	9e ad       	ldd	r25, Y+62	; 0x3e
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	69 f7       	brne	.-38     	; 0x295c <lED+0x93e>
    2982:	16 c0       	rjmp	.+44     	; 0x29b0 <lED+0x992>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	fe 01       	movw	r30, r28
    2986:	ff 96       	adiw	r30, 0x3f	; 63
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9e af       	std	Y+62, r25	; 0x3e
    299a:	8d af       	std	Y+61, r24	; 0x3d
    299c:	8d ad       	ldd	r24, Y+61	; 0x3d
    299e:	9e ad       	ldd	r25, Y+62	; 0x3e
    29a0:	9a af       	std	Y+58, r25	; 0x3a
    29a2:	89 af       	std	Y+57, r24	; 0x39
    29a4:	89 ad       	ldd	r24, Y+57	; 0x39
    29a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <lED+0x98a>
    29ac:	9a af       	std	Y+58, r25	; 0x3a
    29ae:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			switch (x)
    29b0:	fe 01       	movw	r30, r28
    29b2:	eb 57       	subi	r30, 0x7B	; 123
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	cc 56       	subi	r28, 0x6C	; 108
    29be:	df 4f       	sbci	r29, 0xFF	; 255
    29c0:	39 83       	std	Y+1, r19	; 0x01
    29c2:	28 83       	st	Y, r18
    29c4:	c4 59       	subi	r28, 0x94	; 148
    29c6:	d0 40       	sbci	r29, 0x00	; 0
    29c8:	cc 56       	subi	r28, 0x6C	; 108
    29ca:	df 4f       	sbci	r29, 0xFF	; 255
    29cc:	88 81       	ld	r24, Y
    29ce:	99 81       	ldd	r25, Y+1	; 0x01
    29d0:	c4 59       	subi	r28, 0x94	; 148
    29d2:	d0 40       	sbci	r29, 0x00	; 0
    29d4:	82 33       	cpi	r24, 0x32	; 50
    29d6:	91 05       	cpc	r25, r1
    29d8:	09 f4       	brne	.+2      	; 0x29dc <lED+0x9be>
    29da:	d6 c0       	rjmp	.+428    	; 0x2b88 <lED+0xb6a>
    29dc:	cc 56       	subi	r28, 0x6C	; 108
    29de:	df 4f       	sbci	r29, 0xFF	; 255
    29e0:	e8 81       	ld	r30, Y
    29e2:	f9 81       	ldd	r31, Y+1	; 0x01
    29e4:	c4 59       	subi	r28, 0x94	; 148
    29e6:	d0 40       	sbci	r29, 0x00	; 0
    29e8:	e3 33       	cpi	r30, 0x33	; 51
    29ea:	f1 05       	cpc	r31, r1
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <lED+0x9d2>
    29ee:	8e c1       	rjmp	.+796    	; 0x2d0c <lED+0xcee>
    29f0:	cc 56       	subi	r28, 0x6C	; 108
    29f2:	df 4f       	sbci	r29, 0xFF	; 255
    29f4:	28 81       	ld	r18, Y
    29f6:	39 81       	ldd	r19, Y+1	; 0x01
    29f8:	c4 59       	subi	r28, 0x94	; 148
    29fa:	d0 40       	sbci	r29, 0x00	; 0
    29fc:	21 33       	cpi	r18, 0x31	; 49
    29fe:	31 05       	cpc	r19, r1
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <lED+0x9e6>
    2a02:	4e c2       	rjmp	.+1180   	; 0x2ea0 <lED+0xe82>
			{
			case('1'):
			{
				LCD_Init();
    2a04:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
				LCD_WriteString("1-ON 2-OFF");
    2a08:	80 ee       	ldi	r24, 0xE0	; 224
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
				uint8 y=0;
    2a10:	fe 01       	movw	r30, r28
    2a12:	ec 57       	subi	r30, 0x7C	; 124
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	10 82       	st	Z, r1
				do
				{
					uint8 x = GET_Input();
    2a18:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ed 57       	subi	r30, 0x7D	; 125
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 83       	st	Z, r24
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a8 e4       	ldi	r26, 0x48	; 72
    2a2a:	b3 e4       	ldi	r27, 0x43	; 67
    2a2c:	8d ab       	std	Y+53, r24	; 0x35
    2a2e:	9e ab       	std	Y+54, r25	; 0x36
    2a30:	af ab       	std	Y+55, r26	; 0x37
    2a32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	6d a9       	ldd	r22, Y+53	; 0x35
    2a36:	7e a9       	ldd	r23, Y+54	; 0x36
    2a38:	8f a9       	ldd	r24, Y+55	; 0x37
    2a3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a e7       	ldi	r20, 0x7A	; 122
    2a42:	55 e4       	ldi	r21, 0x45	; 69
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	89 ab       	std	Y+49, r24	; 0x31
    2a4e:	9a ab       	std	Y+50, r25	; 0x32
    2a50:	ab ab       	std	Y+51, r26	; 0x33
    2a52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a54:	69 a9       	ldd	r22, Y+49	; 0x31
    2a56:	7a a9       	ldd	r23, Y+50	; 0x32
    2a58:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <lED+0xa58>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	98 ab       	std	Y+48, r25	; 0x30
    2a72:	8f a7       	std	Y+47, r24	; 0x2f
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <lED+0xad6>
	else if (__tmp > 65535)
    2a76:	69 a9       	ldd	r22, Y+49	; 0x31
    2a78:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <lED+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a90:	7e a9       	ldd	r23, Y+54	; 0x36
    2a92:	8f a9       	ldd	r24, Y+55	; 0x37
    2a94:	98 ad       	ldd	r25, Y+56	; 0x38
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	98 ab       	std	Y+48, r25	; 0x30
    2ab4:	8f a7       	std	Y+47, r24	; 0x2f
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <lED+0xab8>
    2ab8:	80 e9       	ldi	r24, 0x90	; 144
    2aba:	91 e0       	ldi	r25, 0x01	; 1
    2abc:	9e a7       	std	Y+46, r25	; 0x2e
    2abe:	8d a7       	std	Y+45, r24	; 0x2d
    2ac0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ac2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <lED+0xaa6>
    2ac8:	9e a7       	std	Y+46, r25	; 0x2e
    2aca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	98 ab       	std	Y+48, r25	; 0x30
    2ad4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad8:	98 a9       	ldd	r25, Y+48	; 0x30
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <lED+0xa9a>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <lED+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	98 ab       	std	Y+48, r25	; 0x30
    2af2:	8f a7       	std	Y+47, r24	; 0x2f
    2af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af6:	98 a9       	ldd	r25, Y+48	; 0x30
    2af8:	9c a7       	std	Y+44, r25	; 0x2c
    2afa:	8b a7       	std	Y+43, r24	; 0x2b
    2afc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2afe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <lED+0xae2>
    2b04:	9c a7       	std	Y+44, r25	; 0x2c
    2b06:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(200);
					switch (x)
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ed 57       	subi	r30, 0x7D	; 125
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	e8 2f       	mov	r30, r24
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	ce 56       	subi	r28, 0x6E	; 110
    2b16:	df 4f       	sbci	r29, 0xFF	; 255
    2b18:	f9 83       	std	Y+1, r31	; 0x01
    2b1a:	e8 83       	st	Y, r30
    2b1c:	c2 59       	subi	r28, 0x92	; 146
    2b1e:	d0 40       	sbci	r29, 0x00	; 0
    2b20:	ce 56       	subi	r28, 0x6E	; 110
    2b22:	df 4f       	sbci	r29, 0xFF	; 255
    2b24:	28 81       	ld	r18, Y
    2b26:	39 81       	ldd	r19, Y+1	; 0x01
    2b28:	c2 59       	subi	r28, 0x92	; 146
    2b2a:	d0 40       	sbci	r29, 0x00	; 0
    2b2c:	21 33       	cpi	r18, 0x31	; 49
    2b2e:	31 05       	cpc	r19, r1
    2b30:	51 f0       	breq	.+20     	; 0x2b46 <lED+0xb28>
    2b32:	ce 56       	subi	r28, 0x6E	; 110
    2b34:	df 4f       	sbci	r29, 0xFF	; 255
    2b36:	88 81       	ld	r24, Y
    2b38:	99 81       	ldd	r25, Y+1	; 0x01
    2b3a:	c2 59       	subi	r28, 0x92	; 146
    2b3c:	d0 40       	sbci	r29, 0x00	; 0
    2b3e:	82 33       	cpi	r24, 0x32	; 50
    2b40:	91 05       	cpc	r25, r1
    2b42:	61 f0       	breq	.+24     	; 0x2b5c <lED+0xb3e>
    2b44:	16 c0       	rjmp	.+44     	; 0x2b72 <lED+0xb54>
					{

					case('1'):
					{
						LED4_TurnOn();
    2b46:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <LED4_TurnOn>
						LCD_Init();
    2b4a:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    2b4e:	8b ee       	ldi	r24, 0xEB	; 235
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2b56:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2b5a:	10 c0       	rjmp	.+32     	; 0x2b7c <lED+0xb5e>
						break;
						return;
					}
					case('2'):
					{
						LED4_TurnOff();
    2b5c:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <LED4_TurnOff>
						LCD_Init();
    2b60:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    2b64:	8b ee       	ldi	r24, 0xEB	; 235
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2b6c:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2b70:	05 c0       	rjmp	.+10     	; 0x2b7c <lED+0xb5e>
						break;
						//leds();
						break; }
					default:y=-1;
    2b72:	fe 01       	movw	r30, r28
    2b74:	ec 57       	subi	r30, 0x7C	; 124
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	8f ef       	ldi	r24, 0xFF	; 255
    2b7a:	80 83       	st	Z, r24
					}
				}while(y=-1);
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ec 57       	subi	r30, 0x7C	; 124
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	8f ef       	ldi	r24, 0xFF	; 255
    2b84:	80 83       	st	Z, r24
    2b86:	48 cf       	rjmp	.-368    	; 0x2a18 <lED+0x9fa>


			}
			case('2'):
			{
				LCD_Init();
    2b88:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
				LCD_WriteString("1-ON 2-OFF");
    2b8c:	80 ee       	ldi	r24, 0xE0	; 224
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
				uint8 y=0;
    2b94:	fe 01       	movw	r30, r28
    2b96:	ee 57       	subi	r30, 0x7E	; 126
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	10 82       	st	Z, r1
				do
				{
					uint8 x =GET_Input();
    2b9c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ef 57       	subi	r30, 0x7F	; 127
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 83       	st	Z, r24
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a8 e4       	ldi	r26, 0x48	; 72
    2bae:	b3 e4       	ldi	r27, 0x43	; 67
    2bb0:	8f a3       	std	Y+39, r24	; 0x27
    2bb2:	98 a7       	std	Y+40, r25	; 0x28
    2bb4:	a9 a7       	std	Y+41, r26	; 0x29
    2bb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bba:	78 a5       	ldd	r23, Y+40	; 0x28
    2bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a e7       	ldi	r20, 0x7A	; 122
    2bc6:	55 e4       	ldi	r21, 0x45	; 69
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	8b a3       	std	Y+35, r24	; 0x23
    2bd2:	9c a3       	std	Y+36, r25	; 0x24
    2bd4:	ad a3       	std	Y+37, r26	; 0x25
    2bd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bda:	7c a1       	ldd	r23, Y+36	; 0x24
    2bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bde:	9e a1       	ldd	r25, Y+38	; 0x26
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <lED+0xbdc>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9a a3       	std	Y+34, r25	; 0x22
    2bf6:	89 a3       	std	Y+33, r24	; 0x21
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <lED+0xc5a>
	else if (__tmp > 65535)
    2bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2c00:	9e a1       	ldd	r25, Y+38	; 0x26
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <lED+0xc46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	6f a1       	ldd	r22, Y+39	; 0x27
    2c14:	78 a5       	ldd	r23, Y+40	; 0x28
    2c16:	89 a5       	ldd	r24, Y+41	; 0x29
    2c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9a a3       	std	Y+34, r25	; 0x22
    2c38:	89 a3       	std	Y+33, r24	; 0x21
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <lED+0xc3c>
    2c3c:	80 e9       	ldi	r24, 0x90	; 144
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	98 a3       	std	Y+32, r25	; 0x20
    2c42:	8f 8f       	std	Y+31, r24	; 0x1f
    2c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c46:	98 a1       	ldd	r25, Y+32	; 0x20
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <lED+0xc2a>
    2c4c:	98 a3       	std	Y+32, r25	; 0x20
    2c4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	89 a1       	ldd	r24, Y+33	; 0x21
    2c52:	9a a1       	ldd	r25, Y+34	; 0x22
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9a a3       	std	Y+34, r25	; 0x22
    2c58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <lED+0xc1e>
    2c62:	14 c0       	rjmp	.+40     	; 0x2c8c <lED+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c64:	6b a1       	ldd	r22, Y+35	; 0x23
    2c66:	7c a1       	ldd	r23, Y+36	; 0x24
    2c68:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9a a3       	std	Y+34, r25	; 0x22
    2c76:	89 a3       	std	Y+33, r24	; 0x21
    2c78:	89 a1       	ldd	r24, Y+33	; 0x21
    2c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <lED+0xc66>
    2c88:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8a:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(200);

					switch (x)
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ef 57       	subi	r30, 0x7F	; 127
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	e8 2f       	mov	r30, r24
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	c0 57       	subi	r28, 0x70	; 112
    2c9a:	df 4f       	sbci	r29, 0xFF	; 255
    2c9c:	f9 83       	std	Y+1, r31	; 0x01
    2c9e:	e8 83       	st	Y, r30
    2ca0:	c0 59       	subi	r28, 0x90	; 144
    2ca2:	d0 40       	sbci	r29, 0x00	; 0
    2ca4:	c0 57       	subi	r28, 0x70	; 112
    2ca6:	df 4f       	sbci	r29, 0xFF	; 255
    2ca8:	28 81       	ld	r18, Y
    2caa:	39 81       	ldd	r19, Y+1	; 0x01
    2cac:	c0 59       	subi	r28, 0x90	; 144
    2cae:	d0 40       	sbci	r29, 0x00	; 0
    2cb0:	21 33       	cpi	r18, 0x31	; 49
    2cb2:	31 05       	cpc	r19, r1
    2cb4:	51 f0       	breq	.+20     	; 0x2cca <lED+0xcac>
    2cb6:	c0 57       	subi	r28, 0x70	; 112
    2cb8:	df 4f       	sbci	r29, 0xFF	; 255
    2cba:	88 81       	ld	r24, Y
    2cbc:	99 81       	ldd	r25, Y+1	; 0x01
    2cbe:	c0 59       	subi	r28, 0x90	; 144
    2cc0:	d0 40       	sbci	r29, 0x00	; 0
    2cc2:	82 33       	cpi	r24, 0x32	; 50
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	61 f0       	breq	.+24     	; 0x2ce0 <lED+0xcc2>
    2cc8:	16 c0       	rjmp	.+44     	; 0x2cf6 <lED+0xcd8>
					{
					case('1'):
					{
						LED5_TurnOn();
    2cca:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <LED5_TurnOn>
						LCD_Init();
    2cce:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    2cd2:	8b ee       	ldi	r24, 0xEB	; 235
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2cda:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2cde:	62 c1       	rjmp	.+708    	; 0x2fa4 <lED+0xf86>
						//leds();
						return;
					}
					case('2'):
					{
						LED5_TurnOff();
    2ce0:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <LED5_TurnOff>
						LCD_Init();
    2ce4:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done");
    2ce8:	8b ee       	ldi	r24, 0xEB	; 235
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2cf0:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2cf4:	57 c1       	rjmp	.+686    	; 0x2fa4 <lED+0xf86>
						//leds();
						return;
						break;
					}
					default:y=-1;
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	ee 57       	subi	r30, 0x7E	; 126
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	80 83       	st	Z, r24
					}
				}while(y=-1);
    2d00:	fe 01       	movw	r30, r28
    2d02:	ee 57       	subi	r30, 0x7E	; 126
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	8f ef       	ldi	r24, 0xFF	; 255
    2d08:	80 83       	st	Z, r24
    2d0a:	48 cf       	rjmp	.-368    	; 0x2b9c <lED+0xb7e>


			}
			case('3'):{

				LCD_Init();
    2d0c:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
				LCD_WriteString("1-50% 2-100%");
    2d10:	8e e0       	ldi	r24, 0x0E	; 14
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
				uint8 y=0;
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e0 58       	subi	r30, 0x80	; 128
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	10 82       	st	Z, r1
				do
				{
					uint8 x = GET_Input();
    2d20:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    2d24:	fe 01       	movw	r30, r28
    2d26:	e1 58       	subi	r30, 0x81	; 129
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 83       	st	Z, r24
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a8 e4       	ldi	r26, 0x48	; 72
    2d32:	b3 e4       	ldi	r27, 0x43	; 67
    2d34:	89 8f       	std	Y+25, r24	; 0x19
    2d36:	9a 8f       	std	Y+26, r25	; 0x1a
    2d38:	ab 8f       	std	Y+27, r26	; 0x1b
    2d3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a e7       	ldi	r20, 0x7A	; 122
    2d4a:	55 e4       	ldi	r21, 0x45	; 69
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8d 8b       	std	Y+21, r24	; 0x15
    2d56:	9e 8b       	std	Y+22, r25	; 0x16
    2d58:	af 8b       	std	Y+23, r26	; 0x17
    2d5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d60:	8f 89       	ldd	r24, Y+23	; 0x17
    2d62:	98 8d       	ldd	r25, Y+24	; 0x18
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e8       	ldi	r20, 0x80	; 128
    2d6a:	5f e3       	ldi	r21, 0x3F	; 63
    2d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d70:	88 23       	and	r24, r24
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <lED+0xd60>
		__ticks = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
    2d7c:	3f c0       	rjmp	.+126    	; 0x2dfc <lED+0xdde>
	else if (__tmp > 65535)
    2d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d80:	7e 89       	ldd	r23, Y+22	; 0x16
    2d82:	8f 89       	ldd	r24, Y+23	; 0x17
    2d84:	98 8d       	ldd	r25, Y+24	; 0x18
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	3f ef       	ldi	r19, 0xFF	; 255
    2d8a:	4f e7       	ldi	r20, 0x7F	; 127
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	4c f5       	brge	.+82     	; 0x2de8 <lED+0xdca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d96:	69 8d       	ldd	r22, Y+25	; 0x19
    2d98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9c 8b       	std	Y+20, r25	; 0x14
    2dbc:	8b 8b       	std	Y+19, r24	; 0x13
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <lED+0xdc0>
    2dc0:	80 e9       	ldi	r24, 0x90	; 144
    2dc2:	91 e0       	ldi	r25, 0x01	; 1
    2dc4:	9a 8b       	std	Y+18, r25	; 0x12
    2dc6:	89 8b       	std	Y+17, r24	; 0x11
    2dc8:	89 89       	ldd	r24, Y+17	; 0x11
    2dca:	9a 89       	ldd	r25, Y+18	; 0x12
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <lED+0xdae>
    2dd0:	9a 8b       	std	Y+18, r25	; 0x12
    2dd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9c 8b       	std	Y+20, r25	; 0x14
    2ddc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dde:	8b 89       	ldd	r24, Y+19	; 0x13
    2de0:	9c 89       	ldd	r25, Y+20	; 0x14
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	69 f7       	brne	.-38     	; 0x2dc0 <lED+0xda2>
    2de6:	14 c0       	rjmp	.+40     	; 0x2e10 <lED+0xdf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dea:	7e 89       	ldd	r23, Y+22	; 0x16
    2dec:	8f 89       	ldd	r24, Y+23	; 0x17
    2dee:	98 8d       	ldd	r25, Y+24	; 0x18
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9c 8b       	std	Y+20, r25	; 0x14
    2dfa:	8b 8b       	std	Y+19, r24	; 0x13
    2dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2e00:	98 8b       	std	Y+16, r25	; 0x10
    2e02:	8f 87       	std	Y+15, r24	; 0x0f
    2e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e06:	98 89       	ldd	r25, Y+16	; 0x10
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <lED+0xdea>
    2e0c:	98 8b       	std	Y+16, r25	; 0x10
    2e0e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(200);

					switch (x)
    2e10:	fe 01       	movw	r30, r28
    2e12:	e1 58       	subi	r30, 0x81	; 129
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 81       	ld	r24, Z
    2e18:	e8 2f       	mov	r30, r24
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	c2 57       	subi	r28, 0x72	; 114
    2e1e:	df 4f       	sbci	r29, 0xFF	; 255
    2e20:	f9 83       	std	Y+1, r31	; 0x01
    2e22:	e8 83       	st	Y, r30
    2e24:	ce 58       	subi	r28, 0x8E	; 142
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	c2 57       	subi	r28, 0x72	; 114
    2e2a:	df 4f       	sbci	r29, 0xFF	; 255
    2e2c:	28 81       	ld	r18, Y
    2e2e:	39 81       	ldd	r19, Y+1	; 0x01
    2e30:	ce 58       	subi	r28, 0x8E	; 142
    2e32:	d0 40       	sbci	r29, 0x00	; 0
    2e34:	21 33       	cpi	r18, 0x31	; 49
    2e36:	31 05       	cpc	r19, r1
    2e38:	51 f0       	breq	.+20     	; 0x2e4e <lED+0xe30>
    2e3a:	c2 57       	subi	r28, 0x72	; 114
    2e3c:	df 4f       	sbci	r29, 0xFF	; 255
    2e3e:	88 81       	ld	r24, Y
    2e40:	99 81       	ldd	r25, Y+1	; 0x01
    2e42:	ce 58       	subi	r28, 0x8E	; 142
    2e44:	d0 40       	sbci	r29, 0x00	; 0
    2e46:	82 33       	cpi	r24, 0x32	; 50
    2e48:	91 05       	cpc	r25, r1
    2e4a:	81 f0       	breq	.+32     	; 0x2e6c <lED+0xe4e>
    2e4c:	1e c0       	rjmp	.+60     	; 0x2e8a <lED+0xe6c>
					{

					case('1'):
					{
						PWM2_init();
    2e4e:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <PWM2_init>
						PWM2_Set_OCR(1);
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <PWM2_Set_OCR>
						LCD_Init();
    2e5a:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done 50%");
    2e5e:	8b e1       	ldi	r24, 0x1B	; 27
    2e60:	91 e0       	ldi	r25, 0x01	; 1
    2e62:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2e66:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2e6a:	14 c0       	rjmp	.+40     	; 0x2e94 <lED+0xe76>
						break;
					}
					case('2'):
					{
						PWM2_init();
    2e6c:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <PWM2_init>
						PWM2_Set_OCR(255);
    2e70:	8f ef       	ldi	r24, 0xFF	; 255
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <PWM2_Set_OCR>
						LCD_Init();
    2e78:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
						LCD_WriteString("done 100%");
    2e7c:	84 e2       	ldi	r24, 0x24	; 36
    2e7e:	91 e0       	ldi	r25, 0x01	; 1
    2e80:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
						LCD_Init();
    2e84:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    2e88:	05 c0       	rjmp	.+10     	; 0x2e94 <lED+0xe76>
						break;
						break; }
					default:y=-1;
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e0 58       	subi	r30, 0x80	; 128
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	8f ef       	ldi	r24, 0xFF	; 255
    2e92:	80 83       	st	Z, r24

					}
				}while(y=-1);
    2e94:	fe 01       	movw	r30, r28
    2e96:	e0 58       	subi	r30, 0x80	; 128
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	80 83       	st	Z, r24
    2e9e:	40 cf       	rjmp	.-384    	; 0x2d20 <lED+0xd02>

			}


			}
		}while(u=-1);
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ea 57       	subi	r30, 0x7A	; 122
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	8f ef       	ldi	r24, 0xFF	; 255
    2ea8:	80 83       	st	Z, r24
    2eaa:	f7 cc       	rjmp	.-1554   	; 0x289a <lED+0x87c>



	}
	default:{
									LCD_Init();
    2eac:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
									LCD_WriteString("wrong input");
    2eb0:	8e e2       	ldi	r24, 0x2E	; 46
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a8 ec       	ldi	r26, 0xC8	; 200
    2ebe:	b2 e4       	ldi	r27, 0x42	; 66
    2ec0:	8b 87       	std	Y+11, r24	; 0x0b
    2ec2:	9c 87       	std	Y+12, r25	; 0x0c
    2ec4:	ad 87       	std	Y+13, r26	; 0x0d
    2ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	4a e7       	ldi	r20, 0x7A	; 122
    2ed6:	55 e4       	ldi	r21, 0x45	; 69
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	8f 83       	std	Y+7, r24	; 0x07
    2ee2:	98 87       	std	Y+8, r25	; 0x08
    2ee4:	a9 87       	std	Y+9, r26	; 0x09
    2ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eea:	78 85       	ldd	r23, Y+8	; 0x08
    2eec:	89 85       	ldd	r24, Y+9	; 0x09
    2eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e8       	ldi	r20, 0x80	; 128
    2ef6:	5f e3       	ldi	r21, 0x3F	; 63
    2ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efc:	88 23       	and	r24, r24
    2efe:	2c f4       	brge	.+10     	; 0x2f0a <lED+0xeec>
		__ticks = 1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	3f c0       	rjmp	.+126    	; 0x2f88 <lED+0xf6a>
	else if (__tmp > 65535)
    2f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0c:	78 85       	ldd	r23, Y+8	; 0x08
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	3f ef       	ldi	r19, 0xFF	; 255
    2f16:	4f e7       	ldi	r20, 0x7F	; 127
    2f18:	57 e4       	ldi	r21, 0x47	; 71
    2f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f1e:	18 16       	cp	r1, r24
    2f20:	4c f5       	brge	.+82     	; 0x2f74 <lED+0xf56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	0f c0       	rjmp	.+30     	; 0x2f6a <lED+0xf4c>
    2f4c:	80 e9       	ldi	r24, 0x90	; 144
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	9c 83       	std	Y+4, r25	; 0x04
    2f52:	8b 83       	std	Y+3, r24	; 0x03
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <lED+0xf3a>
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	69 f7       	brne	.-38     	; 0x2f4c <lED+0xf2e>
    2f72:	14 c0       	rjmp	.+40     	; 0x2f9c <lED+0xf7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	6f 81       	ldd	r22, Y+7	; 0x07
    2f76:	78 85       	ldd	r23, Y+8	; 0x08
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	9e 83       	std	Y+6, r25	; 0x06
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8c:	9a 83       	std	Y+2, r25	; 0x02
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	9a 81       	ldd	r25, Y+2	; 0x02
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <lED+0xf76>
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	89 83       	std	Y+1, r24	; 0x01
									_delay_ms(100);
									LCD_Init();
    2f9c:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
									lED();
    2fa0:	0e 94 0f 10 	call	0x201e	; 0x201e <lED>
								}
	}
}
    2fa4:	c3 56       	subi	r28, 0x63	; 99
    2fa6:	df 4f       	sbci	r29, 0xFF	; 255
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	08 95       	ret

00002fbc <DOOR>:

void DOOR()
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	6f 97       	sbiw	r28, 0x1f	; 31
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    2fd0:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	LCD_WriteString("1-open 2-close");
    2fd4:	8a e3       	ldi	r24, 0x3A	; 58
    2fd6:	91 e0       	ldi	r25, 0x01	; 1
    2fd8:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	uint8 x=GET_Input();
    2fdc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    2fe0:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	a8 e4       	ldi	r26, 0x48	; 72
    2fe8:	b3 e4       	ldi	r27, 0x43	; 67
    2fea:	89 8f       	std	Y+25, r24	; 0x19
    2fec:	9a 8f       	std	Y+26, r25	; 0x1a
    2fee:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a e7       	ldi	r20, 0x7A	; 122
    3000:	55 e4       	ldi	r21, 0x45	; 69
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8d 8b       	std	Y+21, r24	; 0x15
    300c:	9e 8b       	std	Y+22, r25	; 0x16
    300e:	af 8b       	std	Y+23, r26	; 0x17
    3010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3012:	6d 89       	ldd	r22, Y+21	; 0x15
    3014:	7e 89       	ldd	r23, Y+22	; 0x16
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	2c f4       	brge	.+10     	; 0x3034 <DOOR+0x78>
		__ticks = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	3f c0       	rjmp	.+126    	; 0x30b2 <DOOR+0xf6>
	else if (__tmp > 65535)
    3034:	6d 89       	ldd	r22, Y+21	; 0x15
    3036:	7e 89       	ldd	r23, Y+22	; 0x16
    3038:	8f 89       	ldd	r24, Y+23	; 0x17
    303a:	98 8d       	ldd	r25, Y+24	; 0x18
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	3f ef       	ldi	r19, 0xFF	; 255
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	57 e4       	ldi	r21, 0x47	; 71
    3044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	4c f5       	brge	.+82     	; 0x309e <DOOR+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	69 8d       	ldd	r22, Y+25	; 0x19
    304e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	51 e4       	ldi	r21, 0x41	; 65
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <DOOR+0xd8>
    3076:	80 e9       	ldi	r24, 0x90	; 144
    3078:	91 e0       	ldi	r25, 0x01	; 1
    307a:	9a 8b       	std	Y+18, r25	; 0x12
    307c:	89 8b       	std	Y+17, r24	; 0x11
    307e:	89 89       	ldd	r24, Y+17	; 0x11
    3080:	9a 89       	ldd	r25, Y+18	; 0x12
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <DOOR+0xc6>
    3086:	9a 8b       	std	Y+18, r25	; 0x12
    3088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	8b 89       	ldd	r24, Y+19	; 0x13
    308c:	9c 89       	ldd	r25, Y+20	; 0x14
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3094:	8b 89       	ldd	r24, Y+19	; 0x13
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	69 f7       	brne	.-38     	; 0x3076 <DOOR+0xba>
    309c:	14 c0       	rjmp	.+40     	; 0x30c6 <DOOR+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9c 8b       	std	Y+20, r25	; 0x14
    30b0:	8b 8b       	std	Y+19, r24	; 0x13
    30b2:	8b 89       	ldd	r24, Y+19	; 0x13
    30b4:	9c 89       	ldd	r25, Y+20	; 0x14
    30b6:	98 8b       	std	Y+16, r25	; 0x10
    30b8:	8f 87       	std	Y+15, r24	; 0x0f
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <DOOR+0x102>
    30c2:	98 8b       	std	Y+16, r25	; 0x10
    30c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);

	switch(x)
    30c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	3f 8f       	std	Y+31, r19	; 0x1f
    30ce:	2e 8f       	std	Y+30, r18	; 0x1e
    30d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30d4:	81 33       	cpi	r24, 0x31	; 49
    30d6:	91 05       	cpc	r25, r1
    30d8:	31 f0       	breq	.+12     	; 0x30e6 <DOOR+0x12a>
    30da:	2e 8d       	ldd	r18, Y+30	; 0x1e
    30dc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    30de:	22 33       	cpi	r18, 0x32	; 50
    30e0:	31 05       	cpc	r19, r1
    30e2:	31 f0       	breq	.+12     	; 0x30f0 <DOOR+0x134>
    30e4:	0a c0       	rjmp	.+20     	; 0x30fa <DOOR+0x13e>
	{
	case('1'):ServoMotor_Set_Degree(2);break;
    30e6:	82 e0       	ldi	r24, 0x02	; 2
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <ServoMotor_Set_Degree>
    30ee:	81 c0       	rjmp	.+258    	; 0x31f2 <DOOR+0x236>
	case('2'):ServoMotor_Set_Degree(0);break;
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <ServoMotor_Set_Degree>
    30f8:	7c c0       	rjmp	.+248    	; 0x31f2 <DOOR+0x236>
	default:{
									LCD_Init();
    30fa:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
									LCD_WriteString("wrong input");
    30fe:	8e e2       	ldi	r24, 0x2E	; 46
    3100:	91 e0       	ldi	r25, 0x01	; 1
    3102:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	a8 ec       	ldi	r26, 0xC8	; 200
    310c:	b2 e4       	ldi	r27, 0x42	; 66
    310e:	8b 87       	std	Y+11, r24	; 0x0b
    3110:	9c 87       	std	Y+12, r25	; 0x0c
    3112:	ad 87       	std	Y+13, r26	; 0x0d
    3114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3116:	6b 85       	ldd	r22, Y+11	; 0x0b
    3118:	7c 85       	ldd	r23, Y+12	; 0x0c
    311a:	8d 85       	ldd	r24, Y+13	; 0x0d
    311c:	9e 85       	ldd	r25, Y+14	; 0x0e
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a e7       	ldi	r20, 0x7A	; 122
    3124:	55 e4       	ldi	r21, 0x45	; 69
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	8f 83       	std	Y+7, r24	; 0x07
    3130:	98 87       	std	Y+8, r25	; 0x08
    3132:	a9 87       	std	Y+9, r26	; 0x09
    3134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3136:	6f 81       	ldd	r22, Y+7	; 0x07
    3138:	78 85       	ldd	r23, Y+8	; 0x08
    313a:	89 85       	ldd	r24, Y+9	; 0x09
    313c:	9a 85       	ldd	r25, Y+10	; 0x0a
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e8       	ldi	r20, 0x80	; 128
    3144:	5f e3       	ldi	r21, 0x3F	; 63
    3146:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314a:	88 23       	and	r24, r24
    314c:	2c f4       	brge	.+10     	; 0x3158 <DOOR+0x19c>
		__ticks = 1;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	9e 83       	std	Y+6, r25	; 0x06
    3154:	8d 83       	std	Y+5, r24	; 0x05
    3156:	3f c0       	rjmp	.+126    	; 0x31d6 <DOOR+0x21a>
	else if (__tmp > 65535)
    3158:	6f 81       	ldd	r22, Y+7	; 0x07
    315a:	78 85       	ldd	r23, Y+8	; 0x08
    315c:	89 85       	ldd	r24, Y+9	; 0x09
    315e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	4f e7       	ldi	r20, 0x7F	; 127
    3166:	57 e4       	ldi	r21, 0x47	; 71
    3168:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    316c:	18 16       	cp	r1, r24
    316e:	4c f5       	brge	.+82     	; 0x31c2 <DOOR+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3170:	6b 85       	ldd	r22, Y+11	; 0x0b
    3172:	7c 85       	ldd	r23, Y+12	; 0x0c
    3174:	8d 85       	ldd	r24, Y+13	; 0x0d
    3176:	9e 85       	ldd	r25, Y+14	; 0x0e
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e2       	ldi	r20, 0x20	; 32
    317e:	51 e4       	ldi	r21, 0x41	; 65
    3180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9e 83       	std	Y+6, r25	; 0x06
    3196:	8d 83       	std	Y+5, r24	; 0x05
    3198:	0f c0       	rjmp	.+30     	; 0x31b8 <DOOR+0x1fc>
    319a:	80 e9       	ldi	r24, 0x90	; 144
    319c:	91 e0       	ldi	r25, 0x01	; 1
    319e:	9c 83       	std	Y+4, r25	; 0x04
    31a0:	8b 83       	std	Y+3, r24	; 0x03
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	9c 81       	ldd	r25, Y+4	; 0x04
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <DOOR+0x1ea>
    31aa:	9c 83       	std	Y+4, r25	; 0x04
    31ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ae:	8d 81       	ldd	r24, Y+5	; 0x05
    31b0:	9e 81       	ldd	r25, Y+6	; 0x06
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	9e 81       	ldd	r25, Y+6	; 0x06
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	69 f7       	brne	.-38     	; 0x319a <DOOR+0x1de>
    31c0:	14 c0       	rjmp	.+40     	; 0x31ea <DOOR+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c2:	6f 81       	ldd	r22, Y+7	; 0x07
    31c4:	78 85       	ldd	r23, Y+8	; 0x08
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	9a 83       	std	Y+2, r25	; 0x02
    31dc:	89 83       	std	Y+1, r24	; 0x01
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	9a 81       	ldd	r25, Y+2	; 0x02
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <DOOR+0x226>
    31e6:	9a 83       	std	Y+2, r25	; 0x02
    31e8:	89 83       	std	Y+1, r24	; 0x01
									_delay_ms(100);
									LCD_Init();
    31ea:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
									DOOR();
    31ee:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <DOOR>
								}
	}

}
    31f2:	6f 96       	adiw	r28, 0x1f	; 31
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	de bf       	out	0x3e, r29	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <TEMP>:

void TEMP()
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	6f 97       	sbiw	r28, 0x1f	; 31
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
	uint16 x= TEMP_Read();
    3218:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <TEMP_Read>
    321c:	9f 8f       	std	Y+31, r25	; 0x1f
    321e:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_Init();
    3220:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	LCD_WriteString("temperature= ");
    3224:	89 e4       	ldi	r24, 0x49	; 73
    3226:	91 e0       	ldi	r25, 0x01	; 1
    3228:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	LCD_WriteInteger(x);
    322c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    322e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3230:	cc 01       	movw	r24, r24
    3232:	a0 e0       	ldi	r26, 0x00	; 0
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <LCD_WriteInteger>
	LCD_GoTo(1, 0);
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
	LCD_WriteString("1-back");
    3246:	87 e5       	ldi	r24, 0x57	; 87
    3248:	91 e0       	ldi	r25, 0x01	; 1
    324a:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	uint8 y=GET_Input();
    324e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    3252:	8d 8f       	std	Y+29, r24	; 0x1d
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	a8 e4       	ldi	r26, 0x48	; 72
    325a:	b3 e4       	ldi	r27, 0x43	; 67
    325c:	89 8f       	std	Y+25, r24	; 0x19
    325e:	9a 8f       	std	Y+26, r25	; 0x1a
    3260:	ab 8f       	std	Y+27, r26	; 0x1b
    3262:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3264:	69 8d       	ldd	r22, Y+25	; 0x19
    3266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    326a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	4a e7       	ldi	r20, 0x7A	; 122
    3272:	55 e4       	ldi	r21, 0x45	; 69
    3274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	8d 8b       	std	Y+21, r24	; 0x15
    327e:	9e 8b       	std	Y+22, r25	; 0x16
    3280:	af 8b       	std	Y+23, r26	; 0x17
    3282:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3284:	6d 89       	ldd	r22, Y+21	; 0x15
    3286:	7e 89       	ldd	r23, Y+22	; 0x16
    3288:	8f 89       	ldd	r24, Y+23	; 0x17
    328a:	98 8d       	ldd	r25, Y+24	; 0x18
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e8       	ldi	r20, 0x80	; 128
    3292:	5f e3       	ldi	r21, 0x3F	; 63
    3294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3298:	88 23       	and	r24, r24
    329a:	2c f4       	brge	.+10     	; 0x32a6 <TEMP+0xa2>
		__ticks = 1;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9c 8b       	std	Y+20, r25	; 0x14
    32a2:	8b 8b       	std	Y+19, r24	; 0x13
    32a4:	3f c0       	rjmp	.+126    	; 0x3324 <TEMP+0x120>
	else if (__tmp > 65535)
    32a6:	6d 89       	ldd	r22, Y+21	; 0x15
    32a8:	7e 89       	ldd	r23, Y+22	; 0x16
    32aa:	8f 89       	ldd	r24, Y+23	; 0x17
    32ac:	98 8d       	ldd	r25, Y+24	; 0x18
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	3f ef       	ldi	r19, 0xFF	; 255
    32b2:	4f e7       	ldi	r20, 0x7F	; 127
    32b4:	57 e4       	ldi	r21, 0x47	; 71
    32b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ba:	18 16       	cp	r1, r24
    32bc:	4c f5       	brge	.+82     	; 0x3310 <TEMP+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32be:	69 8d       	ldd	r22, Y+25	; 0x19
    32c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e2       	ldi	r20, 0x20	; 32
    32cc:	51 e4       	ldi	r21, 0x41	; 65
    32ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9c 8b       	std	Y+20, r25	; 0x14
    32e4:	8b 8b       	std	Y+19, r24	; 0x13
    32e6:	0f c0       	rjmp	.+30     	; 0x3306 <TEMP+0x102>
    32e8:	80 e9       	ldi	r24, 0x90	; 144
    32ea:	91 e0       	ldi	r25, 0x01	; 1
    32ec:	9a 8b       	std	Y+18, r25	; 0x12
    32ee:	89 8b       	std	Y+17, r24	; 0x11
    32f0:	89 89       	ldd	r24, Y+17	; 0x11
    32f2:	9a 89       	ldd	r25, Y+18	; 0x12
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	f1 f7       	brne	.-4      	; 0x32f4 <TEMP+0xf0>
    32f8:	9a 8b       	std	Y+18, r25	; 0x12
    32fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fc:	8b 89       	ldd	r24, Y+19	; 0x13
    32fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3306:	8b 89       	ldd	r24, Y+19	; 0x13
    3308:	9c 89       	ldd	r25, Y+20	; 0x14
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	69 f7       	brne	.-38     	; 0x32e8 <TEMP+0xe4>
    330e:	14 c0       	rjmp	.+40     	; 0x3338 <TEMP+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3310:	6d 89       	ldd	r22, Y+21	; 0x15
    3312:	7e 89       	ldd	r23, Y+22	; 0x16
    3314:	8f 89       	ldd	r24, Y+23	; 0x17
    3316:	98 8d       	ldd	r25, Y+24	; 0x18
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9c 8b       	std	Y+20, r25	; 0x14
    3322:	8b 8b       	std	Y+19, r24	; 0x13
    3324:	8b 89       	ldd	r24, Y+19	; 0x13
    3326:	9c 89       	ldd	r25, Y+20	; 0x14
    3328:	98 8b       	std	Y+16, r25	; 0x10
    332a:	8f 87       	std	Y+15, r24	; 0x0f
    332c:	8f 85       	ldd	r24, Y+15	; 0x0f
    332e:	98 89       	ldd	r25, Y+16	; 0x10
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	f1 f7       	brne	.-4      	; 0x3330 <TEMP+0x12c>
    3334:	98 8b       	std	Y+16, r25	; 0x10
    3336:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	switch(y){
    3338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    333a:	88 2f       	mov	r24, r24
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	81 33       	cpi	r24, 0x31	; 49
    3340:	91 05       	cpc	r25, r1
    3342:	09 f4       	brne	.+2      	; 0x3346 <TEMP+0x142>
    3344:	7c c0       	rjmp	.+248    	; 0x343e <TEMP+0x23a>
			case('1'):{return;}
			default:{
					LCD_Init();
    3346:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
					LCD_WriteString("wrong input");
    334a:	8e e2       	ldi	r24, 0x2E	; 46
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	a8 ec       	ldi	r26, 0xC8	; 200
    3358:	b2 e4       	ldi	r27, 0x42	; 66
    335a:	8b 87       	std	Y+11, r24	; 0x0b
    335c:	9c 87       	std	Y+12, r25	; 0x0c
    335e:	ad 87       	std	Y+13, r26	; 0x0d
    3360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3362:	6b 85       	ldd	r22, Y+11	; 0x0b
    3364:	7c 85       	ldd	r23, Y+12	; 0x0c
    3366:	8d 85       	ldd	r24, Y+13	; 0x0d
    3368:	9e 85       	ldd	r25, Y+14	; 0x0e
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	4a e7       	ldi	r20, 0x7A	; 122
    3370:	55 e4       	ldi	r21, 0x45	; 69
    3372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	8f 83       	std	Y+7, r24	; 0x07
    337c:	98 87       	std	Y+8, r25	; 0x08
    337e:	a9 87       	std	Y+9, r26	; 0x09
    3380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3382:	6f 81       	ldd	r22, Y+7	; 0x07
    3384:	78 85       	ldd	r23, Y+8	; 0x08
    3386:	89 85       	ldd	r24, Y+9	; 0x09
    3388:	9a 85       	ldd	r25, Y+10	; 0x0a
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e8       	ldi	r20, 0x80	; 128
    3390:	5f e3       	ldi	r21, 0x3F	; 63
    3392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3396:	88 23       	and	r24, r24
    3398:	2c f4       	brge	.+10     	; 0x33a4 <TEMP+0x1a0>
		__ticks = 1;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	9e 83       	std	Y+6, r25	; 0x06
    33a0:	8d 83       	std	Y+5, r24	; 0x05
    33a2:	3f c0       	rjmp	.+126    	; 0x3422 <TEMP+0x21e>
	else if (__tmp > 65535)
    33a4:	6f 81       	ldd	r22, Y+7	; 0x07
    33a6:	78 85       	ldd	r23, Y+8	; 0x08
    33a8:	89 85       	ldd	r24, Y+9	; 0x09
    33aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	3f ef       	ldi	r19, 0xFF	; 255
    33b0:	4f e7       	ldi	r20, 0x7F	; 127
    33b2:	57 e4       	ldi	r21, 0x47	; 71
    33b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b8:	18 16       	cp	r1, r24
    33ba:	4c f5       	brge	.+82     	; 0x340e <TEMP+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33be:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	40 e2       	ldi	r20, 0x20	; 32
    33ca:	51 e4       	ldi	r21, 0x41	; 65
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	9e 83       	std	Y+6, r25	; 0x06
    33e2:	8d 83       	std	Y+5, r24	; 0x05
    33e4:	0f c0       	rjmp	.+30     	; 0x3404 <TEMP+0x200>
    33e6:	80 e9       	ldi	r24, 0x90	; 144
    33e8:	91 e0       	ldi	r25, 0x01	; 1
    33ea:	9c 83       	std	Y+4, r25	; 0x04
    33ec:	8b 83       	std	Y+3, r24	; 0x03
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	9c 81       	ldd	r25, Y+4	; 0x04
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <TEMP+0x1ee>
    33f6:	9c 83       	std	Y+4, r25	; 0x04
    33f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fa:	8d 81       	ldd	r24, Y+5	; 0x05
    33fc:	9e 81       	ldd	r25, Y+6	; 0x06
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	9e 81       	ldd	r25, Y+6	; 0x06
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	69 f7       	brne	.-38     	; 0x33e6 <TEMP+0x1e2>
    340c:	14 c0       	rjmp	.+40     	; 0x3436 <TEMP+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340e:	6f 81       	ldd	r22, Y+7	; 0x07
    3410:	78 85       	ldd	r23, Y+8	; 0x08
    3412:	89 85       	ldd	r24, Y+9	; 0x09
    3414:	9a 85       	ldd	r25, Y+10	; 0x0a
    3416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	9e 83       	std	Y+6, r25	; 0x06
    3420:	8d 83       	std	Y+5, r24	; 0x05
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	9e 81       	ldd	r25, Y+6	; 0x06
    3426:	9a 83       	std	Y+2, r25	; 0x02
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	9a 81       	ldd	r25, Y+2	; 0x02
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <TEMP+0x22a>
    3432:	9a 83       	std	Y+2, r25	; 0x02
    3434:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(100);
					LCD_Init();
    3436:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
					TEMP();
    343a:	0e 94 02 19 	call	0x3204	; 0x3204 <TEMP>
										}
	}

}
    343e:	6f 96       	adiw	r28, 0x1f	; 31
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <ADD_AND_REMOVE>:

void ADD_AND_REMOVE()
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	a6 97       	sbiw	r28, 0x26	; 38
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    3464:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
				LCD_WriteString("5-add  6-remove");
    3468:	8e e5       	ldi	r24, 0x5E	; 94
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
				LCD_GoTo(1, 0);
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
				LCD_WriteString("7-restore 8-out");
    3478:	8e e6       	ldi	r24, 0x6E	; 110
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>

				uint8 x=KeyPad_GetChar();
    3480:	0e 94 bb 28 	call	0x5176	; 0x5176 <KeyPad_GetChar>
    3484:	88 a3       	std	Y+32, r24	; 0x20
    3486:	03 c0       	rjmp	.+6      	; 0x348e <ADD_AND_REMOVE+0x3e>
				while(x=='m')
				{
					x=KeyPad_GetChar();
    3488:	0e 94 bb 28 	call	0x5176	; 0x5176 <KeyPad_GetChar>
    348c:	88 a3       	std	Y+32, r24	; 0x20
				LCD_WriteString("5-add  6-remove");
				LCD_GoTo(1, 0);
				LCD_WriteString("7-restore 8-out");

				uint8 x=KeyPad_GetChar();
				while(x=='m')
    348e:	88 a1       	ldd	r24, Y+32	; 0x20
    3490:	8d 36       	cpi	r24, 0x6D	; 109
    3492:	d1 f3       	breq	.-12     	; 0x3488 <ADD_AND_REMOVE+0x38>
				{
					x=KeyPad_GetChar();
				}
				switch(x){
    3494:	88 a1       	ldd	r24, Y+32	; 0x20
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	3e a3       	std	Y+38, r19	; 0x26
    349c:	2d a3       	std	Y+37, r18	; 0x25
    349e:	8d a1       	ldd	r24, Y+37	; 0x25
    34a0:	9e a1       	ldd	r25, Y+38	; 0x26
    34a2:	86 33       	cpi	r24, 0x36	; 54
    34a4:	91 05       	cpc	r25, r1
    34a6:	51 f1       	breq	.+84     	; 0x34fc <ADD_AND_REMOVE+0xac>
    34a8:	2d a1       	ldd	r18, Y+37	; 0x25
    34aa:	3e a1       	ldd	r19, Y+38	; 0x26
    34ac:	27 33       	cpi	r18, 0x37	; 55
    34ae:	31 05       	cpc	r19, r1
    34b0:	34 f4       	brge	.+12     	; 0x34be <ADD_AND_REMOVE+0x6e>
    34b2:	8d a1       	ldd	r24, Y+37	; 0x25
    34b4:	9e a1       	ldd	r25, Y+38	; 0x26
    34b6:	85 33       	cpi	r24, 0x35	; 53
    34b8:	91 05       	cpc	r25, r1
    34ba:	71 f0       	breq	.+28     	; 0x34d8 <ADD_AND_REMOVE+0x88>
    34bc:	c2 c0       	rjmp	.+388    	; 0x3642 <ADD_AND_REMOVE+0x1f2>
    34be:	2d a1       	ldd	r18, Y+37	; 0x25
    34c0:	3e a1       	ldd	r19, Y+38	; 0x26
    34c2:	27 33       	cpi	r18, 0x37	; 55
    34c4:	31 05       	cpc	r19, r1
    34c6:	09 f4       	brne	.+2      	; 0x34ca <ADD_AND_REMOVE+0x7a>
    34c8:	b6 c0       	rjmp	.+364    	; 0x3636 <ADD_AND_REMOVE+0x1e6>
    34ca:	8d a1       	ldd	r24, Y+37	; 0x25
    34cc:	9e a1       	ldd	r25, Y+38	; 0x26
    34ce:	88 33       	cpi	r24, 0x38	; 56
    34d0:	91 05       	cpc	r25, r1
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <ADD_AND_REMOVE+0x86>
    34d4:	b4 c0       	rjmp	.+360    	; 0x363e <ADD_AND_REMOVE+0x1ee>
    34d6:	b5 c0       	rjmp	.+362    	; 0x3642 <ADD_AND_REMOVE+0x1f2>
							case('5'):{if(EEPROM_Read_Byte_From_Address(85)<=10){
    34d8:	85 e5       	ldi	r24, 0x55	; 85
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROM_Read_Byte_From_Address>
    34e0:	8b 30       	cpi	r24, 0x0B	; 11
    34e2:	91 05       	cpc	r25, r1
    34e4:	1c f4       	brge	.+6      	; 0x34ec <ADD_AND_REMOVE+0x9c>
								Add_New_user();
    34e6:	0e 94 00 09 	call	0x1200	; 0x1200 <Add_New_user>
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <ADD_AND_REMOVE+0xa8>
							}
							else
							{
								LCD_Init();
    34ec:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
								LCD_WriteString("max");
    34f0:	8e e7       	ldi	r24, 0x7E	; 126
    34f2:	91 e0       	ldi	r25, 0x01	; 1
    34f4:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
							}



								Menu_For_Admin();}
    34f8:	0e 94 a6 1b 	call	0x374c	; 0x374c <Menu_For_Admin>
							case('6'):{
								LCD_Init();
    34fc:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
								LCD_WriteString("enter user:");
    3500:	82 e8       	ldi	r24, 0x82	; 130
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
								uint8 u[user_limit];
								for(int i=0 ;i< user_limit ;)
    3508:	1f 8e       	std	Y+31, r1	; 0x1f
    350a:	1e 8e       	std	Y+30, r1	; 0x1e
    350c:	89 c0       	rjmp	.+274    	; 0x3620 <ADD_AND_REMOVE+0x1d0>
								{
									uint8 letter =GET_Input();
    350e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    3512:	8d 8f       	std	Y+29, r24	; 0x1d
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a8 e4       	ldi	r26, 0x48	; 72
    351a:	b3 e4       	ldi	r27, 0x43	; 67
    351c:	89 8f       	std	Y+25, r24	; 0x19
    351e:	9a 8f       	std	Y+26, r25	; 0x1a
    3520:	ab 8f       	std	Y+27, r26	; 0x1b
    3522:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3524:	69 8d       	ldd	r22, Y+25	; 0x19
    3526:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    352a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4a e7       	ldi	r20, 0x7A	; 122
    3532:	55 e4       	ldi	r21, 0x45	; 69
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	8d 8b       	std	Y+21, r24	; 0x15
    353e:	9e 8b       	std	Y+22, r25	; 0x16
    3540:	af 8b       	std	Y+23, r26	; 0x17
    3542:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3544:	6d 89       	ldd	r22, Y+21	; 0x15
    3546:	7e 89       	ldd	r23, Y+22	; 0x16
    3548:	8f 89       	ldd	r24, Y+23	; 0x17
    354a:	98 8d       	ldd	r25, Y+24	; 0x18
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	2c f4       	brge	.+10     	; 0x3566 <ADD_AND_REMOVE+0x116>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9c 8b       	std	Y+20, r25	; 0x14
    3562:	8b 8b       	std	Y+19, r24	; 0x13
    3564:	3f c0       	rjmp	.+126    	; 0x35e4 <ADD_AND_REMOVE+0x194>
	else if (__tmp > 65535)
    3566:	6d 89       	ldd	r22, Y+21	; 0x15
    3568:	7e 89       	ldd	r23, Y+22	; 0x16
    356a:	8f 89       	ldd	r24, Y+23	; 0x17
    356c:	98 8d       	ldd	r25, Y+24	; 0x18
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	4c f5       	brge	.+82     	; 0x35d0 <ADD_AND_REMOVE+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357e:	69 8d       	ldd	r22, Y+25	; 0x19
    3580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9c 8b       	std	Y+20, r25	; 0x14
    35a4:	8b 8b       	std	Y+19, r24	; 0x13
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <ADD_AND_REMOVE+0x176>
    35a8:	80 e9       	ldi	r24, 0x90	; 144
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	9a 8b       	std	Y+18, r25	; 0x12
    35ae:	89 8b       	std	Y+17, r24	; 0x11
    35b0:	89 89       	ldd	r24, Y+17	; 0x11
    35b2:	9a 89       	ldd	r25, Y+18	; 0x12
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <ADD_AND_REMOVE+0x164>
    35b8:	9a 8b       	std	Y+18, r25	; 0x12
    35ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	8b 89       	ldd	r24, Y+19	; 0x13
    35be:	9c 89       	ldd	r25, Y+20	; 0x14
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	9c 8b       	std	Y+20, r25	; 0x14
    35c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	8b 89       	ldd	r24, Y+19	; 0x13
    35c8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f7       	brne	.-38     	; 0x35a8 <ADD_AND_REMOVE+0x158>
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <ADD_AND_REMOVE+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	6d 89       	ldd	r22, Y+21	; 0x15
    35d2:	7e 89       	ldd	r23, Y+22	; 0x16
    35d4:	8f 89       	ldd	r24, Y+23	; 0x17
    35d6:	98 8d       	ldd	r25, Y+24	; 0x18
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9c 8b       	std	Y+20, r25	; 0x14
    35e2:	8b 8b       	std	Y+19, r24	; 0x13
    35e4:	8b 89       	ldd	r24, Y+19	; 0x13
    35e6:	9c 89       	ldd	r25, Y+20	; 0x14
    35e8:	98 8b       	std	Y+16, r25	; 0x10
    35ea:	8f 87       	std	Y+15, r24	; 0x0f
    35ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ee:	98 89       	ldd	r25, Y+16	; 0x10
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <ADD_AND_REMOVE+0x1a0>
    35f4:	98 8b       	std	Y+16, r25	; 0x10
    35f6:	8f 87       	std	Y+15, r24	; 0x0f
									_delay_ms(200);
									//uint8 x = KeyPad_GetChar();
									if(letter!='m'){
    35f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35fa:	8d 36       	cpi	r24, 0x6D	; 109
    35fc:	89 f0       	breq	.+34     	; 0x3620 <ADD_AND_REMOVE+0x1d0>
									LCD_WriteChar(letter);
    35fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3600:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
									u[i]=letter;
    3604:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3606:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3608:	ce 01       	movw	r24, r28
    360a:	81 96       	adiw	r24, 0x21	; 33
    360c:	fc 01       	movw	r30, r24
    360e:	e2 0f       	add	r30, r18
    3610:	f3 1f       	adc	r31, r19
    3612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3614:	80 83       	st	Z, r24
									i++;
    3616:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3618:	9f 8d       	ldd	r25, Y+31	; 0x1f
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	9f 8f       	std	Y+31, r25	; 0x1f
    361e:	8e 8f       	std	Y+30, r24	; 0x1e
								Menu_For_Admin();}
							case('6'):{
								LCD_Init();
								LCD_WriteString("enter user:");
								uint8 u[user_limit];
								for(int i=0 ;i< user_limit ;)
    3620:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3622:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3624:	84 30       	cpi	r24, 0x04	; 4
    3626:	91 05       	cpc	r25, r1
    3628:	0c f4       	brge	.+2      	; 0x362c <ADD_AND_REMOVE+0x1dc>
    362a:	71 cf       	rjmp	.-286    	; 0x350e <ADD_AND_REMOVE+0xbe>
									LCD_WriteChar(letter);
									u[i]=letter;
									i++;
									}
								}
								delete_user(u);
    362c:	ce 01       	movw	r24, r28
    362e:	81 96       	adiw	r24, 0x21	; 33
    3630:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <delete_user>
    3634:	82 c0       	rjmp	.+260    	; 0x373a <ADD_AND_REMOVE+0x2ea>
                                break;
							}
							case('7'):{
								Delete_ALL();
    3636:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Delete_ALL>
								main();
    363a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <main>
							}
							case('8'):{
								main();
    363e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <main>
							}
							default:{
								LCD_Init();
    3642:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
								LCD_WriteString("wrong input");
    3646:	8e e2       	ldi	r24, 0x2E	; 46
    3648:	91 e0       	ldi	r25, 0x01	; 1
    364a:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	a8 ec       	ldi	r26, 0xC8	; 200
    3654:	b2 e4       	ldi	r27, 0x42	; 66
    3656:	8b 87       	std	Y+11, r24	; 0x0b
    3658:	9c 87       	std	Y+12, r25	; 0x0c
    365a:	ad 87       	std	Y+13, r26	; 0x0d
    365c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3660:	7c 85       	ldd	r23, Y+12	; 0x0c
    3662:	8d 85       	ldd	r24, Y+13	; 0x0d
    3664:	9e 85       	ldd	r25, Y+14	; 0x0e
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	4a e7       	ldi	r20, 0x7A	; 122
    366c:	55 e4       	ldi	r21, 0x45	; 69
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	8f 83       	std	Y+7, r24	; 0x07
    3678:	98 87       	std	Y+8, r25	; 0x08
    367a:	a9 87       	std	Y+9, r26	; 0x09
    367c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    367e:	6f 81       	ldd	r22, Y+7	; 0x07
    3680:	78 85       	ldd	r23, Y+8	; 0x08
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e8       	ldi	r20, 0x80	; 128
    368c:	5f e3       	ldi	r21, 0x3F	; 63
    368e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3692:	88 23       	and	r24, r24
    3694:	2c f4       	brge	.+10     	; 0x36a0 <ADD_AND_REMOVE+0x250>
		__ticks = 1;
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	9e 83       	std	Y+6, r25	; 0x06
    369c:	8d 83       	std	Y+5, r24	; 0x05
    369e:	3f c0       	rjmp	.+126    	; 0x371e <ADD_AND_REMOVE+0x2ce>
	else if (__tmp > 65535)
    36a0:	6f 81       	ldd	r22, Y+7	; 0x07
    36a2:	78 85       	ldd	r23, Y+8	; 0x08
    36a4:	89 85       	ldd	r24, Y+9	; 0x09
    36a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	3f ef       	ldi	r19, 0xFF	; 255
    36ac:	4f e7       	ldi	r20, 0x7F	; 127
    36ae:	57 e4       	ldi	r21, 0x47	; 71
    36b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b4:	18 16       	cp	r1, r24
    36b6:	4c f5       	brge	.+82     	; 0x370a <ADD_AND_REMOVE+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    36bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36be:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	40 e2       	ldi	r20, 0x20	; 32
    36c6:	51 e4       	ldi	r21, 0x41	; 65
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	9e 83       	std	Y+6, r25	; 0x06
    36de:	8d 83       	std	Y+5, r24	; 0x05
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <ADD_AND_REMOVE+0x2b0>
    36e2:	80 e9       	ldi	r24, 0x90	; 144
    36e4:	91 e0       	ldi	r25, 0x01	; 1
    36e6:	9c 83       	std	Y+4, r25	; 0x04
    36e8:	8b 83       	std	Y+3, r24	; 0x03
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	9c 81       	ldd	r25, Y+4	; 0x04
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <ADD_AND_REMOVE+0x29e>
    36f2:	9c 83       	std	Y+4, r25	; 0x04
    36f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f6:	8d 81       	ldd	r24, Y+5	; 0x05
    36f8:	9e 81       	ldd	r25, Y+6	; 0x06
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3700:	8d 81       	ldd	r24, Y+5	; 0x05
    3702:	9e 81       	ldd	r25, Y+6	; 0x06
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	69 f7       	brne	.-38     	; 0x36e2 <ADD_AND_REMOVE+0x292>
    3708:	14 c0       	rjmp	.+40     	; 0x3732 <ADD_AND_REMOVE+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370a:	6f 81       	ldd	r22, Y+7	; 0x07
    370c:	78 85       	ldd	r23, Y+8	; 0x08
    370e:	89 85       	ldd	r24, Y+9	; 0x09
    3710:	9a 85       	ldd	r25, Y+10	; 0x0a
    3712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	9e 83       	std	Y+6, r25	; 0x06
    371c:	8d 83       	std	Y+5, r24	; 0x05
    371e:	8d 81       	ldd	r24, Y+5	; 0x05
    3720:	9e 81       	ldd	r25, Y+6	; 0x06
    3722:	9a 83       	std	Y+2, r25	; 0x02
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <ADD_AND_REMOVE+0x2da>
    372e:	9a 83       	std	Y+2, r25	; 0x02
    3730:	89 83       	std	Y+1, r24	; 0x01
								_delay_ms(100);
								LCD_Init();
    3732:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
								ADD_AND_REMOVE();
    3736:	0e 94 28 1a 	call	0x3450	; 0x3450 <ADD_AND_REMOVE>
							}

}
}
    373a:	a6 96       	adiw	r28, 0x26	; 38
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <Menu_For_Admin>:

void Menu_For_Admin()
{
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	6f 97       	sbiw	r28, 0x1f	; 31
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    LCD_Init();
    3760:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	LCD_WriteString("1-led  2-AC");
    3764:	8e e8       	ldi	r24, 0x8E	; 142
    3766:	91 e0       	ldi	r25, 0x01	; 1
    3768:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	LCD_GoTo(1, 0);
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	0e 94 66 2d 	call	0x5acc	; 0x5acc <LCD_GoTo>
	LCD_WriteString("3-door  4-more");
    3774:	8a e9       	ldi	r24, 0x9A	; 154
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	uint8 x=GET_Input();
    377c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    3780:	8d 8f       	std	Y+29, r24	; 0x1d
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	a8 e4       	ldi	r26, 0x48	; 72
    3788:	b3 e4       	ldi	r27, 0x43	; 67
    378a:	89 8f       	std	Y+25, r24	; 0x19
    378c:	9a 8f       	std	Y+26, r25	; 0x1a
    378e:	ab 8f       	std	Y+27, r26	; 0x1b
    3790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3792:	69 8d       	ldd	r22, Y+25	; 0x19
    3794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	4a e7       	ldi	r20, 0x7A	; 122
    37a0:	55 e4       	ldi	r21, 0x45	; 69
    37a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	8d 8b       	std	Y+21, r24	; 0x15
    37ac:	9e 8b       	std	Y+22, r25	; 0x16
    37ae:	af 8b       	std	Y+23, r26	; 0x17
    37b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37b2:	6d 89       	ldd	r22, Y+21	; 0x15
    37b4:	7e 89       	ldd	r23, Y+22	; 0x16
    37b6:	8f 89       	ldd	r24, Y+23	; 0x17
    37b8:	98 8d       	ldd	r25, Y+24	; 0x18
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e8       	ldi	r20, 0x80	; 128
    37c0:	5f e3       	ldi	r21, 0x3F	; 63
    37c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c6:	88 23       	and	r24, r24
    37c8:	2c f4       	brge	.+10     	; 0x37d4 <Menu_For_Admin+0x88>
		__ticks = 1;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9c 8b       	std	Y+20, r25	; 0x14
    37d0:	8b 8b       	std	Y+19, r24	; 0x13
    37d2:	3f c0       	rjmp	.+126    	; 0x3852 <Menu_For_Admin+0x106>
	else if (__tmp > 65535)
    37d4:	6d 89       	ldd	r22, Y+21	; 0x15
    37d6:	7e 89       	ldd	r23, Y+22	; 0x16
    37d8:	8f 89       	ldd	r24, Y+23	; 0x17
    37da:	98 8d       	ldd	r25, Y+24	; 0x18
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	3f ef       	ldi	r19, 0xFF	; 255
    37e0:	4f e7       	ldi	r20, 0x7F	; 127
    37e2:	57 e4       	ldi	r21, 0x47	; 71
    37e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e8:	18 16       	cp	r1, r24
    37ea:	4c f5       	brge	.+82     	; 0x383e <Menu_For_Admin+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ec:	69 8d       	ldd	r22, Y+25	; 0x19
    37ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e2       	ldi	r20, 0x20	; 32
    37fa:	51 e4       	ldi	r21, 0x41	; 65
    37fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9c 8b       	std	Y+20, r25	; 0x14
    3812:	8b 8b       	std	Y+19, r24	; 0x13
    3814:	0f c0       	rjmp	.+30     	; 0x3834 <Menu_For_Admin+0xe8>
    3816:	80 e9       	ldi	r24, 0x90	; 144
    3818:	91 e0       	ldi	r25, 0x01	; 1
    381a:	9a 8b       	std	Y+18, r25	; 0x12
    381c:	89 8b       	std	Y+17, r24	; 0x11
    381e:	89 89       	ldd	r24, Y+17	; 0x11
    3820:	9a 89       	ldd	r25, Y+18	; 0x12
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	f1 f7       	brne	.-4      	; 0x3822 <Menu_For_Admin+0xd6>
    3826:	9a 8b       	std	Y+18, r25	; 0x12
    3828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382a:	8b 89       	ldd	r24, Y+19	; 0x13
    382c:	9c 89       	ldd	r25, Y+20	; 0x14
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	9c 8b       	std	Y+20, r25	; 0x14
    3832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3834:	8b 89       	ldd	r24, Y+19	; 0x13
    3836:	9c 89       	ldd	r25, Y+20	; 0x14
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	69 f7       	brne	.-38     	; 0x3816 <Menu_For_Admin+0xca>
    383c:	14 c0       	rjmp	.+40     	; 0x3866 <Menu_For_Admin+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383e:	6d 89       	ldd	r22, Y+21	; 0x15
    3840:	7e 89       	ldd	r23, Y+22	; 0x16
    3842:	8f 89       	ldd	r24, Y+23	; 0x17
    3844:	98 8d       	ldd	r25, Y+24	; 0x18
    3846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	9c 8b       	std	Y+20, r25	; 0x14
    3850:	8b 8b       	std	Y+19, r24	; 0x13
    3852:	8b 89       	ldd	r24, Y+19	; 0x13
    3854:	9c 89       	ldd	r25, Y+20	; 0x14
    3856:	98 8b       	std	Y+16, r25	; 0x10
    3858:	8f 87       	std	Y+15, r24	; 0x0f
    385a:	8f 85       	ldd	r24, Y+15	; 0x0f
    385c:	98 89       	ldd	r25, Y+16	; 0x10
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <Menu_For_Admin+0x112>
    3862:	98 8b       	std	Y+16, r25	; 0x10
    3864:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);

	switch(x)
    3866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3868:	28 2f       	mov	r18, r24
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	3f 8f       	std	Y+31, r19	; 0x1f
    386e:	2e 8f       	std	Y+30, r18	; 0x1e
    3870:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3872:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3874:	82 33       	cpi	r24, 0x32	; 50
    3876:	91 05       	cpc	r25, r1
    3878:	d1 f0       	breq	.+52     	; 0x38ae <Menu_For_Admin+0x162>
    387a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    387c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    387e:	23 33       	cpi	r18, 0x33	; 51
    3880:	31 05       	cpc	r19, r1
    3882:	34 f4       	brge	.+12     	; 0x3890 <Menu_For_Admin+0x144>
    3884:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3886:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3888:	81 33       	cpi	r24, 0x31	; 49
    388a:	91 05       	cpc	r25, r1
    388c:	61 f0       	breq	.+24     	; 0x38a6 <Menu_For_Admin+0x15a>
    388e:	1b c0       	rjmp	.+54     	; 0x38c6 <Menu_For_Admin+0x17a>
    3890:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3892:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3894:	23 33       	cpi	r18, 0x33	; 51
    3896:	31 05       	cpc	r19, r1
    3898:	71 f0       	breq	.+28     	; 0x38b6 <Menu_For_Admin+0x16a>
    389a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    389c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    389e:	84 33       	cpi	r24, 0x34	; 52
    38a0:	91 05       	cpc	r25, r1
    38a2:	69 f0       	breq	.+26     	; 0x38be <Menu_For_Admin+0x172>
    38a4:	10 c0       	rjmp	.+32     	; 0x38c6 <Menu_For_Admin+0x17a>
	{
	case('1'):{lED();Menu_For_Admin();} // @suppress("No break at end of case")
    38a6:	0e 94 0f 10 	call	0x201e	; 0x201e <lED>
    38aa:	0e 94 a6 1b 	call	0x374c	; 0x374c <Menu_For_Admin>
	case('2'):{TEMP();Menu_For_Admin();}
    38ae:	0e 94 02 19 	call	0x3204	; 0x3204 <TEMP>
    38b2:	0e 94 a6 1b 	call	0x374c	; 0x374c <Menu_For_Admin>
	case('3'):{DOOR();Menu_For_Admin();}
    38b6:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <DOOR>
    38ba:	0e 94 a6 1b 	call	0x374c	; 0x374c <Menu_For_Admin>
    case('4'):{ADD_AND_REMOVE();Menu_For_Admin();}
    38be:	0e 94 28 1a 	call	0x3450	; 0x3450 <ADD_AND_REMOVE>
    38c2:	0e 94 a6 1b 	call	0x374c	; 0x374c <Menu_For_Admin>
    default:{
    								LCD_Init();
    38c6:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    								LCD_WriteString("wrong input");
    38ca:	8e e2       	ldi	r24, 0x2E	; 46
    38cc:	91 e0       	ldi	r25, 0x01	; 1
    38ce:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	a8 ec       	ldi	r26, 0xC8	; 200
    38d8:	b2 e4       	ldi	r27, 0x42	; 66
    38da:	8b 87       	std	Y+11, r24	; 0x0b
    38dc:	9c 87       	std	Y+12, r25	; 0x0c
    38de:	ad 87       	std	Y+13, r26	; 0x0d
    38e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	4a e7       	ldi	r20, 0x7A	; 122
    38f0:	55 e4       	ldi	r21, 0x45	; 69
    38f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	8f 83       	std	Y+7, r24	; 0x07
    38fc:	98 87       	std	Y+8, r25	; 0x08
    38fe:	a9 87       	std	Y+9, r26	; 0x09
    3900:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3902:	6f 81       	ldd	r22, Y+7	; 0x07
    3904:	78 85       	ldd	r23, Y+8	; 0x08
    3906:	89 85       	ldd	r24, Y+9	; 0x09
    3908:	9a 85       	ldd	r25, Y+10	; 0x0a
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e8       	ldi	r20, 0x80	; 128
    3910:	5f e3       	ldi	r21, 0x3F	; 63
    3912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3916:	88 23       	and	r24, r24
    3918:	2c f4       	brge	.+10     	; 0x3924 <Menu_For_Admin+0x1d8>
		__ticks = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	9e 83       	std	Y+6, r25	; 0x06
    3920:	8d 83       	std	Y+5, r24	; 0x05
    3922:	3f c0       	rjmp	.+126    	; 0x39a2 <Menu_For_Admin+0x256>
	else if (__tmp > 65535)
    3924:	6f 81       	ldd	r22, Y+7	; 0x07
    3926:	78 85       	ldd	r23, Y+8	; 0x08
    3928:	89 85       	ldd	r24, Y+9	; 0x09
    392a:	9a 85       	ldd	r25, Y+10	; 0x0a
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	3f ef       	ldi	r19, 0xFF	; 255
    3930:	4f e7       	ldi	r20, 0x7F	; 127
    3932:	57 e4       	ldi	r21, 0x47	; 71
    3934:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3938:	18 16       	cp	r1, r24
    393a:	4c f5       	brge	.+82     	; 0x398e <Menu_For_Admin+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	6b 85       	ldd	r22, Y+11	; 0x0b
    393e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3940:	8d 85       	ldd	r24, Y+13	; 0x0d
    3942:	9e 85       	ldd	r25, Y+14	; 0x0e
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	40 e2       	ldi	r20, 0x20	; 32
    394a:	51 e4       	ldi	r21, 0x41	; 65
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	9e 83       	std	Y+6, r25	; 0x06
    3962:	8d 83       	std	Y+5, r24	; 0x05
    3964:	0f c0       	rjmp	.+30     	; 0x3984 <Menu_For_Admin+0x238>
    3966:	80 e9       	ldi	r24, 0x90	; 144
    3968:	91 e0       	ldi	r25, 0x01	; 1
    396a:	9c 83       	std	Y+4, r25	; 0x04
    396c:	8b 83       	std	Y+3, r24	; 0x03
    396e:	8b 81       	ldd	r24, Y+3	; 0x03
    3970:	9c 81       	ldd	r25, Y+4	; 0x04
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <Menu_For_Admin+0x226>
    3976:	9c 83       	std	Y+4, r25	; 0x04
    3978:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
    397c:	9e 81       	ldd	r25, Y+6	; 0x06
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	9e 83       	std	Y+6, r25	; 0x06
    3982:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3984:	8d 81       	ldd	r24, Y+5	; 0x05
    3986:	9e 81       	ldd	r25, Y+6	; 0x06
    3988:	00 97       	sbiw	r24, 0x00	; 0
    398a:	69 f7       	brne	.-38     	; 0x3966 <Menu_For_Admin+0x21a>
    398c:	14 c0       	rjmp	.+40     	; 0x39b6 <Menu_For_Admin+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398e:	6f 81       	ldd	r22, Y+7	; 0x07
    3990:	78 85       	ldd	r23, Y+8	; 0x08
    3992:	89 85       	ldd	r24, Y+9	; 0x09
    3994:	9a 85       	ldd	r25, Y+10	; 0x0a
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	9e 83       	std	Y+6, r25	; 0x06
    39a0:	8d 83       	std	Y+5, r24	; 0x05
    39a2:	8d 81       	ldd	r24, Y+5	; 0x05
    39a4:	9e 81       	ldd	r25, Y+6	; 0x06
    39a6:	9a 83       	std	Y+2, r25	; 0x02
    39a8:	89 83       	std	Y+1, r24	; 0x01
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	9a 81       	ldd	r25, Y+2	; 0x02
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <Menu_For_Admin+0x262>
    39b2:	9a 83       	std	Y+2, r25	; 0x02
    39b4:	89 83       	std	Y+1, r24	; 0x01
    								_delay_ms(100);
    								LCD_Init();
    39b6:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
    								Menu_For_Admin();
    39ba:	0e 94 a6 1b 	call	0x374c	; 0x374c <Menu_For_Admin>
    							}
    }
}
    39be:	6f 96       	adiw	r28, 0x1f	; 31
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	08 95       	ret

000039d0 <Menu_For_User>:

void Menu_For_User()
{
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	6f 97       	sbiw	r28, 0x1f	; 31
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61

    LCD_Init();
    39e4:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
	LCD_WriteString("1-led  2-AC");
    39e8:	8e e8       	ldi	r24, 0x8E	; 142
    39ea:	91 e0       	ldi	r25, 0x01	; 1
    39ec:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
	uint8 x=GET_Input();
    39f0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <GET_Input>
    39f4:	8d 8f       	std	Y+29, r24	; 0x1d
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	a8 e4       	ldi	r26, 0x48	; 72
    39fc:	b3 e4       	ldi	r27, 0x43	; 67
    39fe:	89 8f       	std	Y+25, r24	; 0x19
    3a00:	9a 8f       	std	Y+26, r25	; 0x1a
    3a02:	ab 8f       	std	Y+27, r26	; 0x1b
    3a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a06:	69 8d       	ldd	r22, Y+25	; 0x19
    3a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	4a e7       	ldi	r20, 0x7A	; 122
    3a14:	55 e4       	ldi	r21, 0x45	; 69
    3a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	8d 8b       	std	Y+21, r24	; 0x15
    3a20:	9e 8b       	std	Y+22, r25	; 0x16
    3a22:	af 8b       	std	Y+23, r26	; 0x17
    3a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a26:	6d 89       	ldd	r22, Y+21	; 0x15
    3a28:	7e 89       	ldd	r23, Y+22	; 0x16
    3a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e8       	ldi	r20, 0x80	; 128
    3a34:	5f e3       	ldi	r21, 0x3F	; 63
    3a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a3a:	88 23       	and	r24, r24
    3a3c:	2c f4       	brge	.+10     	; 0x3a48 <Menu_For_User+0x78>
		__ticks = 1;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	9c 8b       	std	Y+20, r25	; 0x14
    3a44:	8b 8b       	std	Y+19, r24	; 0x13
    3a46:	3f c0       	rjmp	.+126    	; 0x3ac6 <Menu_For_User+0xf6>
	else if (__tmp > 65535)
    3a48:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	3f ef       	ldi	r19, 0xFF	; 255
    3a54:	4f e7       	ldi	r20, 0x7F	; 127
    3a56:	57 e4       	ldi	r21, 0x47	; 71
    3a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5c:	18 16       	cp	r1, r24
    3a5e:	4c f5       	brge	.+82     	; 0x3ab2 <Menu_For_User+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a60:	69 8d       	ldd	r22, Y+25	; 0x19
    3a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e2       	ldi	r20, 0x20	; 32
    3a6e:	51 e4       	ldi	r21, 0x41	; 65
    3a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	9c 8b       	std	Y+20, r25	; 0x14
    3a86:	8b 8b       	std	Y+19, r24	; 0x13
    3a88:	0f c0       	rjmp	.+30     	; 0x3aa8 <Menu_For_User+0xd8>
    3a8a:	80 e9       	ldi	r24, 0x90	; 144
    3a8c:	91 e0       	ldi	r25, 0x01	; 1
    3a8e:	9a 8b       	std	Y+18, r25	; 0x12
    3a90:	89 8b       	std	Y+17, r24	; 0x11
    3a92:	89 89       	ldd	r24, Y+17	; 0x11
    3a94:	9a 89       	ldd	r25, Y+18	; 0x12
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <Menu_For_User+0xc6>
    3a9a:	9a 8b       	std	Y+18, r25	; 0x12
    3a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	9c 8b       	std	Y+20, r25	; 0x14
    3aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	69 f7       	brne	.-38     	; 0x3a8a <Menu_For_User+0xba>
    3ab0:	18 c0       	rjmp	.+48     	; 0x3ae2 <Menu_For_User+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	9c 8b       	std	Y+20, r25	; 0x14
    3ac4:	8b 8b       	std	Y+19, r24	; 0x13
    3ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aca:	98 8b       	std	Y+16, r25	; 0x10
    3acc:	8f 87       	std	Y+15, r24	; 0x0f
    3ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad0:	98 89       	ldd	r25, Y+16	; 0x10
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	f1 f7       	brne	.-4      	; 0x3ad2 <Menu_For_User+0x102>
    3ad6:	98 8b       	std	Y+16, r25	; 0x10
    3ad8:	8f 87       	std	Y+15, r24	; 0x0f
    3ada:	03 c0       	rjmp	.+6      	; 0x3ae2 <Menu_For_User+0x112>
	_delay_ms(200);
	while (x == 'm')
	{
		x = KeyPad_GetChar();
    3adc:	0e 94 bb 28 	call	0x5176	; 0x5176 <KeyPad_GetChar>
    3ae0:	8d 8f       	std	Y+29, r24	; 0x1d

    LCD_Init();
	LCD_WriteString("1-led  2-AC");
	uint8 x=GET_Input();
	_delay_ms(200);
	while (x == 'm')
    3ae2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae4:	8d 36       	cpi	r24, 0x6D	; 109
    3ae6:	d1 f3       	breq	.-12     	; 0x3adc <Menu_For_User+0x10c>
	{
		x = KeyPad_GetChar();
	}

	switch(x)
    3ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aea:	28 2f       	mov	r18, r24
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	3f 8f       	std	Y+31, r19	; 0x1f
    3af0:	2e 8f       	std	Y+30, r18	; 0x1e
    3af2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3af4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3af6:	81 33       	cpi	r24, 0x31	; 49
    3af8:	91 05       	cpc	r25, r1
    3afa:	31 f0       	breq	.+12     	; 0x3b08 <Menu_For_User+0x138>
    3afc:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3afe:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3b00:	22 33       	cpi	r18, 0x32	; 50
    3b02:	31 05       	cpc	r19, r1
    3b04:	29 f0       	breq	.+10     	; 0x3b10 <Menu_For_User+0x140>
    3b06:	08 c0       	rjmp	.+16     	; 0x3b18 <Menu_For_User+0x148>
	{
	case('1'):{lED();Menu_For_User();} // @suppress("No break at end of case")
    3b08:	0e 94 0f 10 	call	0x201e	; 0x201e <lED>
    3b0c:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <Menu_For_User>
	case('2'):{TEMP();Menu_For_User();}
    3b10:	0e 94 02 19 	call	0x3204	; 0x3204 <TEMP>
    3b14:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <Menu_For_User>
	default:{
									LCD_Init();
    3b18:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
									LCD_WriteString("wrong input");
    3b1c:	8e e2       	ldi	r24, 0x2E	; 46
    3b1e:	91 e0       	ldi	r25, 0x01	; 1
    3b20:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <LCD_WriteString>
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	a8 ec       	ldi	r26, 0xC8	; 200
    3b2a:	b2 e4       	ldi	r27, 0x42	; 66
    3b2c:	8b 87       	std	Y+11, r24	; 0x0b
    3b2e:	9c 87       	std	Y+12, r25	; 0x0c
    3b30:	ad 87       	std	Y+13, r26	; 0x0d
    3b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	4a e7       	ldi	r20, 0x7A	; 122
    3b42:	55 e4       	ldi	r21, 0x45	; 69
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	8f 83       	std	Y+7, r24	; 0x07
    3b4e:	98 87       	std	Y+8, r25	; 0x08
    3b50:	a9 87       	std	Y+9, r26	; 0x09
    3b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b54:	6f 81       	ldd	r22, Y+7	; 0x07
    3b56:	78 85       	ldd	r23, Y+8	; 0x08
    3b58:	89 85       	ldd	r24, Y+9	; 0x09
    3b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	2c f4       	brge	.+10     	; 0x3b76 <Menu_For_User+0x1a6>
		__ticks = 1;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	9e 83       	std	Y+6, r25	; 0x06
    3b72:	8d 83       	std	Y+5, r24	; 0x05
    3b74:	3f c0       	rjmp	.+126    	; 0x3bf4 <Menu_For_User+0x224>
	else if (__tmp > 65535)
    3b76:	6f 81       	ldd	r22, Y+7	; 0x07
    3b78:	78 85       	ldd	r23, Y+8	; 0x08
    3b7a:	89 85       	ldd	r24, Y+9	; 0x09
    3b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	4c f5       	brge	.+82     	; 0x3be0 <Menu_For_User+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e2       	ldi	r20, 0x20	; 32
    3b9c:	51 e4       	ldi	r21, 0x41	; 65
    3b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	9e 83       	std	Y+6, r25	; 0x06
    3bb4:	8d 83       	std	Y+5, r24	; 0x05
    3bb6:	0f c0       	rjmp	.+30     	; 0x3bd6 <Menu_For_User+0x206>
    3bb8:	80 e9       	ldi	r24, 0x90	; 144
    3bba:	91 e0       	ldi	r25, 0x01	; 1
    3bbc:	9c 83       	std	Y+4, r25	; 0x04
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
    3bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <Menu_For_User+0x1f4>
    3bc8:	9c 83       	std	Y+4, r25	; 0x04
    3bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bce:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	9e 83       	std	Y+6, r25	; 0x06
    3bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	69 f7       	brne	.-38     	; 0x3bb8 <Menu_For_User+0x1e8>
    3bde:	14 c0       	rjmp	.+40     	; 0x3c08 <Menu_For_User+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be0:	6f 81       	ldd	r22, Y+7	; 0x07
    3be2:	78 85       	ldd	r23, Y+8	; 0x08
    3be4:	89 85       	ldd	r24, Y+9	; 0x09
    3be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9e 83       	std	Y+6, r25	; 0x06
    3bf2:	8d 83       	std	Y+5, r24	; 0x05
    3bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <Menu_For_User+0x230>
    3c04:	9a 83       	std	Y+2, r25	; 0x02
    3c06:	89 83       	std	Y+1, r24	; 0x01
									_delay_ms(100);
									LCD_Init();
    3c08:	0e 94 16 29 	call	0x522c	; 0x522c <LCD_Init>
									Menu_For_User();
    3c0c:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <Menu_For_User>
								}
	}
}
    3c10:	6f 96       	adiw	r28, 0x1f	; 31
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	08 95       	ret

00003c22 <ADC_vinit>:
#include "../STD_Types.h"
#include "ADC.h"


void ADC_vinit(void)
{
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
	//configure VREF to the internal voltage(2.56 V)/
	SET_BIT(ADMUX,REFS0);
    3c2a:	a7 e2       	ldi	r26, 0x27	; 39
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	e7 e2       	ldi	r30, 0x27	; 39
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	80 64       	ori	r24, 0x40	; 64
    3c36:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
    3c38:	a7 e2       	ldi	r26, 0x27	; 39
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	e7 e2       	ldi	r30, 0x27	; 39
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	80 81       	ld	r24, Z
    3c42:	80 68       	ori	r24, 0x80	; 128
    3c44:	8c 93       	st	X, r24
	/*************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
    3c46:	a6 e2       	ldi	r26, 0x26	; 38
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	e6 e2       	ldi	r30, 0x26	; 38
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	80 68       	ori	r24, 0x80	; 128
    3c52:	8c 93       	st	X, r24

	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
    3c54:	a6 e2       	ldi	r26, 0x26	; 38
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	e6 e2       	ldi	r30, 0x26	; 38
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	84 60       	ori	r24, 0x04	; 4
    3c60:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    3c62:	a6 e2       	ldi	r26, 0x26	; 38
    3c64:	b0 e0       	ldi	r27, 0x00	; 0
    3c66:	e6 e2       	ldi	r30, 0x26	; 38
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
    3c6c:	82 60       	ori	r24, 0x02	; 2
    3c6e:	8c 93       	st	X, r24
	/*************/
}
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <ADC_u16Read>:
uint16 ADC_u16Read(void)
{
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	00 d0       	rcall	.+0      	; 0x3c7c <ADC_u16Read+0x6>
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
    3c80:	a6 e2       	ldi	r26, 0x26	; 38
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e6 e2       	ldi	r30, 0x26	; 38
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	80 64       	ori	r24, 0x40	; 64
    3c8c:	8c 93       	st	X, r24
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
    3c8e:	e6 e2       	ldi	r30, 0x26	; 38
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	80 81       	ld	r24, Z
    3c94:	88 2f       	mov	r24, r24
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	80 71       	andi	r24, 0x10	; 16
    3c9a:	90 70       	andi	r25, 0x00	; 0
    3c9c:	95 95       	asr	r25
    3c9e:	87 95       	ror	r24
    3ca0:	95 95       	asr	r25
    3ca2:	87 95       	ror	r24
    3ca4:	95 95       	asr	r25
    3ca6:	87 95       	ror	r24
    3ca8:	95 95       	asr	r25
    3caa:	87 95       	ror	r24
    3cac:	00 97       	sbiw	r24, 0x00	; 0
    3cae:	79 f3       	breq	.-34     	; 0x3c8e <ADC_u16Read+0x18>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
    3cb0:	a6 e2       	ldi	r26, 0x26	; 38
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	e6 e2       	ldi	r30, 0x26	; 38
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	80 81       	ld	r24, Z
    3cba:	80 61       	ori	r24, 0x10	; 16
    3cbc:	8c 93       	st	X, r24
	read_val=(ADCL); //reas the ADCL register
    3cbe:	e4 e2       	ldi	r30, 0x24	; 36
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	80 81       	ld	r24, Z
    3cc4:	88 2f       	mov	r24, r24
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	9a 83       	std	Y+2, r25	; 0x02
    3cca:	89 83       	std	Y+1, r24	; 0x01
	read_val|=(ADCH<<8);//read the whole register
    3ccc:	e5 e2       	ldi	r30, 0x25	; 37
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	80 81       	ld	r24, Z
    3cd2:	88 2f       	mov	r24, r24
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	98 2f       	mov	r25, r24
    3cd8:	88 27       	eor	r24, r24
    3cda:	9c 01       	movw	r18, r24
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce0:	82 2b       	or	r24, r18
    3ce2:	93 2b       	or	r25, r19
    3ce4:	9a 83       	std	Y+2, r25	; 0x02
    3ce6:	89 83       	std	Y+1, r24	; 0x01
	return read_val ; // return the converted value
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <DIO_SetPortDir>:




void  DIO_SetPortDir(uint8 Port , uint8 Dir)
{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <DIO_SetPortDir+0x6>
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <DIO_SetPortDir+0x8>
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	28 2f       	mov	r18, r24
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	3c 83       	std	Y+4, r19	; 0x04
    3d0e:	2b 83       	std	Y+3, r18	; 0x03
    3d10:	8b 81       	ldd	r24, Y+3	; 0x03
    3d12:	9c 81       	ldd	r25, Y+4	; 0x04
    3d14:	81 30       	cpi	r24, 0x01	; 1
    3d16:	91 05       	cpc	r25, r1
    3d18:	d1 f0       	breq	.+52     	; 0x3d4e <DIO_SetPortDir+0x58>
    3d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d1e:	22 30       	cpi	r18, 0x02	; 2
    3d20:	31 05       	cpc	r19, r1
    3d22:	2c f4       	brge	.+10     	; 0x3d2e <DIO_SetPortDir+0x38>
    3d24:	8b 81       	ldd	r24, Y+3	; 0x03
    3d26:	9c 81       	ldd	r25, Y+4	; 0x04
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	61 f0       	breq	.+24     	; 0x3d44 <DIO_SetPortDir+0x4e>
    3d2c:	1e c0       	rjmp	.+60     	; 0x3d6a <DIO_SetPortDir+0x74>
    3d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    3d30:	3c 81       	ldd	r19, Y+4	; 0x04
    3d32:	22 30       	cpi	r18, 0x02	; 2
    3d34:	31 05       	cpc	r19, r1
    3d36:	81 f0       	breq	.+32     	; 0x3d58 <DIO_SetPortDir+0x62>
    3d38:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3c:	83 30       	cpi	r24, 0x03	; 3
    3d3e:	91 05       	cpc	r25, r1
    3d40:	81 f0       	breq	.+32     	; 0x3d62 <DIO_SetPortDir+0x6c>
    3d42:	13 c0       	rjmp	.+38     	; 0x3d6a <DIO_SetPortDir+0x74>
	{
		case DIO_PORTA :
		 DDRA = Dir;
    3d44:	ea e3       	ldi	r30, 0x3A	; 58
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4a:	80 83       	st	Z, r24
    3d4c:	0e c0       	rjmp	.+28     	; 0x3d6a <DIO_SetPortDir+0x74>
		break;

		case DIO_PORTB :
		 DDRB = Dir;
    3d4e:	e7 e3       	ldi	r30, 0x37	; 55
    3d50:	f0 e0       	ldi	r31, 0x00	; 0
    3d52:	8a 81       	ldd	r24, Y+2	; 0x02
    3d54:	80 83       	st	Z, r24
    3d56:	09 c0       	rjmp	.+18     	; 0x3d6a <DIO_SetPortDir+0x74>
		break;

		case DIO_PORTC :
		 DDRC = Dir;
    3d58:	e4 e3       	ldi	r30, 0x34	; 52
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	80 83       	st	Z, r24
    3d60:	04 c0       	rjmp	.+8      	; 0x3d6a <DIO_SetPortDir+0x74>
		break;

		case DIO_PORTD :
		 DDRD = Dir;
    3d62:	e1 e3       	ldi	r30, 0x31	; 49
    3d64:	f0 e0       	ldi	r31, 0x00	; 0
    3d66:	8a 81       	ldd	r24, Y+2	; 0x02
    3d68:	80 83       	st	Z, r24

		default:

		break;
	}
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	08 95       	ret

00003d78 <DIO_SetPinDir>:

void  DIO_SetPinDir(uint8 Port ,uint8 Pin ,uint8 Dir)
{
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    3d80:	29 97       	sbiw	r28, 0x09	; 9
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	6a 83       	std	Y+2, r22	; 0x02
    3d90:	4b 83       	std	Y+3, r20	; 0x03
	switch(Dir)
    3d92:	8b 81       	ldd	r24, Y+3	; 0x03
    3d94:	28 2f       	mov	r18, r24
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	39 87       	std	Y+9, r19	; 0x09
    3d9a:	28 87       	std	Y+8, r18	; 0x08
    3d9c:	88 85       	ldd	r24, Y+8	; 0x08
    3d9e:	99 85       	ldd	r25, Y+9	; 0x09
    3da0:	00 97       	sbiw	r24, 0x00	; 0
    3da2:	09 f4       	brne	.+2      	; 0x3da6 <DIO_SetPinDir+0x2e>
    3da4:	75 c0       	rjmp	.+234    	; 0x3e90 <DIO_SetPinDir+0x118>
    3da6:	28 85       	ldd	r18, Y+8	; 0x08
    3da8:	39 85       	ldd	r19, Y+9	; 0x09
    3daa:	21 30       	cpi	r18, 0x01	; 1
    3dac:	31 05       	cpc	r19, r1
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <DIO_SetPinDir+0x3a>
    3db0:	e2 c0       	rjmp	.+452    	; 0x3f76 <DIO_SetPinDir+0x1fe>
	{

	case DIO_PIN_OUTPUT :

		switch(Port)
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	28 2f       	mov	r18, r24
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	3f 83       	std	Y+7, r19	; 0x07
    3dba:	2e 83       	std	Y+6, r18	; 0x06
    3dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    3dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    3dc0:	81 30       	cpi	r24, 0x01	; 1
    3dc2:	91 05       	cpc	r25, r1
    3dc4:	49 f1       	breq	.+82     	; 0x3e18 <DIO_SetPinDir+0xa0>
    3dc6:	2e 81       	ldd	r18, Y+6	; 0x06
    3dc8:	3f 81       	ldd	r19, Y+7	; 0x07
    3dca:	22 30       	cpi	r18, 0x02	; 2
    3dcc:	31 05       	cpc	r19, r1
    3dce:	2c f4       	brge	.+10     	; 0x3dda <DIO_SetPinDir+0x62>
    3dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	61 f0       	breq	.+24     	; 0x3df0 <DIO_SetPinDir+0x78>
    3dd8:	ce c0       	rjmp	.+412    	; 0x3f76 <DIO_SetPinDir+0x1fe>
    3dda:	2e 81       	ldd	r18, Y+6	; 0x06
    3ddc:	3f 81       	ldd	r19, Y+7	; 0x07
    3dde:	22 30       	cpi	r18, 0x02	; 2
    3de0:	31 05       	cpc	r19, r1
    3de2:	71 f1       	breq	.+92     	; 0x3e40 <DIO_SetPinDir+0xc8>
    3de4:	8e 81       	ldd	r24, Y+6	; 0x06
    3de6:	9f 81       	ldd	r25, Y+7	; 0x07
    3de8:	83 30       	cpi	r24, 0x03	; 3
    3dea:	91 05       	cpc	r25, r1
    3dec:	e9 f1       	breq	.+122    	; 0x3e68 <DIO_SetPinDir+0xf0>
    3dee:	c3 c0       	rjmp	.+390    	; 0x3f76 <DIO_SetPinDir+0x1fe>
		{
			case DIO_PORTA:
			SET_BIT(DDRA , Pin);
    3df0:	aa e3       	ldi	r26, 0x3A	; 58
    3df2:	b0 e0       	ldi	r27, 0x00	; 0
    3df4:	ea e3       	ldi	r30, 0x3A	; 58
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	80 81       	ld	r24, Z
    3dfa:	48 2f       	mov	r20, r24
    3dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfe:	28 2f       	mov	r18, r24
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	02 2e       	mov	r0, r18
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <DIO_SetPinDir+0x96>
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	0a 94       	dec	r0
    3e10:	e2 f7       	brpl	.-8      	; 0x3e0a <DIO_SetPinDir+0x92>
    3e12:	84 2b       	or	r24, r20
    3e14:	8c 93       	st	X, r24
    3e16:	af c0       	rjmp	.+350    	; 0x3f76 <DIO_SetPinDir+0x1fe>
			break;
			case DIO_PORTB:
			SET_BIT(DDRB , Pin);
    3e18:	a7 e3       	ldi	r26, 0x37	; 55
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	e7 e3       	ldi	r30, 0x37	; 55
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	80 81       	ld	r24, Z
    3e22:	48 2f       	mov	r20, r24
    3e24:	8a 81       	ldd	r24, Y+2	; 0x02
    3e26:	28 2f       	mov	r18, r24
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	02 2e       	mov	r0, r18
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <DIO_SetPinDir+0xbe>
    3e32:	88 0f       	add	r24, r24
    3e34:	99 1f       	adc	r25, r25
    3e36:	0a 94       	dec	r0
    3e38:	e2 f7       	brpl	.-8      	; 0x3e32 <DIO_SetPinDir+0xba>
    3e3a:	84 2b       	or	r24, r20
    3e3c:	8c 93       	st	X, r24
    3e3e:	9b c0       	rjmp	.+310    	; 0x3f76 <DIO_SetPinDir+0x1fe>
			break;
			case DIO_PORTC:
			SET_BIT(DDRC , Pin);
    3e40:	a4 e3       	ldi	r26, 0x34	; 52
    3e42:	b0 e0       	ldi	r27, 0x00	; 0
    3e44:	e4 e3       	ldi	r30, 0x34	; 52
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	80 81       	ld	r24, Z
    3e4a:	48 2f       	mov	r20, r24
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	28 2f       	mov	r18, r24
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	02 2e       	mov	r0, r18
    3e58:	02 c0       	rjmp	.+4      	; 0x3e5e <DIO_SetPinDir+0xe6>
    3e5a:	88 0f       	add	r24, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	0a 94       	dec	r0
    3e60:	e2 f7       	brpl	.-8      	; 0x3e5a <DIO_SetPinDir+0xe2>
    3e62:	84 2b       	or	r24, r20
    3e64:	8c 93       	st	X, r24
    3e66:	87 c0       	rjmp	.+270    	; 0x3f76 <DIO_SetPinDir+0x1fe>
			break;
			case DIO_PORTD:
			SET_BIT(DDRD , Pin);
    3e68:	a1 e3       	ldi	r26, 0x31	; 49
    3e6a:	b0 e0       	ldi	r27, 0x00	; 0
    3e6c:	e1 e3       	ldi	r30, 0x31	; 49
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	80 81       	ld	r24, Z
    3e72:	48 2f       	mov	r20, r24
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	28 2f       	mov	r18, r24
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	02 2e       	mov	r0, r18
    3e80:	02 c0       	rjmp	.+4      	; 0x3e86 <DIO_SetPinDir+0x10e>
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	0a 94       	dec	r0
    3e88:	e2 f7       	brpl	.-8      	; 0x3e82 <DIO_SetPinDir+0x10a>
    3e8a:	84 2b       	or	r24, r20
    3e8c:	8c 93       	st	X, r24
    3e8e:	73 c0       	rjmp	.+230    	; 0x3f76 <DIO_SetPinDir+0x1fe>

	break;

	case DIO_PIN_INPUT :

		switch(Port)
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	28 2f       	mov	r18, r24
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	3d 83       	std	Y+5, r19	; 0x05
    3e98:	2c 83       	std	Y+4, r18	; 0x04
    3e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9e:	81 30       	cpi	r24, 0x01	; 1
    3ea0:	91 05       	cpc	r25, r1
    3ea2:	59 f1       	breq	.+86     	; 0x3efa <DIO_SetPinDir+0x182>
    3ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    3ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    3ea8:	22 30       	cpi	r18, 0x02	; 2
    3eaa:	31 05       	cpc	r19, r1
    3eac:	2c f4       	brge	.+10     	; 0x3eb8 <DIO_SetPinDir+0x140>
    3eae:	8c 81       	ldd	r24, Y+4	; 0x04
    3eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    3eb2:	00 97       	sbiw	r24, 0x00	; 0
    3eb4:	69 f0       	breq	.+26     	; 0x3ed0 <DIO_SetPinDir+0x158>
    3eb6:	5f c0       	rjmp	.+190    	; 0x3f76 <DIO_SetPinDir+0x1fe>
    3eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    3eba:	3d 81       	ldd	r19, Y+5	; 0x05
    3ebc:	22 30       	cpi	r18, 0x02	; 2
    3ebe:	31 05       	cpc	r19, r1
    3ec0:	89 f1       	breq	.+98     	; 0x3f24 <DIO_SetPinDir+0x1ac>
    3ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ec6:	83 30       	cpi	r24, 0x03	; 3
    3ec8:	91 05       	cpc	r25, r1
    3eca:	09 f4       	brne	.+2      	; 0x3ece <DIO_SetPinDir+0x156>
    3ecc:	40 c0       	rjmp	.+128    	; 0x3f4e <DIO_SetPinDir+0x1d6>
    3ece:	53 c0       	rjmp	.+166    	; 0x3f76 <DIO_SetPinDir+0x1fe>
		{
			case DIO_PORTA:
			CLR_BIT(DDRA , Pin);
    3ed0:	aa e3       	ldi	r26, 0x3A	; 58
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	ea e3       	ldi	r30, 0x3A	; 58
    3ed6:	f0 e0       	ldi	r31, 0x00	; 0
    3ed8:	80 81       	ld	r24, Z
    3eda:	48 2f       	mov	r20, r24
    3edc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	02 2e       	mov	r0, r18
    3ee8:	02 c0       	rjmp	.+4      	; 0x3eee <DIO_SetPinDir+0x176>
    3eea:	88 0f       	add	r24, r24
    3eec:	99 1f       	adc	r25, r25
    3eee:	0a 94       	dec	r0
    3ef0:	e2 f7       	brpl	.-8      	; 0x3eea <DIO_SetPinDir+0x172>
    3ef2:	80 95       	com	r24
    3ef4:	84 23       	and	r24, r20
    3ef6:	8c 93       	st	X, r24
    3ef8:	3e c0       	rjmp	.+124    	; 0x3f76 <DIO_SetPinDir+0x1fe>
			break;
			case DIO_PORTB:
			CLR_BIT(DDRB , Pin);
    3efa:	a7 e3       	ldi	r26, 0x37	; 55
    3efc:	b0 e0       	ldi	r27, 0x00	; 0
    3efe:	e7 e3       	ldi	r30, 0x37	; 55
    3f00:	f0 e0       	ldi	r31, 0x00	; 0
    3f02:	80 81       	ld	r24, Z
    3f04:	48 2f       	mov	r20, r24
    3f06:	8a 81       	ldd	r24, Y+2	; 0x02
    3f08:	28 2f       	mov	r18, r24
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	02 2e       	mov	r0, r18
    3f12:	02 c0       	rjmp	.+4      	; 0x3f18 <DIO_SetPinDir+0x1a0>
    3f14:	88 0f       	add	r24, r24
    3f16:	99 1f       	adc	r25, r25
    3f18:	0a 94       	dec	r0
    3f1a:	e2 f7       	brpl	.-8      	; 0x3f14 <DIO_SetPinDir+0x19c>
    3f1c:	80 95       	com	r24
    3f1e:	84 23       	and	r24, r20
    3f20:	8c 93       	st	X, r24
    3f22:	29 c0       	rjmp	.+82     	; 0x3f76 <DIO_SetPinDir+0x1fe>
			break;
			case DIO_PORTC:
			CLR_BIT(DDRC , Pin);
    3f24:	a4 e3       	ldi	r26, 0x34	; 52
    3f26:	b0 e0       	ldi	r27, 0x00	; 0
    3f28:	e4 e3       	ldi	r30, 0x34	; 52
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	80 81       	ld	r24, Z
    3f2e:	48 2f       	mov	r20, r24
    3f30:	8a 81       	ldd	r24, Y+2	; 0x02
    3f32:	28 2f       	mov	r18, r24
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	02 2e       	mov	r0, r18
    3f3c:	02 c0       	rjmp	.+4      	; 0x3f42 <DIO_SetPinDir+0x1ca>
    3f3e:	88 0f       	add	r24, r24
    3f40:	99 1f       	adc	r25, r25
    3f42:	0a 94       	dec	r0
    3f44:	e2 f7       	brpl	.-8      	; 0x3f3e <DIO_SetPinDir+0x1c6>
    3f46:	80 95       	com	r24
    3f48:	84 23       	and	r24, r20
    3f4a:	8c 93       	st	X, r24
    3f4c:	14 c0       	rjmp	.+40     	; 0x3f76 <DIO_SetPinDir+0x1fe>
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD , Pin);
    3f4e:	a1 e3       	ldi	r26, 0x31	; 49
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	e1 e3       	ldi	r30, 0x31	; 49
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	48 2f       	mov	r20, r24
    3f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	02 2e       	mov	r0, r18
    3f66:	02 c0       	rjmp	.+4      	; 0x3f6c <DIO_SetPinDir+0x1f4>
    3f68:	88 0f       	add	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	0a 94       	dec	r0
    3f6e:	e2 f7       	brpl	.-8      	; 0x3f68 <DIO_SetPinDir+0x1f0>
    3f70:	80 95       	com	r24
    3f72:	84 23       	and	r24, r20
    3f74:	8c 93       	st	X, r24
	break;


	}

}
    3f76:	29 96       	adiw	r28, 0x09	; 9
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	cf 91       	pop	r28
    3f84:	df 91       	pop	r29
    3f86:	08 95       	ret

00003f88 <DIO_SetPortVal>:



void  DIO_SetPortVal(uint8 Port , uint8 Val)
{
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	00 d0       	rcall	.+0      	; 0x3f8e <DIO_SetPortVal+0x6>
    3f8e:	00 d0       	rcall	.+0      	; 0x3f90 <DIO_SetPortVal+0x8>
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	89 83       	std	Y+1, r24	; 0x01
    3f96:	6a 83       	std	Y+2, r22	; 0x02
		switch(Port)
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	28 2f       	mov	r18, r24
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	3c 83       	std	Y+4, r19	; 0x04
    3fa0:	2b 83       	std	Y+3, r18	; 0x03
    3fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa6:	81 30       	cpi	r24, 0x01	; 1
    3fa8:	91 05       	cpc	r25, r1
    3faa:	d1 f0       	breq	.+52     	; 0x3fe0 <DIO_SetPortVal+0x58>
    3fac:	2b 81       	ldd	r18, Y+3	; 0x03
    3fae:	3c 81       	ldd	r19, Y+4	; 0x04
    3fb0:	22 30       	cpi	r18, 0x02	; 2
    3fb2:	31 05       	cpc	r19, r1
    3fb4:	2c f4       	brge	.+10     	; 0x3fc0 <DIO_SetPortVal+0x38>
    3fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	61 f0       	breq	.+24     	; 0x3fd6 <DIO_SetPortVal+0x4e>
    3fbe:	1e c0       	rjmp	.+60     	; 0x3ffc <DIO_SetPortVal+0x74>
    3fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    3fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    3fc4:	22 30       	cpi	r18, 0x02	; 2
    3fc6:	31 05       	cpc	r19, r1
    3fc8:	81 f0       	breq	.+32     	; 0x3fea <DIO_SetPortVal+0x62>
    3fca:	8b 81       	ldd	r24, Y+3	; 0x03
    3fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fce:	83 30       	cpi	r24, 0x03	; 3
    3fd0:	91 05       	cpc	r25, r1
    3fd2:	81 f0       	breq	.+32     	; 0x3ff4 <DIO_SetPortVal+0x6c>
    3fd4:	13 c0       	rjmp	.+38     	; 0x3ffc <DIO_SetPortVal+0x74>
		{
			case DIO_PORTA :
			PORTA = Val;
    3fd6:	eb e3       	ldi	r30, 0x3B	; 59
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	80 83       	st	Z, r24
    3fde:	0e c0       	rjmp	.+28     	; 0x3ffc <DIO_SetPortVal+0x74>
			break;

			case DIO_PORTB :
			PORTB = Val;
    3fe0:	e8 e3       	ldi	r30, 0x38	; 56
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe6:	80 83       	st	Z, r24
    3fe8:	09 c0       	rjmp	.+18     	; 0x3ffc <DIO_SetPortVal+0x74>
			break;

			case DIO_PORTC :
			PORTC = Val;
    3fea:	e5 e3       	ldi	r30, 0x35	; 53
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff0:	80 83       	st	Z, r24
    3ff2:	04 c0       	rjmp	.+8      	; 0x3ffc <DIO_SetPortVal+0x74>
			break;

			case DIO_PORTD :
			PORTD = Val;
    3ff4:	e2 e3       	ldi	r30, 0x32	; 50
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffa:	80 83       	st	Z, r24
			default:

			break;
		}

}
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	cf 91       	pop	r28
    4006:	df 91       	pop	r29
    4008:	08 95       	ret

0000400a <DIO_SetPinVal>:

void  DIO_SetPinVal(uint8 Port ,uint8 Pin ,uint8 Val)
{
    400a:	df 93       	push	r29
    400c:	cf 93       	push	r28
    400e:	cd b7       	in	r28, 0x3d	; 61
    4010:	de b7       	in	r29, 0x3e	; 62
    4012:	29 97       	sbiw	r28, 0x09	; 9
    4014:	0f b6       	in	r0, 0x3f	; 63
    4016:	f8 94       	cli
    4018:	de bf       	out	0x3e, r29	; 62
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	cd bf       	out	0x3d, r28	; 61
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	6a 83       	std	Y+2, r22	; 0x02
    4022:	4b 83       	std	Y+3, r20	; 0x03

	switch(Val)
    4024:	8b 81       	ldd	r24, Y+3	; 0x03
    4026:	28 2f       	mov	r18, r24
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	39 87       	std	Y+9, r19	; 0x09
    402c:	28 87       	std	Y+8, r18	; 0x08
    402e:	88 85       	ldd	r24, Y+8	; 0x08
    4030:	99 85       	ldd	r25, Y+9	; 0x09
    4032:	00 97       	sbiw	r24, 0x00	; 0
    4034:	09 f4       	brne	.+2      	; 0x4038 <DIO_SetPinVal+0x2e>
    4036:	75 c0       	rjmp	.+234    	; 0x4122 <DIO_SetPinVal+0x118>
    4038:	28 85       	ldd	r18, Y+8	; 0x08
    403a:	39 85       	ldd	r19, Y+9	; 0x09
    403c:	21 30       	cpi	r18, 0x01	; 1
    403e:	31 05       	cpc	r19, r1
    4040:	09 f0       	breq	.+2      	; 0x4044 <DIO_SetPinVal+0x3a>
    4042:	e2 c0       	rjmp	.+452    	; 0x4208 <DIO_SetPinVal+0x1fe>
	{
		case DIO_PIN_HIGH :

		switch(Port)
    4044:	89 81       	ldd	r24, Y+1	; 0x01
    4046:	28 2f       	mov	r18, r24
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	3f 83       	std	Y+7, r19	; 0x07
    404c:	2e 83       	std	Y+6, r18	; 0x06
    404e:	8e 81       	ldd	r24, Y+6	; 0x06
    4050:	9f 81       	ldd	r25, Y+7	; 0x07
    4052:	81 30       	cpi	r24, 0x01	; 1
    4054:	91 05       	cpc	r25, r1
    4056:	49 f1       	breq	.+82     	; 0x40aa <DIO_SetPinVal+0xa0>
    4058:	2e 81       	ldd	r18, Y+6	; 0x06
    405a:	3f 81       	ldd	r19, Y+7	; 0x07
    405c:	22 30       	cpi	r18, 0x02	; 2
    405e:	31 05       	cpc	r19, r1
    4060:	2c f4       	brge	.+10     	; 0x406c <DIO_SetPinVal+0x62>
    4062:	8e 81       	ldd	r24, Y+6	; 0x06
    4064:	9f 81       	ldd	r25, Y+7	; 0x07
    4066:	00 97       	sbiw	r24, 0x00	; 0
    4068:	61 f0       	breq	.+24     	; 0x4082 <DIO_SetPinVal+0x78>
    406a:	ce c0       	rjmp	.+412    	; 0x4208 <DIO_SetPinVal+0x1fe>
    406c:	2e 81       	ldd	r18, Y+6	; 0x06
    406e:	3f 81       	ldd	r19, Y+7	; 0x07
    4070:	22 30       	cpi	r18, 0x02	; 2
    4072:	31 05       	cpc	r19, r1
    4074:	71 f1       	breq	.+92     	; 0x40d2 <DIO_SetPinVal+0xc8>
    4076:	8e 81       	ldd	r24, Y+6	; 0x06
    4078:	9f 81       	ldd	r25, Y+7	; 0x07
    407a:	83 30       	cpi	r24, 0x03	; 3
    407c:	91 05       	cpc	r25, r1
    407e:	e9 f1       	breq	.+122    	; 0x40fa <DIO_SetPinVal+0xf0>
    4080:	c3 c0       	rjmp	.+390    	; 0x4208 <DIO_SetPinVal+0x1fe>
		{
			case DIO_PORTA:
			SET_BIT(PORTA , Pin);
    4082:	ab e3       	ldi	r26, 0x3B	; 59
    4084:	b0 e0       	ldi	r27, 0x00	; 0
    4086:	eb e3       	ldi	r30, 0x3B	; 59
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	48 2f       	mov	r20, r24
    408e:	8a 81       	ldd	r24, Y+2	; 0x02
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	02 2e       	mov	r0, r18
    409a:	02 c0       	rjmp	.+4      	; 0x40a0 <DIO_SetPinVal+0x96>
    409c:	88 0f       	add	r24, r24
    409e:	99 1f       	adc	r25, r25
    40a0:	0a 94       	dec	r0
    40a2:	e2 f7       	brpl	.-8      	; 0x409c <DIO_SetPinVal+0x92>
    40a4:	84 2b       	or	r24, r20
    40a6:	8c 93       	st	X, r24
    40a8:	af c0       	rjmp	.+350    	; 0x4208 <DIO_SetPinVal+0x1fe>
			break;
			case DIO_PORTB:
			SET_BIT(PORTB , Pin);
    40aa:	a8 e3       	ldi	r26, 0x38	; 56
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e8 e3       	ldi	r30, 0x38	; 56
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	48 2f       	mov	r20, r24
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	02 2e       	mov	r0, r18
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <DIO_SetPinVal+0xbe>
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	0a 94       	dec	r0
    40ca:	e2 f7       	brpl	.-8      	; 0x40c4 <DIO_SetPinVal+0xba>
    40cc:	84 2b       	or	r24, r20
    40ce:	8c 93       	st	X, r24
    40d0:	9b c0       	rjmp	.+310    	; 0x4208 <DIO_SetPinVal+0x1fe>
			break;
			case DIO_PORTC:
			SET_BIT(PORTC , Pin);
    40d2:	a5 e3       	ldi	r26, 0x35	; 53
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	e5 e3       	ldi	r30, 0x35	; 53
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	80 81       	ld	r24, Z
    40dc:	48 2f       	mov	r20, r24
    40de:	8a 81       	ldd	r24, Y+2	; 0x02
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	02 2e       	mov	r0, r18
    40ea:	02 c0       	rjmp	.+4      	; 0x40f0 <DIO_SetPinVal+0xe6>
    40ec:	88 0f       	add	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	0a 94       	dec	r0
    40f2:	e2 f7       	brpl	.-8      	; 0x40ec <DIO_SetPinVal+0xe2>
    40f4:	84 2b       	or	r24, r20
    40f6:	8c 93       	st	X, r24
    40f8:	87 c0       	rjmp	.+270    	; 0x4208 <DIO_SetPinVal+0x1fe>
			break;
			case DIO_PORTD:
			SET_BIT(PORTD , Pin);
    40fa:	a2 e3       	ldi	r26, 0x32	; 50
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	e2 e3       	ldi	r30, 0x32	; 50
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	48 2f       	mov	r20, r24
    4106:	8a 81       	ldd	r24, Y+2	; 0x02
    4108:	28 2f       	mov	r18, r24
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	02 2e       	mov	r0, r18
    4112:	02 c0       	rjmp	.+4      	; 0x4118 <DIO_SetPinVal+0x10e>
    4114:	88 0f       	add	r24, r24
    4116:	99 1f       	adc	r25, r25
    4118:	0a 94       	dec	r0
    411a:	e2 f7       	brpl	.-8      	; 0x4114 <DIO_SetPinVal+0x10a>
    411c:	84 2b       	or	r24, r20
    411e:	8c 93       	st	X, r24
    4120:	73 c0       	rjmp	.+230    	; 0x4208 <DIO_SetPinVal+0x1fe>

		break;

		case DIO_PIN_LOW:

			switch(Port)
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	28 2f       	mov	r18, r24
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	3d 83       	std	Y+5, r19	; 0x05
    412a:	2c 83       	std	Y+4, r18	; 0x04
    412c:	8c 81       	ldd	r24, Y+4	; 0x04
    412e:	9d 81       	ldd	r25, Y+5	; 0x05
    4130:	81 30       	cpi	r24, 0x01	; 1
    4132:	91 05       	cpc	r25, r1
    4134:	59 f1       	breq	.+86     	; 0x418c <DIO_SetPinVal+0x182>
    4136:	2c 81       	ldd	r18, Y+4	; 0x04
    4138:	3d 81       	ldd	r19, Y+5	; 0x05
    413a:	22 30       	cpi	r18, 0x02	; 2
    413c:	31 05       	cpc	r19, r1
    413e:	2c f4       	brge	.+10     	; 0x414a <DIO_SetPinVal+0x140>
    4140:	8c 81       	ldd	r24, Y+4	; 0x04
    4142:	9d 81       	ldd	r25, Y+5	; 0x05
    4144:	00 97       	sbiw	r24, 0x00	; 0
    4146:	69 f0       	breq	.+26     	; 0x4162 <DIO_SetPinVal+0x158>
    4148:	5f c0       	rjmp	.+190    	; 0x4208 <DIO_SetPinVal+0x1fe>
    414a:	2c 81       	ldd	r18, Y+4	; 0x04
    414c:	3d 81       	ldd	r19, Y+5	; 0x05
    414e:	22 30       	cpi	r18, 0x02	; 2
    4150:	31 05       	cpc	r19, r1
    4152:	89 f1       	breq	.+98     	; 0x41b6 <DIO_SetPinVal+0x1ac>
    4154:	8c 81       	ldd	r24, Y+4	; 0x04
    4156:	9d 81       	ldd	r25, Y+5	; 0x05
    4158:	83 30       	cpi	r24, 0x03	; 3
    415a:	91 05       	cpc	r25, r1
    415c:	09 f4       	brne	.+2      	; 0x4160 <DIO_SetPinVal+0x156>
    415e:	40 c0       	rjmp	.+128    	; 0x41e0 <DIO_SetPinVal+0x1d6>
    4160:	53 c0       	rjmp	.+166    	; 0x4208 <DIO_SetPinVal+0x1fe>
			{
				case DIO_PORTA:
				CLR_BIT(PORTA , Pin);
    4162:	ab e3       	ldi	r26, 0x3B	; 59
    4164:	b0 e0       	ldi	r27, 0x00	; 0
    4166:	eb e3       	ldi	r30, 0x3B	; 59
    4168:	f0 e0       	ldi	r31, 0x00	; 0
    416a:	80 81       	ld	r24, Z
    416c:	48 2f       	mov	r20, r24
    416e:	8a 81       	ldd	r24, Y+2	; 0x02
    4170:	28 2f       	mov	r18, r24
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	02 2e       	mov	r0, r18
    417a:	02 c0       	rjmp	.+4      	; 0x4180 <DIO_SetPinVal+0x176>
    417c:	88 0f       	add	r24, r24
    417e:	99 1f       	adc	r25, r25
    4180:	0a 94       	dec	r0
    4182:	e2 f7       	brpl	.-8      	; 0x417c <DIO_SetPinVal+0x172>
    4184:	80 95       	com	r24
    4186:	84 23       	and	r24, r20
    4188:	8c 93       	st	X, r24
    418a:	3e c0       	rjmp	.+124    	; 0x4208 <DIO_SetPinVal+0x1fe>
				break;
				case DIO_PORTB:
				CLR_BIT(PORTB , Pin);
    418c:	a8 e3       	ldi	r26, 0x38	; 56
    418e:	b0 e0       	ldi	r27, 0x00	; 0
    4190:	e8 e3       	ldi	r30, 0x38	; 56
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	80 81       	ld	r24, Z
    4196:	48 2f       	mov	r20, r24
    4198:	8a 81       	ldd	r24, Y+2	; 0x02
    419a:	28 2f       	mov	r18, r24
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	02 2e       	mov	r0, r18
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <DIO_SetPinVal+0x1a0>
    41a6:	88 0f       	add	r24, r24
    41a8:	99 1f       	adc	r25, r25
    41aa:	0a 94       	dec	r0
    41ac:	e2 f7       	brpl	.-8      	; 0x41a6 <DIO_SetPinVal+0x19c>
    41ae:	80 95       	com	r24
    41b0:	84 23       	and	r24, r20
    41b2:	8c 93       	st	X, r24
    41b4:	29 c0       	rjmp	.+82     	; 0x4208 <DIO_SetPinVal+0x1fe>
				break;
				case DIO_PORTC:
				CLR_BIT(PORTC , Pin);
    41b6:	a5 e3       	ldi	r26, 0x35	; 53
    41b8:	b0 e0       	ldi	r27, 0x00	; 0
    41ba:	e5 e3       	ldi	r30, 0x35	; 53
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	80 81       	ld	r24, Z
    41c0:	48 2f       	mov	r20, r24
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	02 2e       	mov	r0, r18
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <DIO_SetPinVal+0x1ca>
    41d0:	88 0f       	add	r24, r24
    41d2:	99 1f       	adc	r25, r25
    41d4:	0a 94       	dec	r0
    41d6:	e2 f7       	brpl	.-8      	; 0x41d0 <DIO_SetPinVal+0x1c6>
    41d8:	80 95       	com	r24
    41da:	84 23       	and	r24, r20
    41dc:	8c 93       	st	X, r24
    41de:	14 c0       	rjmp	.+40     	; 0x4208 <DIO_SetPinVal+0x1fe>
				break;
				case DIO_PORTD:
				CLR_BIT(PORTD , Pin);
    41e0:	a2 e3       	ldi	r26, 0x32	; 50
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	e2 e3       	ldi	r30, 0x32	; 50
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	80 81       	ld	r24, Z
    41ea:	48 2f       	mov	r20, r24
    41ec:	8a 81       	ldd	r24, Y+2	; 0x02
    41ee:	28 2f       	mov	r18, r24
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	02 2e       	mov	r0, r18
    41f8:	02 c0       	rjmp	.+4      	; 0x41fe <DIO_SetPinVal+0x1f4>
    41fa:	88 0f       	add	r24, r24
    41fc:	99 1f       	adc	r25, r25
    41fe:	0a 94       	dec	r0
    4200:	e2 f7       	brpl	.-8      	; 0x41fa <DIO_SetPinVal+0x1f0>
    4202:	80 95       	com	r24
    4204:	84 23       	and	r24, r20
    4206:	8c 93       	st	X, r24

		default:
		break;
	}

}
    4208:	29 96       	adiw	r28, 0x09	; 9
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	f8 94       	cli
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	cd bf       	out	0x3d, r28	; 61
    4214:	cf 91       	pop	r28
    4216:	df 91       	pop	r29
    4218:	08 95       	ret

0000421a <DIO_GetPortVal>:


uint8  DIO_GetPortVal(uint8 Port)
{
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	00 d0       	rcall	.+0      	; 0x4220 <DIO_GetPortVal+0x6>
    4220:	00 d0       	rcall	.+0      	; 0x4222 <DIO_GetPortVal+0x8>
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	8a 83       	std	Y+2, r24	; 0x02
	uint8 val = 0;
    4228:	19 82       	std	Y+1, r1	; 0x01

	switch(Port)
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
    422c:	28 2f       	mov	r18, r24
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	3c 83       	std	Y+4, r19	; 0x04
    4232:	2b 83       	std	Y+3, r18	; 0x03
    4234:	8b 81       	ldd	r24, Y+3	; 0x03
    4236:	9c 81       	ldd	r25, Y+4	; 0x04
    4238:	81 30       	cpi	r24, 0x01	; 1
    423a:	91 05       	cpc	r25, r1
    423c:	d1 f0       	breq	.+52     	; 0x4272 <DIO_GetPortVal+0x58>
    423e:	2b 81       	ldd	r18, Y+3	; 0x03
    4240:	3c 81       	ldd	r19, Y+4	; 0x04
    4242:	22 30       	cpi	r18, 0x02	; 2
    4244:	31 05       	cpc	r19, r1
    4246:	2c f4       	brge	.+10     	; 0x4252 <DIO_GetPortVal+0x38>
    4248:	8b 81       	ldd	r24, Y+3	; 0x03
    424a:	9c 81       	ldd	r25, Y+4	; 0x04
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	61 f0       	breq	.+24     	; 0x4268 <DIO_GetPortVal+0x4e>
    4250:	1e c0       	rjmp	.+60     	; 0x428e <DIO_GetPortVal+0x74>
    4252:	2b 81       	ldd	r18, Y+3	; 0x03
    4254:	3c 81       	ldd	r19, Y+4	; 0x04
    4256:	22 30       	cpi	r18, 0x02	; 2
    4258:	31 05       	cpc	r19, r1
    425a:	81 f0       	breq	.+32     	; 0x427c <DIO_GetPortVal+0x62>
    425c:	8b 81       	ldd	r24, Y+3	; 0x03
    425e:	9c 81       	ldd	r25, Y+4	; 0x04
    4260:	83 30       	cpi	r24, 0x03	; 3
    4262:	91 05       	cpc	r25, r1
    4264:	81 f0       	breq	.+32     	; 0x4286 <DIO_GetPortVal+0x6c>
    4266:	13 c0       	rjmp	.+38     	; 0x428e <DIO_GetPortVal+0x74>
	{
		case DIO_PORTA :
		val = PINA;
    4268:	e9 e3       	ldi	r30, 0x39	; 57
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	80 81       	ld	r24, Z
    426e:	89 83       	std	Y+1, r24	; 0x01
    4270:	0e c0       	rjmp	.+28     	; 0x428e <DIO_GetPortVal+0x74>
		break;

		case DIO_PORTB :
		val = PINB;
    4272:	e6 e3       	ldi	r30, 0x36	; 54
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	80 81       	ld	r24, Z
    4278:	89 83       	std	Y+1, r24	; 0x01
    427a:	09 c0       	rjmp	.+18     	; 0x428e <DIO_GetPortVal+0x74>
		break;

		case DIO_PORTC :
		val = PINC;
    427c:	e3 e3       	ldi	r30, 0x33	; 51
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	80 81       	ld	r24, Z
    4282:	89 83       	std	Y+1, r24	; 0x01
    4284:	04 c0       	rjmp	.+8      	; 0x428e <DIO_GetPortVal+0x74>
		break;

		case DIO_PORTD :
		val = PIND;
    4286:	e0 e3       	ldi	r30, 0x30	; 48
    4288:	f0 e0       	ldi	r31, 0x00	; 0
    428a:	80 81       	ld	r24, Z
    428c:	89 83       	std	Y+1, r24	; 0x01
		default:

		break;
	}

	return  val;
    428e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
    4294:	0f 90       	pop	r0
    4296:	0f 90       	pop	r0
    4298:	cf 91       	pop	r28
    429a:	df 91       	pop	r29
    429c:	08 95       	ret

0000429e <DIO_GetPinVal>:


uint8  DIO_GetPinVal(uint8 Port ,uint8 Pin)
{
    429e:	df 93       	push	r29
    42a0:	cf 93       	push	r28
    42a2:	00 d0       	rcall	.+0      	; 0x42a4 <DIO_GetPinVal+0x6>
    42a4:	00 d0       	rcall	.+0      	; 0x42a6 <DIO_GetPinVal+0x8>
    42a6:	0f 92       	push	r0
    42a8:	cd b7       	in	r28, 0x3d	; 61
    42aa:	de b7       	in	r29, 0x3e	; 62
    42ac:	8a 83       	std	Y+2, r24	; 0x02
    42ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 val = 0;
    42b0:	19 82       	std	Y+1, r1	; 0x01

	switch(Port)
    42b2:	8a 81       	ldd	r24, Y+2	; 0x02
    42b4:	28 2f       	mov	r18, r24
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	3d 83       	std	Y+5, r19	; 0x05
    42ba:	2c 83       	std	Y+4, r18	; 0x04
    42bc:	4c 81       	ldd	r20, Y+4	; 0x04
    42be:	5d 81       	ldd	r21, Y+5	; 0x05
    42c0:	41 30       	cpi	r20, 0x01	; 1
    42c2:	51 05       	cpc	r21, r1
    42c4:	41 f1       	breq	.+80     	; 0x4316 <DIO_GetPinVal+0x78>
    42c6:	8c 81       	ldd	r24, Y+4	; 0x04
    42c8:	9d 81       	ldd	r25, Y+5	; 0x05
    42ca:	82 30       	cpi	r24, 0x02	; 2
    42cc:	91 05       	cpc	r25, r1
    42ce:	34 f4       	brge	.+12     	; 0x42dc <DIO_GetPinVal+0x3e>
    42d0:	2c 81       	ldd	r18, Y+4	; 0x04
    42d2:	3d 81       	ldd	r19, Y+5	; 0x05
    42d4:	21 15       	cp	r18, r1
    42d6:	31 05       	cpc	r19, r1
    42d8:	61 f0       	breq	.+24     	; 0x42f2 <DIO_GetPinVal+0x54>
    42da:	52 c0       	rjmp	.+164    	; 0x4380 <DIO_GetPinVal+0xe2>
    42dc:	4c 81       	ldd	r20, Y+4	; 0x04
    42de:	5d 81       	ldd	r21, Y+5	; 0x05
    42e0:	42 30       	cpi	r20, 0x02	; 2
    42e2:	51 05       	cpc	r21, r1
    42e4:	51 f1       	breq	.+84     	; 0x433a <DIO_GetPinVal+0x9c>
    42e6:	8c 81       	ldd	r24, Y+4	; 0x04
    42e8:	9d 81       	ldd	r25, Y+5	; 0x05
    42ea:	83 30       	cpi	r24, 0x03	; 3
    42ec:	91 05       	cpc	r25, r1
    42ee:	b9 f1       	breq	.+110    	; 0x435e <DIO_GetPinVal+0xc0>
    42f0:	47 c0       	rjmp	.+142    	; 0x4380 <DIO_GetPinVal+0xe2>
	{
		case DIO_PORTA :
		val = GET_BIT(PINA,Pin);
    42f2:	e9 e3       	ldi	r30, 0x39	; 57
    42f4:	f0 e0       	ldi	r31, 0x00	; 0
    42f6:	80 81       	ld	r24, Z
    42f8:	28 2f       	mov	r18, r24
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
    42fe:	88 2f       	mov	r24, r24
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	a9 01       	movw	r20, r18
    4304:	02 c0       	rjmp	.+4      	; 0x430a <DIO_GetPinVal+0x6c>
    4306:	55 95       	asr	r21
    4308:	47 95       	ror	r20
    430a:	8a 95       	dec	r24
    430c:	e2 f7       	brpl	.-8      	; 0x4306 <DIO_GetPinVal+0x68>
    430e:	ca 01       	movw	r24, r20
    4310:	81 70       	andi	r24, 0x01	; 1
    4312:	89 83       	std	Y+1, r24	; 0x01
    4314:	35 c0       	rjmp	.+106    	; 0x4380 <DIO_GetPinVal+0xe2>
		break;

		case DIO_PORTB :
		val = GET_BIT(PINB,Pin);
    4316:	e6 e3       	ldi	r30, 0x36	; 54
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	80 81       	ld	r24, Z
    431c:	28 2f       	mov	r18, r24
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	8b 81       	ldd	r24, Y+3	; 0x03
    4322:	88 2f       	mov	r24, r24
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	a9 01       	movw	r20, r18
    4328:	02 c0       	rjmp	.+4      	; 0x432e <DIO_GetPinVal+0x90>
    432a:	55 95       	asr	r21
    432c:	47 95       	ror	r20
    432e:	8a 95       	dec	r24
    4330:	e2 f7       	brpl	.-8      	; 0x432a <DIO_GetPinVal+0x8c>
    4332:	ca 01       	movw	r24, r20
    4334:	81 70       	andi	r24, 0x01	; 1
    4336:	89 83       	std	Y+1, r24	; 0x01
    4338:	23 c0       	rjmp	.+70     	; 0x4380 <DIO_GetPinVal+0xe2>
		break;

		case DIO_PORTC :
		val = GET_BIT(PINC,Pin);
    433a:	e3 e3       	ldi	r30, 0x33	; 51
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	28 2f       	mov	r18, r24
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	8b 81       	ldd	r24, Y+3	; 0x03
    4346:	88 2f       	mov	r24, r24
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	a9 01       	movw	r20, r18
    434c:	02 c0       	rjmp	.+4      	; 0x4352 <DIO_GetPinVal+0xb4>
    434e:	55 95       	asr	r21
    4350:	47 95       	ror	r20
    4352:	8a 95       	dec	r24
    4354:	e2 f7       	brpl	.-8      	; 0x434e <DIO_GetPinVal+0xb0>
    4356:	ca 01       	movw	r24, r20
    4358:	81 70       	andi	r24, 0x01	; 1
    435a:	89 83       	std	Y+1, r24	; 0x01
    435c:	11 c0       	rjmp	.+34     	; 0x4380 <DIO_GetPinVal+0xe2>
		break;

		case DIO_PORTD :
		val = GET_BIT(PIND,Pin);
    435e:	e0 e3       	ldi	r30, 0x30	; 48
    4360:	f0 e0       	ldi	r31, 0x00	; 0
    4362:	80 81       	ld	r24, Z
    4364:	28 2f       	mov	r18, r24
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	8b 81       	ldd	r24, Y+3	; 0x03
    436a:	88 2f       	mov	r24, r24
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	a9 01       	movw	r20, r18
    4370:	02 c0       	rjmp	.+4      	; 0x4376 <DIO_GetPinVal+0xd8>
    4372:	55 95       	asr	r21
    4374:	47 95       	ror	r20
    4376:	8a 95       	dec	r24
    4378:	e2 f7       	brpl	.-8      	; 0x4372 <DIO_GetPinVal+0xd4>
    437a:	ca 01       	movw	r24, r20
    437c:	81 70       	andi	r24, 0x01	; 1
    437e:	89 83       	std	Y+1, r24	; 0x01
		default:
		break;

	}

	return val;
    4380:	89 81       	ldd	r24, Y+1	; 0x01

}
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	cf 91       	pop	r28
    438e:	df 91       	pop	r29
    4390:	08 95       	ret

00004392 <DIO_TogllePin>:

void DIO_TogllePin(uint8 Port ,uint8 Pin)
{
    4392:	df 93       	push	r29
    4394:	cf 93       	push	r28
    4396:	00 d0       	rcall	.+0      	; 0x4398 <DIO_TogllePin+0x6>
    4398:	00 d0       	rcall	.+0      	; 0x439a <DIO_TogllePin+0x8>
    439a:	cd b7       	in	r28, 0x3d	; 61
    439c:	de b7       	in	r29, 0x3e	; 62
    439e:	89 83       	std	Y+1, r24	; 0x01
    43a0:	6a 83       	std	Y+2, r22	; 0x02

	switch(Port)
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	28 2f       	mov	r18, r24
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	3c 83       	std	Y+4, r19	; 0x04
    43aa:	2b 83       	std	Y+3, r18	; 0x03
    43ac:	8b 81       	ldd	r24, Y+3	; 0x03
    43ae:	9c 81       	ldd	r25, Y+4	; 0x04
    43b0:	81 30       	cpi	r24, 0x01	; 1
    43b2:	91 05       	cpc	r25, r1
    43b4:	49 f1       	breq	.+82     	; 0x4408 <DIO_TogllePin+0x76>
    43b6:	2b 81       	ldd	r18, Y+3	; 0x03
    43b8:	3c 81       	ldd	r19, Y+4	; 0x04
    43ba:	22 30       	cpi	r18, 0x02	; 2
    43bc:	31 05       	cpc	r19, r1
    43be:	2c f4       	brge	.+10     	; 0x43ca <DIO_TogllePin+0x38>
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	9c 81       	ldd	r25, Y+4	; 0x04
    43c4:	00 97       	sbiw	r24, 0x00	; 0
    43c6:	61 f0       	breq	.+24     	; 0x43e0 <DIO_TogllePin+0x4e>
    43c8:	5a c0       	rjmp	.+180    	; 0x447e <DIO_TogllePin+0xec>
    43ca:	2b 81       	ldd	r18, Y+3	; 0x03
    43cc:	3c 81       	ldd	r19, Y+4	; 0x04
    43ce:	22 30       	cpi	r18, 0x02	; 2
    43d0:	31 05       	cpc	r19, r1
    43d2:	71 f1       	breq	.+92     	; 0x4430 <DIO_TogllePin+0x9e>
    43d4:	8b 81       	ldd	r24, Y+3	; 0x03
    43d6:	9c 81       	ldd	r25, Y+4	; 0x04
    43d8:	83 30       	cpi	r24, 0x03	; 3
    43da:	91 05       	cpc	r25, r1
    43dc:	e9 f1       	breq	.+122    	; 0x4458 <DIO_TogllePin+0xc6>
    43de:	4f c0       	rjmp	.+158    	; 0x447e <DIO_TogllePin+0xec>
			{
				case DIO_PORTA :
				TOGGLE_BIT(PORTA,Pin);
    43e0:	ab e3       	ldi	r26, 0x3B	; 59
    43e2:	b0 e0       	ldi	r27, 0x00	; 0
    43e4:	eb e3       	ldi	r30, 0x3B	; 59
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	80 81       	ld	r24, Z
    43ea:	48 2f       	mov	r20, r24
    43ec:	8a 81       	ldd	r24, Y+2	; 0x02
    43ee:	28 2f       	mov	r18, r24
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	02 2e       	mov	r0, r18
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <DIO_TogllePin+0x6c>
    43fa:	88 0f       	add	r24, r24
    43fc:	99 1f       	adc	r25, r25
    43fe:	0a 94       	dec	r0
    4400:	e2 f7       	brpl	.-8      	; 0x43fa <DIO_TogllePin+0x68>
    4402:	84 27       	eor	r24, r20
    4404:	8c 93       	st	X, r24
    4406:	3b c0       	rjmp	.+118    	; 0x447e <DIO_TogllePin+0xec>
				break;

				case DIO_PORTB :
				TOGGLE_BIT(PORTB,Pin);
    4408:	a8 e3       	ldi	r26, 0x38	; 56
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	e8 e3       	ldi	r30, 0x38	; 56
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	80 81       	ld	r24, Z
    4412:	48 2f       	mov	r20, r24
    4414:	8a 81       	ldd	r24, Y+2	; 0x02
    4416:	28 2f       	mov	r18, r24
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	02 2e       	mov	r0, r18
    4420:	02 c0       	rjmp	.+4      	; 0x4426 <DIO_TogllePin+0x94>
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	0a 94       	dec	r0
    4428:	e2 f7       	brpl	.-8      	; 0x4422 <DIO_TogllePin+0x90>
    442a:	84 27       	eor	r24, r20
    442c:	8c 93       	st	X, r24
    442e:	27 c0       	rjmp	.+78     	; 0x447e <DIO_TogllePin+0xec>
				break;

				case DIO_PORTC :
				TOGGLE_BIT(PORTC,Pin);
    4430:	a5 e3       	ldi	r26, 0x35	; 53
    4432:	b0 e0       	ldi	r27, 0x00	; 0
    4434:	e5 e3       	ldi	r30, 0x35	; 53
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	80 81       	ld	r24, Z
    443a:	48 2f       	mov	r20, r24
    443c:	8a 81       	ldd	r24, Y+2	; 0x02
    443e:	28 2f       	mov	r18, r24
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	02 2e       	mov	r0, r18
    4448:	02 c0       	rjmp	.+4      	; 0x444e <DIO_TogllePin+0xbc>
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	0a 94       	dec	r0
    4450:	e2 f7       	brpl	.-8      	; 0x444a <DIO_TogllePin+0xb8>
    4452:	84 27       	eor	r24, r20
    4454:	8c 93       	st	X, r24
    4456:	13 c0       	rjmp	.+38     	; 0x447e <DIO_TogllePin+0xec>
				break;

				case DIO_PORTD :
					TOGGLE_BIT(PORTD,Pin);
    4458:	a2 e3       	ldi	r26, 0x32	; 50
    445a:	b0 e0       	ldi	r27, 0x00	; 0
    445c:	e2 e3       	ldi	r30, 0x32	; 50
    445e:	f0 e0       	ldi	r31, 0x00	; 0
    4460:	80 81       	ld	r24, Z
    4462:	48 2f       	mov	r20, r24
    4464:	8a 81       	ldd	r24, Y+2	; 0x02
    4466:	28 2f       	mov	r18, r24
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	02 2e       	mov	r0, r18
    4470:	02 c0       	rjmp	.+4      	; 0x4476 <DIO_TogllePin+0xe4>
    4472:	88 0f       	add	r24, r24
    4474:	99 1f       	adc	r25, r25
    4476:	0a 94       	dec	r0
    4478:	e2 f7       	brpl	.-8      	; 0x4472 <DIO_TogllePin+0xe0>
    447a:	84 27       	eor	r24, r20
    447c:	8c 93       	st	X, r24

				default:

				break;
			}
}
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	cf 91       	pop	r28
    4488:	df 91       	pop	r29
    448a:	08 95       	ret

0000448c <DIO_SetPullUpRes>:


void DIO_SetPullUpRes(uint8 Port , uint8 Pin)
{
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	00 d0       	rcall	.+0      	; 0x4492 <DIO_SetPullUpRes+0x6>
    4492:	00 d0       	rcall	.+0      	; 0x4494 <DIO_SetPullUpRes+0x8>
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
    4498:	89 83       	std	Y+1, r24	; 0x01
    449a:	6a 83       	std	Y+2, r22	; 0x02

	switch (Port) {
    449c:	89 81       	ldd	r24, Y+1	; 0x01
    449e:	28 2f       	mov	r18, r24
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	3c 83       	std	Y+4, r19	; 0x04
    44a4:	2b 83       	std	Y+3, r18	; 0x03
    44a6:	8b 81       	ldd	r24, Y+3	; 0x03
    44a8:	9c 81       	ldd	r25, Y+4	; 0x04
    44aa:	81 30       	cpi	r24, 0x01	; 1
    44ac:	91 05       	cpc	r25, r1
    44ae:	49 f1       	breq	.+82     	; 0x4502 <DIO_SetPullUpRes+0x76>
    44b0:	2b 81       	ldd	r18, Y+3	; 0x03
    44b2:	3c 81       	ldd	r19, Y+4	; 0x04
    44b4:	22 30       	cpi	r18, 0x02	; 2
    44b6:	31 05       	cpc	r19, r1
    44b8:	2c f4       	brge	.+10     	; 0x44c4 <DIO_SetPullUpRes+0x38>
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	9c 81       	ldd	r25, Y+4	; 0x04
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	61 f0       	breq	.+24     	; 0x44da <DIO_SetPullUpRes+0x4e>
    44c2:	5a c0       	rjmp	.+180    	; 0x4578 <DIO_SetPullUpRes+0xec>
    44c4:	2b 81       	ldd	r18, Y+3	; 0x03
    44c6:	3c 81       	ldd	r19, Y+4	; 0x04
    44c8:	22 30       	cpi	r18, 0x02	; 2
    44ca:	31 05       	cpc	r19, r1
    44cc:	71 f1       	breq	.+92     	; 0x452a <DIO_SetPullUpRes+0x9e>
    44ce:	8b 81       	ldd	r24, Y+3	; 0x03
    44d0:	9c 81       	ldd	r25, Y+4	; 0x04
    44d2:	83 30       	cpi	r24, 0x03	; 3
    44d4:	91 05       	cpc	r25, r1
    44d6:	e9 f1       	breq	.+122    	; 0x4552 <DIO_SetPullUpRes+0xc6>
    44d8:	4f c0       	rjmp	.+158    	; 0x4578 <DIO_SetPullUpRes+0xec>
		case DIO_PORTA:
			SET_BIT(PORTA,Pin);
    44da:	ab e3       	ldi	r26, 0x3B	; 59
    44dc:	b0 e0       	ldi	r27, 0x00	; 0
    44de:	eb e3       	ldi	r30, 0x3B	; 59
    44e0:	f0 e0       	ldi	r31, 0x00	; 0
    44e2:	80 81       	ld	r24, Z
    44e4:	48 2f       	mov	r20, r24
    44e6:	8a 81       	ldd	r24, Y+2	; 0x02
    44e8:	28 2f       	mov	r18, r24
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	02 2e       	mov	r0, r18
    44f2:	02 c0       	rjmp	.+4      	; 0x44f8 <DIO_SetPullUpRes+0x6c>
    44f4:	88 0f       	add	r24, r24
    44f6:	99 1f       	adc	r25, r25
    44f8:	0a 94       	dec	r0
    44fa:	e2 f7       	brpl	.-8      	; 0x44f4 <DIO_SetPullUpRes+0x68>
    44fc:	84 2b       	or	r24, r20
    44fe:	8c 93       	st	X, r24
    4500:	3b c0       	rjmp	.+118    	; 0x4578 <DIO_SetPullUpRes+0xec>
			break;
		case DIO_PORTB:
			SET_BIT(PORTB,Pin);
    4502:	a8 e3       	ldi	r26, 0x38	; 56
    4504:	b0 e0       	ldi	r27, 0x00	; 0
    4506:	e8 e3       	ldi	r30, 0x38	; 56
    4508:	f0 e0       	ldi	r31, 0x00	; 0
    450a:	80 81       	ld	r24, Z
    450c:	48 2f       	mov	r20, r24
    450e:	8a 81       	ldd	r24, Y+2	; 0x02
    4510:	28 2f       	mov	r18, r24
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	02 2e       	mov	r0, r18
    451a:	02 c0       	rjmp	.+4      	; 0x4520 <DIO_SetPullUpRes+0x94>
    451c:	88 0f       	add	r24, r24
    451e:	99 1f       	adc	r25, r25
    4520:	0a 94       	dec	r0
    4522:	e2 f7       	brpl	.-8      	; 0x451c <DIO_SetPullUpRes+0x90>
    4524:	84 2b       	or	r24, r20
    4526:	8c 93       	st	X, r24
    4528:	27 c0       	rjmp	.+78     	; 0x4578 <DIO_SetPullUpRes+0xec>
					break;
		case DIO_PORTC:
			SET_BIT(PORTC,Pin);
    452a:	a5 e3       	ldi	r26, 0x35	; 53
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	e5 e3       	ldi	r30, 0x35	; 53
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	48 2f       	mov	r20, r24
    4536:	8a 81       	ldd	r24, Y+2	; 0x02
    4538:	28 2f       	mov	r18, r24
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	02 2e       	mov	r0, r18
    4542:	02 c0       	rjmp	.+4      	; 0x4548 <DIO_SetPullUpRes+0xbc>
    4544:	88 0f       	add	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	0a 94       	dec	r0
    454a:	e2 f7       	brpl	.-8      	; 0x4544 <DIO_SetPullUpRes+0xb8>
    454c:	84 2b       	or	r24, r20
    454e:	8c 93       	st	X, r24
    4550:	13 c0       	rjmp	.+38     	; 0x4578 <DIO_SetPullUpRes+0xec>
					break;
		case DIO_PORTD:
			SET_BIT(PORTD,Pin);
    4552:	a2 e3       	ldi	r26, 0x32	; 50
    4554:	b0 e0       	ldi	r27, 0x00	; 0
    4556:	e2 e3       	ldi	r30, 0x32	; 50
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	80 81       	ld	r24, Z
    455c:	48 2f       	mov	r20, r24
    455e:	8a 81       	ldd	r24, Y+2	; 0x02
    4560:	28 2f       	mov	r18, r24
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	02 2e       	mov	r0, r18
    456a:	02 c0       	rjmp	.+4      	; 0x4570 <DIO_SetPullUpRes+0xe4>
    456c:	88 0f       	add	r24, r24
    456e:	99 1f       	adc	r25, r25
    4570:	0a 94       	dec	r0
    4572:	e2 f7       	brpl	.-8      	; 0x456c <DIO_SetPullUpRes+0xe0>
    4574:	84 2b       	or	r24, r20
    4576:	8c 93       	st	X, r24
		default:
			break;
	}


}
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	cf 91       	pop	r28
    4582:	df 91       	pop	r29
    4584:	08 95       	ret

00004586 <INTERRUPT_ENABLE>:

#include "EXT_INTERRUPT.h"

void INTERRUPT_ENABLE()
{
    4586:	df 93       	push	r29
    4588:	cf 93       	push	r28
    458a:	cd b7       	in	r28, 0x3d	; 61
    458c:	de b7       	in	r29, 0x3e	; 62

#if GLOBAL_ENTERRUPT_STATUS == ENABLE_GLOBAL_INTERRUPT
	SET_BIT(SREG,7);
    458e:	af e5       	ldi	r26, 0x5F	; 95
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	ef e5       	ldi	r30, 0x5F	; 95
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	80 81       	ld	r24, Z
    4598:	80 68       	ori	r24, 0x80	; 128
    459a:	8c 93       	st	X, r24
#elif  GLOBAL_ENTERRUPT_STATUS == DISABLE_GLOBAL_INTERRUPT
	CLR_BIT(SREG,7);
#endif

}
    459c:	cf 91       	pop	r28
    459e:	df 91       	pop	r29
    45a0:	08 95       	ret

000045a2 <EXT_INT0_INIT>:

void EXT_INT0_INIT()
{
    45a2:	df 93       	push	r29
    45a4:	cf 93       	push	r28
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,EXTERNAL_INTERRUPT_0);
    45aa:	ab e5       	ldi	r26, 0x5B	; 91
    45ac:	b0 e0       	ldi	r27, 0x00	; 0
    45ae:	eb e5       	ldi	r30, 0x5B	; 91
    45b0:	f0 e0       	ldi	r31, 0x00	; 0
    45b2:	80 81       	ld	r24, Z
    45b4:	80 64       	ori	r24, 0x40	; 64
    45b6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);


#elif EXT_INT0_STATUS == EXTERNAL_INT0_RISING_EDGE
	SET_BIT(MCUCR,0);
    45b8:	a5 e5       	ldi	r26, 0x55	; 85
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	e5 e5       	ldi	r30, 0x55	; 85
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	81 60       	ori	r24, 0x01	; 1
    45c4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    45c6:	a5 e5       	ldi	r26, 0x55	; 85
    45c8:	b0 e0       	ldi	r27, 0x00	; 0
    45ca:	e5 e5       	ldi	r30, 0x55	; 85
    45cc:	f0 e0       	ldi	r31, 0x00	; 0
    45ce:	80 81       	ld	r24, Z
    45d0:	82 60       	ori	r24, 0x02	; 2
    45d2:	8c 93       	st	X, r24

#endif

}
    45d4:	cf 91       	pop	r28
    45d6:	df 91       	pop	r29
    45d8:	08 95       	ret

000045da <EXT_INT1_INIT>:

void EXT_INT1_INIT()
{
    45da:	df 93       	push	r29
    45dc:	cf 93       	push	r28
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,EXTERNAL_INTERRUPT_1);
    45e2:	ab e5       	ldi	r26, 0x5B	; 91
    45e4:	b0 e0       	ldi	r27, 0x00	; 0
    45e6:	eb e5       	ldi	r30, 0x5B	; 91
    45e8:	f0 e0       	ldi	r31, 0x00	; 0
    45ea:	80 81       	ld	r24, Z
    45ec:	80 68       	ori	r24, 0x80	; 128
    45ee:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);


#elif EXT_INT1_STATUS == EXTERNAL_INT1_RISING_EDGE
	SET_BIT(MCUCR,2);
    45f0:	a5 e5       	ldi	r26, 0x55	; 85
    45f2:	b0 e0       	ldi	r27, 0x00	; 0
    45f4:	e5 e5       	ldi	r30, 0x55	; 85
    45f6:	f0 e0       	ldi	r31, 0x00	; 0
    45f8:	80 81       	ld	r24, Z
    45fa:	84 60       	ori	r24, 0x04	; 4
    45fc:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    45fe:	a5 e5       	ldi	r26, 0x55	; 85
    4600:	b0 e0       	ldi	r27, 0x00	; 0
    4602:	e5 e5       	ldi	r30, 0x55	; 85
    4604:	f0 e0       	ldi	r31, 0x00	; 0
    4606:	80 81       	ld	r24, Z
    4608:	88 60       	ori	r24, 0x08	; 8
    460a:	8c 93       	st	X, r24

#endif

}
    460c:	cf 91       	pop	r28
    460e:	df 91       	pop	r29
    4610:	08 95       	ret

00004612 <EXT_INT2_INIT>:

void EXT_INT2_INIT()
{
    4612:	df 93       	push	r29
    4614:	cf 93       	push	r28
    4616:	cd b7       	in	r28, 0x3d	; 61
    4618:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,EXTERNAL_INTERRUPT_2);
    461a:	ab e5       	ldi	r26, 0x5B	; 91
    461c:	b0 e0       	ldi	r27, 0x00	; 0
    461e:	eb e5       	ldi	r30, 0x5B	; 91
    4620:	f0 e0       	ldi	r31, 0x00	; 0
    4622:	80 81       	ld	r24, Z
    4624:	80 62       	ori	r24, 0x20	; 32
    4626:	8c 93       	st	X, r24
	SET_BIT(MCUSCR,6);


#endif

}
    4628:	cf 91       	pop	r28
    462a:	df 91       	pop	r29
    462c:	08 95       	ret

0000462e <TIMER0_Init>:
volatile uint32 ICR_CAPT2 = 0;
volatile uint32 ICR_CAPT3 = 0;
volatile uint32 ICR_COUNTER = 0;

void TIMER0_Init()
{
    462e:	df 93       	push	r29
    4630:	cf 93       	push	r28
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0x00;
    4636:	e2 e5       	ldi	r30, 0x52	; 82
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	10 82       	st	Z, r1
	TCCR0 = 0x00;
    463c:	e3 e5       	ldi	r30, 0x53	; 83
    463e:	f0 e0       	ldi	r31, 0x00	; 0
    4640:	10 82       	st	Z, r1
	SET_BIT(TIMSK,0);
    4642:	a9 e5       	ldi	r26, 0x59	; 89
    4644:	b0 e0       	ldi	r27, 0x00	; 0
    4646:	e9 e5       	ldi	r30, 0x59	; 89
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	80 81       	ld	r24, Z
    464c:	81 60       	ori	r24, 0x01	; 1
    464e:	8c 93       	st	X, r24

}
    4650:	cf 91       	pop	r28
    4652:	df 91       	pop	r29
    4654:	08 95       	ret

00004656 <TIMER0_Start>:
void TIMER0_Start()
{
    4656:	df 93       	push	r29
    4658:	cf 93       	push	r28
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= 0x05;
    465e:	a3 e5       	ldi	r26, 0x53	; 83
    4660:	b0 e0       	ldi	r27, 0x00	; 0
    4662:	e3 e5       	ldi	r30, 0x53	; 83
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	80 81       	ld	r24, Z
    4668:	85 60       	ori	r24, 0x05	; 5
    466a:	8c 93       	st	X, r24

}
    466c:	cf 91       	pop	r28
    466e:	df 91       	pop	r29
    4670:	08 95       	ret

00004672 <TIMER0_Stop>:
void TIMER0_Stop()
{
    4672:	df 93       	push	r29
    4674:	cf 93       	push	r28
    4676:	cd b7       	in	r28, 0x3d	; 61
    4678:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00;
    467a:	e3 e5       	ldi	r30, 0x53	; 83
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	10 82       	st	Z, r1
}
    4680:	cf 91       	pop	r28
    4682:	df 91       	pop	r29
    4684:	08 95       	ret

00004686 <TIMER0_Delay_ms>:

void TIMER0_Delay_ms(uint8 delay)
{
    4686:	df 93       	push	r29
    4688:	cf 93       	push	r28
    468a:	cd b7       	in	r28, 0x3d	; 61
    468c:	de b7       	in	r29, 0x3e	; 62
    468e:	29 97       	sbiw	r28, 0x09	; 9
    4690:	0f b6       	in	r0, 0x3f	; 63
    4692:	f8 94       	cli
    4694:	de bf       	out	0x3e, r29	; 62
    4696:	0f be       	out	0x3f, r0	; 63
    4698:	cd bf       	out	0x3d, r28	; 61
    469a:	89 87       	std	Y+9, r24	; 0x09
	uint32 Tick_Time = (1024 / 8) ;
    469c:	80 e8       	ldi	r24, 0x80	; 128
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	a0 e0       	ldi	r26, 0x00	; 0
    46a2:	b0 e0       	ldi	r27, 0x00	; 0
    46a4:	8d 83       	std	Y+5, r24	; 0x05
    46a6:	9e 83       	std	Y+6, r25	; 0x06
    46a8:	af 83       	std	Y+7, r26	; 0x07
    46aa:	b8 87       	std	Y+8, r27	; 0x08

	uint32 Total_Ticks = (delay * 1000) / Tick_Time ;
    46ac:	89 85       	ldd	r24, Y+9	; 0x09
    46ae:	28 2f       	mov	r18, r24
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	88 ee       	ldi	r24, 0xE8	; 232
    46b4:	93 e0       	ldi	r25, 0x03	; 3
    46b6:	ac 01       	movw	r20, r24
    46b8:	24 9f       	mul	r18, r20
    46ba:	c0 01       	movw	r24, r0
    46bc:	25 9f       	mul	r18, r21
    46be:	90 0d       	add	r25, r0
    46c0:	34 9f       	mul	r19, r20
    46c2:	90 0d       	add	r25, r0
    46c4:	11 24       	eor	r1, r1
    46c6:	aa 27       	eor	r26, r26
    46c8:	97 fd       	sbrc	r25, 7
    46ca:	a0 95       	com	r26
    46cc:	ba 2f       	mov	r27, r26
    46ce:	2d 81       	ldd	r18, Y+5	; 0x05
    46d0:	3e 81       	ldd	r19, Y+6	; 0x06
    46d2:	4f 81       	ldd	r20, Y+7	; 0x07
    46d4:	58 85       	ldd	r21, Y+8	; 0x08
    46d6:	bc 01       	movw	r22, r24
    46d8:	cd 01       	movw	r24, r26
    46da:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__udivmodsi4>
    46de:	da 01       	movw	r26, r20
    46e0:	c9 01       	movw	r24, r18
    46e2:	89 83       	std	Y+1, r24	; 0x01
    46e4:	9a 83       	std	Y+2, r25	; 0x02
    46e6:	ab 83       	std	Y+3, r26	; 0x03
    46e8:	bc 83       	std	Y+4, r27	; 0x04

	Number_OVF = Total_Ticks / 256 ;
    46ea:	89 81       	ldd	r24, Y+1	; 0x01
    46ec:	9a 81       	ldd	r25, Y+2	; 0x02
    46ee:	ab 81       	ldd	r26, Y+3	; 0x03
    46f0:	bc 81       	ldd	r27, Y+4	; 0x04
    46f2:	89 2f       	mov	r24, r25
    46f4:	9a 2f       	mov	r25, r26
    46f6:	ab 2f       	mov	r26, r27
    46f8:	bb 27       	eor	r27, r27
    46fa:	80 93 ed 02 	sts	0x02ED, r24
    46fe:	90 93 ee 02 	sts	0x02EE, r25
    4702:	a0 93 ef 02 	sts	0x02EF, r26
    4706:	b0 93 f0 02 	sts	0x02F0, r27

	INIAL_VALUE  =   256 - (Total_Ticks % 256) ;
    470a:	89 81       	ldd	r24, Y+1	; 0x01
    470c:	9a 81       	ldd	r25, Y+2	; 0x02
    470e:	ab 81       	ldd	r26, Y+3	; 0x03
    4710:	bc 81       	ldd	r27, Y+4	; 0x04
    4712:	9c 01       	movw	r18, r24
    4714:	ad 01       	movw	r20, r26
    4716:	30 70       	andi	r19, 0x00	; 0
    4718:	40 70       	andi	r20, 0x00	; 0
    471a:	50 70       	andi	r21, 0x00	; 0
    471c:	80 e0       	ldi	r24, 0x00	; 0
    471e:	91 e0       	ldi	r25, 0x01	; 1
    4720:	a0 e0       	ldi	r26, 0x00	; 0
    4722:	b0 e0       	ldi	r27, 0x00	; 0
    4724:	82 1b       	sub	r24, r18
    4726:	93 0b       	sbc	r25, r19
    4728:	a4 0b       	sbc	r26, r20
    472a:	b5 0b       	sbc	r27, r21
    472c:	80 93 f1 02 	sts	0x02F1, r24
    4730:	90 93 f2 02 	sts	0x02F2, r25
    4734:	a0 93 f3 02 	sts	0x02F3, r26
    4738:	b0 93 f4 02 	sts	0x02F4, r27

	TCNT0 = INIAL_VALUE ;
    473c:	e2 e5       	ldi	r30, 0x52	; 82
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 91 f1 02 	lds	r24, 0x02F1
    4744:	90 91 f2 02 	lds	r25, 0x02F2
    4748:	a0 91 f3 02 	lds	r26, 0x02F3
    474c:	b0 91 f4 02 	lds	r27, 0x02F4
    4750:	80 83       	st	Z, r24

	Number_OVF++;
    4752:	80 91 ed 02 	lds	r24, 0x02ED
    4756:	90 91 ee 02 	lds	r25, 0x02EE
    475a:	a0 91 ef 02 	lds	r26, 0x02EF
    475e:	b0 91 f0 02 	lds	r27, 0x02F0
    4762:	01 96       	adiw	r24, 0x01	; 1
    4764:	a1 1d       	adc	r26, r1
    4766:	b1 1d       	adc	r27, r1
    4768:	80 93 ed 02 	sts	0x02ED, r24
    476c:	90 93 ee 02 	sts	0x02EE, r25
    4770:	a0 93 ef 02 	sts	0x02EF, r26
    4774:	b0 93 f0 02 	sts	0x02F0, r27


}
    4778:	29 96       	adiw	r28, 0x09	; 9
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	f8 94       	cli
    477e:	de bf       	out	0x3e, r29	; 62
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	cd bf       	out	0x3d, r28	; 61
    4784:	cf 91       	pop	r28
    4786:	df 91       	pop	r29
    4788:	08 95       	ret

0000478a <TIMER0_CTC_Init>:


void TIMER0_CTC_Init()
{
    478a:	df 93       	push	r29
    478c:	cf 93       	push	r28
    478e:	cd b7       	in	r28, 0x3d	; 61
    4790:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    4792:	e2 e5       	ldi	r30, 0x52	; 82
    4794:	f0 e0       	ldi	r31, 0x00	; 0
    4796:	10 82       	st	Z, r1
	TCCR0 |= 0x08;
    4798:	a3 e5       	ldi	r26, 0x53	; 83
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	e3 e5       	ldi	r30, 0x53	; 83
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	80 81       	ld	r24, Z
    47a2:	88 60       	ori	r24, 0x08	; 8
    47a4:	8c 93       	st	X, r24
	SET_BIT(TIMSK,1);
    47a6:	a9 e5       	ldi	r26, 0x59	; 89
    47a8:	b0 e0       	ldi	r27, 0x00	; 0
    47aa:	e9 e5       	ldi	r30, 0x59	; 89
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	80 81       	ld	r24, Z
    47b0:	82 60       	ori	r24, 0x02	; 2
    47b2:	8c 93       	st	X, r24

}
    47b4:	cf 91       	pop	r28
    47b6:	df 91       	pop	r29
    47b8:	08 95       	ret

000047ba <TIMER0_CTC_delay_ms>:
void TIMER0_CTC_delay_ms(uint32 delay)
{
    47ba:	ef 92       	push	r14
    47bc:	ff 92       	push	r15
    47be:	0f 93       	push	r16
    47c0:	1f 93       	push	r17
    47c2:	df 93       	push	r29
    47c4:	cf 93       	push	r28
    47c6:	cd b7       	in	r28, 0x3d	; 61
    47c8:	de b7       	in	r29, 0x3e	; 62
    47ca:	2a 97       	sbiw	r28, 0x0a	; 10
    47cc:	0f b6       	in	r0, 0x3f	; 63
    47ce:	f8 94       	cli
    47d0:	de bf       	out	0x3e, r29	; 62
    47d2:	0f be       	out	0x3f, r0	; 63
    47d4:	cd bf       	out	0x3d, r28	; 61
    47d6:	6f 83       	std	Y+7, r22	; 0x07
    47d8:	78 87       	std	Y+8, r23	; 0x08
    47da:	89 87       	std	Y+9, r24	; 0x09
    47dc:	9a 87       	std	Y+10, r25	; 0x0a
	uint16 tick_time = 64/8; //64
    47de:	88 e0       	ldi	r24, 0x08	; 8
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	9e 83       	std	Y+6, r25	; 0x06
    47e4:	8d 83       	std	Y+5, r24	; 0x05

	uint32 num_ticks = (delay*1000) / tick_time;
    47e6:	8f 81       	ldd	r24, Y+7	; 0x07
    47e8:	98 85       	ldd	r25, Y+8	; 0x08
    47ea:	a9 85       	ldd	r26, Y+9	; 0x09
    47ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    47ee:	28 ee       	ldi	r18, 0xE8	; 232
    47f0:	33 e0       	ldi	r19, 0x03	; 3
    47f2:	40 e0       	ldi	r20, 0x00	; 0
    47f4:	50 e0       	ldi	r21, 0x00	; 0
    47f6:	bc 01       	movw	r22, r24
    47f8:	cd 01       	movw	r24, r26
    47fa:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__mulsi3>
    47fe:	7b 01       	movw	r14, r22
    4800:	8c 01       	movw	r16, r24
    4802:	8d 81       	ldd	r24, Y+5	; 0x05
    4804:	9e 81       	ldd	r25, Y+6	; 0x06
    4806:	9c 01       	movw	r18, r24
    4808:	40 e0       	ldi	r20, 0x00	; 0
    480a:	50 e0       	ldi	r21, 0x00	; 0
    480c:	c8 01       	movw	r24, r16
    480e:	b7 01       	movw	r22, r14
    4810:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__udivmodsi4>
    4814:	da 01       	movw	r26, r20
    4816:	c9 01       	movw	r24, r18
    4818:	89 83       	std	Y+1, r24	; 0x01
    481a:	9a 83       	std	Y+2, r25	; 0x02
    481c:	ab 83       	std	Y+3, r26	; 0x03
    481e:	bc 83       	std	Y+4, r27	; 0x04

	 OCR0=100;
    4820:	ec e5       	ldi	r30, 0x5C	; 92
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	84 e6       	ldi	r24, 0x64	; 100
    4826:	80 83       	st	Z, r24

	 Number_OVF = num_ticks/OCR0;
    4828:	ec e5       	ldi	r30, 0x5C	; 92
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	80 81       	ld	r24, Z
    482e:	28 2f       	mov	r18, r24
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	40 e0       	ldi	r20, 0x00	; 0
    4834:	50 e0       	ldi	r21, 0x00	; 0
    4836:	89 81       	ldd	r24, Y+1	; 0x01
    4838:	9a 81       	ldd	r25, Y+2	; 0x02
    483a:	ab 81       	ldd	r26, Y+3	; 0x03
    483c:	bc 81       	ldd	r27, Y+4	; 0x04
    483e:	bc 01       	movw	r22, r24
    4840:	cd 01       	movw	r24, r26
    4842:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__udivmodsi4>
    4846:	da 01       	movw	r26, r20
    4848:	c9 01       	movw	r24, r18
    484a:	80 93 ed 02 	sts	0x02ED, r24
    484e:	90 93 ee 02 	sts	0x02EE, r25
    4852:	a0 93 ef 02 	sts	0x02EF, r26
    4856:	b0 93 f0 02 	sts	0x02F0, r27



}
    485a:	2a 96       	adiw	r28, 0x0a	; 10
    485c:	0f b6       	in	r0, 0x3f	; 63
    485e:	f8 94       	cli
    4860:	de bf       	out	0x3e, r29	; 62
    4862:	0f be       	out	0x3f, r0	; 63
    4864:	cd bf       	out	0x3d, r28	; 61
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	1f 91       	pop	r17
    486c:	0f 91       	pop	r16
    486e:	ff 90       	pop	r15
    4870:	ef 90       	pop	r14
    4872:	08 95       	ret

00004874 <TIMER0_CTC_Start>:
void TIMER0_CTC_Start()
{
    4874:	df 93       	push	r29
    4876:	cf 93       	push	r28
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= 0x03;
    487c:	a3 e5       	ldi	r26, 0x53	; 83
    487e:	b0 e0       	ldi	r27, 0x00	; 0
    4880:	e3 e5       	ldi	r30, 0x53	; 83
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	80 81       	ld	r24, Z
    4886:	83 60       	ori	r24, 0x03	; 3
    4888:	8c 93       	st	X, r24
}
    488a:	cf 91       	pop	r28
    488c:	df 91       	pop	r29
    488e:	08 95       	ret

00004890 <TIMER0_CTC_Stop>:
void TIMER0_CTC_Stop()
{
    4890:	df 93       	push	r29
    4892:	cf 93       	push	r28
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= 0x00;
    4898:	e3 e5       	ldi	r30, 0x53	; 83
    489a:	f0 e0       	ldi	r31, 0x00	; 0
    489c:	a3 e5       	ldi	r26, 0x53	; 83
    489e:	b0 e0       	ldi	r27, 0x00	; 0
    48a0:	8c 91       	ld	r24, X
    48a2:	80 83       	st	Z, r24
}
    48a4:	cf 91       	pop	r28
    48a6:	df 91       	pop	r29
    48a8:	08 95       	ret

000048aa <PWM0_INIT>:



void PWM0_INIT()
{
    48aa:	df 93       	push	r29
    48ac:	cf 93       	push	r28
    48ae:	cd b7       	in	r28, 0x3d	; 61
    48b0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,3); //output
    48b2:	a7 e3       	ldi	r26, 0x37	; 55
    48b4:	b0 e0       	ldi	r27, 0x00	; 0
    48b6:	e7 e3       	ldi	r30, 0x37	; 55
    48b8:	f0 e0       	ldi	r31, 0x00	; 0
    48ba:	80 81       	ld	r24, Z
    48bc:	88 60       	ori	r24, 0x08	; 8
    48be:	8c 93       	st	X, r24
	TCCR0 |= 0x68;
    48c0:	a3 e5       	ldi	r26, 0x53	; 83
    48c2:	b0 e0       	ldi	r27, 0x00	; 0
    48c4:	e3 e5       	ldi	r30, 0x53	; 83
    48c6:	f0 e0       	ldi	r31, 0x00	; 0
    48c8:	80 81       	ld	r24, Z
    48ca:	88 66       	ori	r24, 0x68	; 104
    48cc:	8c 93       	st	X, r24
}
    48ce:	cf 91       	pop	r28
    48d0:	df 91       	pop	r29
    48d2:	08 95       	ret

000048d4 <PWM0_Generate>:

void PWM0_Generate(uint16 Duty_Cycle)
{
    48d4:	df 93       	push	r29
    48d6:	cf 93       	push	r28
    48d8:	00 d0       	rcall	.+0      	; 0x48da <PWM0_Generate+0x6>
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	9a 83       	std	Y+2, r25	; 0x02
    48e0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = ((Duty_Cycle * 256)/100)-1;
    48e2:	ec e5       	ldi	r30, 0x5C	; 92
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ea:	98 2f       	mov	r25, r24
    48ec:	88 27       	eor	r24, r24
    48ee:	24 e6       	ldi	r18, 0x64	; 100
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	b9 01       	movw	r22, r18
    48f4:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <__udivmodhi4>
    48f8:	cb 01       	movw	r24, r22
    48fa:	81 50       	subi	r24, 0x01	; 1
    48fc:	80 83       	st	Z, r24
}
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	cf 91       	pop	r28
    4904:	df 91       	pop	r29
    4906:	08 95       	ret

00004908 <PWM0_Start>:
void PWM0_Start()
{
    4908:	df 93       	push	r29
    490a:	cf 93       	push	r28
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |=0x05;
    4910:	a3 e5       	ldi	r26, 0x53	; 83
    4912:	b0 e0       	ldi	r27, 0x00	; 0
    4914:	e3 e5       	ldi	r30, 0x53	; 83
    4916:	f0 e0       	ldi	r31, 0x00	; 0
    4918:	80 81       	ld	r24, Z
    491a:	85 60       	ori	r24, 0x05	; 5
    491c:	8c 93       	st	X, r24
}
    491e:	cf 91       	pop	r28
    4920:	df 91       	pop	r29
    4922:	08 95       	ret

00004924 <PWM1_INIT>:


void PWM1_INIT()
{
    4924:	df 93       	push	r29
    4926:	cf 93       	push	r28
    4928:	cd b7       	in	r28, 0x3d	; 61
    492a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,5);
    492c:	a1 e3       	ldi	r26, 0x31	; 49
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	e1 e3       	ldi	r30, 0x31	; 49
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	80 81       	ld	r24, Z
    4936:	80 62       	ori	r24, 0x20	; 32
    4938:	8c 93       	st	X, r24
	TCCR1B |=0x1B;
    493a:	ae e4       	ldi	r26, 0x4E	; 78
    493c:	b0 e0       	ldi	r27, 0x00	; 0
    493e:	ee e4       	ldi	r30, 0x4E	; 78
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	80 81       	ld	r24, Z
    4944:	8b 61       	ori	r24, 0x1B	; 27
    4946:	8c 93       	st	X, r24
	TCCR1A |=0x82;
    4948:	af e4       	ldi	r26, 0x4F	; 79
    494a:	b0 e0       	ldi	r27, 0x00	; 0
    494c:	ef e4       	ldi	r30, 0x4F	; 79
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	82 68       	ori	r24, 0x82	; 130
    4954:	8c 93       	st	X, r24
	ICR1 = 4999;
    4956:	e6 e4       	ldi	r30, 0x46	; 70
    4958:	f0 e0       	ldi	r31, 0x00	; 0
    495a:	87 e8       	ldi	r24, 0x87	; 135
    495c:	93 e1       	ldi	r25, 0x13	; 19
    495e:	91 83       	std	Z+1, r25	; 0x01
    4960:	80 83       	st	Z, r24
}
    4962:	cf 91       	pop	r28
    4964:	df 91       	pop	r29
    4966:	08 95       	ret

00004968 <PWM1_Generate>:

void PWM1_Generate(uint16 Duty_Cycle)
{
    4968:	df 93       	push	r29
    496a:	cf 93       	push	r28
    496c:	00 d0       	rcall	.+0      	; 0x496e <PWM1_Generate+0x6>
    496e:	cd b7       	in	r28, 0x3d	; 61
    4970:	de b7       	in	r29, 0x3e	; 62
    4972:	9a 83       	std	Y+2, r25	; 0x02
    4974:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = ((Duty_Cycle * 4999)/100)-1;
    4976:	ea e4       	ldi	r30, 0x4A	; 74
    4978:	f0 e0       	ldi	r31, 0x00	; 0
    497a:	29 81       	ldd	r18, Y+1	; 0x01
    497c:	3a 81       	ldd	r19, Y+2	; 0x02
    497e:	87 e8       	ldi	r24, 0x87	; 135
    4980:	93 e1       	ldi	r25, 0x13	; 19
    4982:	ac 01       	movw	r20, r24
    4984:	24 9f       	mul	r18, r20
    4986:	c0 01       	movw	r24, r0
    4988:	25 9f       	mul	r18, r21
    498a:	90 0d       	add	r25, r0
    498c:	34 9f       	mul	r19, r20
    498e:	90 0d       	add	r25, r0
    4990:	11 24       	eor	r1, r1
    4992:	24 e6       	ldi	r18, 0x64	; 100
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	b9 01       	movw	r22, r18
    4998:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <__udivmodhi4>
    499c:	cb 01       	movw	r24, r22
    499e:	01 97       	sbiw	r24, 0x01	; 1
    49a0:	91 83       	std	Z+1, r25	; 0x01
    49a2:	80 83       	st	Z, r24
}
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	08 95       	ret

000049ae <PWM_Set_OCR>:
void PWM_Set_OCR(uint16 degree)
{
    49ae:	df 93       	push	r29
    49b0:	cf 93       	push	r28
    49b2:	00 d0       	rcall	.+0      	; 0x49b4 <PWM_Set_OCR+0x6>
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	9a 83       	std	Y+2, r25	; 0x02
    49ba:	89 83       	std	Y+1, r24	; 0x01

	OCR1A = degree;
    49bc:	ea e4       	ldi	r30, 0x4A	; 74
    49be:	f0 e0       	ldi	r31, 0x00	; 0
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	9a 81       	ldd	r25, Y+2	; 0x02
    49c4:	91 83       	std	Z+1, r25	; 0x01
    49c6:	80 83       	st	Z, r24
}
    49c8:	0f 90       	pop	r0
    49ca:	0f 90       	pop	r0
    49cc:	cf 91       	pop	r28
    49ce:	df 91       	pop	r29
    49d0:	08 95       	ret

000049d2 <PWM2_init>:



void PWM2_init()
{
    49d2:	df 93       	push	r29
    49d4:	cf 93       	push	r28
    49d6:	cd b7       	in	r28, 0x3d	; 61
    49d8:	de b7       	in	r29, 0x3e	; 62

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
    49da:	e3 e5       	ldi	r30, 0x53	; 83
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	89 e6       	ldi	r24, 0x69	; 105
    49e0:	80 83       	st	Z, r24
	DDRB|=(1<<PB3);
    49e2:	a7 e3       	ldi	r26, 0x37	; 55
    49e4:	b0 e0       	ldi	r27, 0x00	; 0
    49e6:	e7 e3       	ldi	r30, 0x37	; 55
    49e8:	f0 e0       	ldi	r31, 0x00	; 0
    49ea:	80 81       	ld	r24, Z
    49ec:	88 60       	ori	r24, 0x08	; 8
    49ee:	8c 93       	st	X, r24
}
    49f0:	cf 91       	pop	r28
    49f2:	df 91       	pop	r29
    49f4:	08 95       	ret

000049f6 <PWM2_Set_OCR>:
void PWM2_Set_OCR(uint16 degree)
{
    49f6:	df 93       	push	r29
    49f8:	cf 93       	push	r28
    49fa:	00 d0       	rcall	.+0      	; 0x49fc <PWM2_Set_OCR+0x6>
    49fc:	cd b7       	in	r28, 0x3d	; 61
    49fe:	de b7       	in	r29, 0x3e	; 62
    4a00:	9a 83       	std	Y+2, r25	; 0x02
    4a02:	89 83       	std	Y+1, r24	; 0x01

	OCR0= degree;
    4a04:	ec e5       	ldi	r30, 0x5C	; 92
    4a06:	f0 e0       	ldi	r31, 0x00	; 0
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	80 83       	st	Z, r24
}
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	cf 91       	pop	r28
    4a12:	df 91       	pop	r29
    4a14:	08 95       	ret

00004a16 <ICU_Init>:



void ICU_Init()
{
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62
	ICR1=0x0000;
    4a1e:	e6 e4       	ldi	r30, 0x46	; 70
    4a20:	f0 e0       	ldi	r31, 0x00	; 0
    4a22:	11 82       	std	Z+1, r1	; 0x01
    4a24:	10 82       	st	Z, r1
	CLR_BIT(DDRD,6);
    4a26:	a1 e3       	ldi	r26, 0x31	; 49
    4a28:	b0 e0       	ldi	r27, 0x00	; 0
    4a2a:	e1 e3       	ldi	r30, 0x31	; 49
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	80 81       	ld	r24, Z
    4a30:	8f 7b       	andi	r24, 0xBF	; 191
    4a32:	8c 93       	st	X, r24
	TCCR1B |= 0x41;
    4a34:	ae e4       	ldi	r26, 0x4E	; 78
    4a36:	b0 e0       	ldi	r27, 0x00	; 0
    4a38:	ee e4       	ldi	r30, 0x4E	; 78
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	81 64       	ori	r24, 0x41	; 65
    4a40:	8c 93       	st	X, r24
	TCCR1A = 0x00;
    4a42:	ef e4       	ldi	r30, 0x4F	; 79
    4a44:	f0 e0       	ldi	r31, 0x00	; 0
    4a46:	10 82       	st	Z, r1
   SET_BIT(TIMSK,2);
    4a48:	a9 e5       	ldi	r26, 0x59	; 89
    4a4a:	b0 e0       	ldi	r27, 0x00	; 0
    4a4c:	e9 e5       	ldi	r30, 0x59	; 89
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	80 81       	ld	r24, Z
    4a52:	84 60       	ori	r24, 0x04	; 4
    4a54:	8c 93       	st	X, r24
   SET_BIT(TIMSK,5);
    4a56:	a9 e5       	ldi	r26, 0x59	; 89
    4a58:	b0 e0       	ldi	r27, 0x00	; 0
    4a5a:	e9 e5       	ldi	r30, 0x59	; 89
    4a5c:	f0 e0       	ldi	r31, 0x00	; 0
    4a5e:	80 81       	ld	r24, Z
    4a60:	80 62       	ori	r24, 0x20	; 32
    4a62:	8c 93       	st	X, r24

}
    4a64:	cf 91       	pop	r28
    4a66:	df 91       	pop	r29
    4a68:	08 95       	ret

00004a6a <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    4a6a:	1f 92       	push	r1
    4a6c:	0f 92       	push	r0
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	0f 92       	push	r0
    4a72:	11 24       	eor	r1, r1
    4a74:	8f 93       	push	r24
    4a76:	9f 93       	push	r25
    4a78:	af 93       	push	r26
    4a7a:	bf 93       	push	r27
    4a7c:	df 93       	push	r29
    4a7e:	cf 93       	push	r28
    4a80:	cd b7       	in	r28, 0x3d	; 61
    4a82:	de b7       	in	r29, 0x3e	; 62
	Num_OVF1++;
    4a84:	80 91 f5 02 	lds	r24, 0x02F5
    4a88:	90 91 f6 02 	lds	r25, 0x02F6
    4a8c:	a0 91 f7 02 	lds	r26, 0x02F7
    4a90:	b0 91 f8 02 	lds	r27, 0x02F8
    4a94:	01 96       	adiw	r24, 0x01	; 1
    4a96:	a1 1d       	adc	r26, r1
    4a98:	b1 1d       	adc	r27, r1
    4a9a:	80 93 f5 02 	sts	0x02F5, r24
    4a9e:	90 93 f6 02 	sts	0x02F6, r25
    4aa2:	a0 93 f7 02 	sts	0x02F7, r26
    4aa6:	b0 93 f8 02 	sts	0x02F8, r27

}
    4aaa:	cf 91       	pop	r28
    4aac:	df 91       	pop	r29
    4aae:	bf 91       	pop	r27
    4ab0:	af 91       	pop	r26
    4ab2:	9f 91       	pop	r25
    4ab4:	8f 91       	pop	r24
    4ab6:	0f 90       	pop	r0
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	0f 90       	pop	r0
    4abc:	1f 90       	pop	r1
    4abe:	18 95       	reti

00004ac0 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	ef 92       	push	r14
    4acc:	ff 92       	push	r15
    4ace:	0f 93       	push	r16
    4ad0:	1f 93       	push	r17
    4ad2:	2f 93       	push	r18
    4ad4:	3f 93       	push	r19
    4ad6:	4f 93       	push	r20
    4ad8:	5f 93       	push	r21
    4ada:	6f 93       	push	r22
    4adc:	7f 93       	push	r23
    4ade:	8f 93       	push	r24
    4ae0:	9f 93       	push	r25
    4ae2:	af 93       	push	r26
    4ae4:	bf 93       	push	r27
    4ae6:	ef 93       	push	r30
    4ae8:	ff 93       	push	r31
    4aea:	df 93       	push	r29
    4aec:	cf 93       	push	r28
    4aee:	cd b7       	in	r28, 0x3d	; 61
    4af0:	de b7       	in	r29, 0x3e	; 62

	ICR_COUNTER++;
    4af2:	80 91 05 03 	lds	r24, 0x0305
    4af6:	90 91 06 03 	lds	r25, 0x0306
    4afa:	a0 91 07 03 	lds	r26, 0x0307
    4afe:	b0 91 08 03 	lds	r27, 0x0308
    4b02:	01 96       	adiw	r24, 0x01	; 1
    4b04:	a1 1d       	adc	r26, r1
    4b06:	b1 1d       	adc	r27, r1
    4b08:	80 93 05 03 	sts	0x0305, r24
    4b0c:	90 93 06 03 	sts	0x0306, r25
    4b10:	a0 93 07 03 	sts	0x0307, r26
    4b14:	b0 93 08 03 	sts	0x0308, r27
	if(ICR_COUNTER==1)
    4b18:	80 91 05 03 	lds	r24, 0x0305
    4b1c:	90 91 06 03 	lds	r25, 0x0306
    4b20:	a0 91 07 03 	lds	r26, 0x0307
    4b24:	b0 91 08 03 	lds	r27, 0x0308
    4b28:	81 30       	cpi	r24, 0x01	; 1
    4b2a:	91 05       	cpc	r25, r1
    4b2c:	a1 05       	cpc	r26, r1
    4b2e:	b1 05       	cpc	r27, r1
    4b30:	f9 f4       	brne	.+62     	; 0x4b70 <__vector_6+0xb0>
	{
		Num_OVF1=0;
    4b32:	10 92 f5 02 	sts	0x02F5, r1
    4b36:	10 92 f6 02 	sts	0x02F6, r1
    4b3a:	10 92 f7 02 	sts	0x02F7, r1
    4b3e:	10 92 f8 02 	sts	0x02F8, r1
		ICR_CAPT1 = ICR1;
    4b42:	e6 e4       	ldi	r30, 0x46	; 70
    4b44:	f0 e0       	ldi	r31, 0x00	; 0
    4b46:	80 81       	ld	r24, Z
    4b48:	91 81       	ldd	r25, Z+1	; 0x01
    4b4a:	cc 01       	movw	r24, r24
    4b4c:	a0 e0       	ldi	r26, 0x00	; 0
    4b4e:	b0 e0       	ldi	r27, 0x00	; 0
    4b50:	80 93 f9 02 	sts	0x02F9, r24
    4b54:	90 93 fa 02 	sts	0x02FA, r25
    4b58:	a0 93 fb 02 	sts	0x02FB, r26
    4b5c:	b0 93 fc 02 	sts	0x02FC, r27
		CLR_BIT(TCCR1B,6);
    4b60:	ae e4       	ldi	r26, 0x4E	; 78
    4b62:	b0 e0       	ldi	r27, 0x00	; 0
    4b64:	ee e4       	ldi	r30, 0x4E	; 78
    4b66:	f0 e0       	ldi	r31, 0x00	; 0
    4b68:	80 81       	ld	r24, Z
    4b6a:	8f 7b       	andi	r24, 0xBF	; 191
    4b6c:	8c 93       	st	X, r24
    4b6e:	73 c0       	rjmp	.+230    	; 0x4c56 <__vector_6+0x196>
	}
	else if(ICR_COUNTER==2)
    4b70:	80 91 05 03 	lds	r24, 0x0305
    4b74:	90 91 06 03 	lds	r25, 0x0306
    4b78:	a0 91 07 03 	lds	r26, 0x0307
    4b7c:	b0 91 08 03 	lds	r27, 0x0308
    4b80:	82 30       	cpi	r24, 0x02	; 2
    4b82:	91 05       	cpc	r25, r1
    4b84:	a1 05       	cpc	r26, r1
    4b86:	b1 05       	cpc	r27, r1
    4b88:	69 f5       	brne	.+90     	; 0x4be4 <__vector_6+0x124>
	{
		ICR_CAPT2 = ICR1 +(Num_OVF1*65535);//65535
    4b8a:	e6 e4       	ldi	r30, 0x46	; 70
    4b8c:	f0 e0       	ldi	r31, 0x00	; 0
    4b8e:	80 81       	ld	r24, Z
    4b90:	91 81       	ldd	r25, Z+1	; 0x01
    4b92:	7c 01       	movw	r14, r24
    4b94:	00 e0       	ldi	r16, 0x00	; 0
    4b96:	10 e0       	ldi	r17, 0x00	; 0
    4b98:	80 91 f5 02 	lds	r24, 0x02F5
    4b9c:	90 91 f6 02 	lds	r25, 0x02F6
    4ba0:	a0 91 f7 02 	lds	r26, 0x02F7
    4ba4:	b0 91 f8 02 	lds	r27, 0x02F8
    4ba8:	2f ef       	ldi	r18, 0xFF	; 255
    4baa:	3f ef       	ldi	r19, 0xFF	; 255
    4bac:	40 e0       	ldi	r20, 0x00	; 0
    4bae:	50 e0       	ldi	r21, 0x00	; 0
    4bb0:	bc 01       	movw	r22, r24
    4bb2:	cd 01       	movw	r24, r26
    4bb4:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__mulsi3>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	8e 0d       	add	r24, r14
    4bbe:	9f 1d       	adc	r25, r15
    4bc0:	a0 1f       	adc	r26, r16
    4bc2:	b1 1f       	adc	r27, r17
    4bc4:	80 93 fd 02 	sts	0x02FD, r24
    4bc8:	90 93 fe 02 	sts	0x02FE, r25
    4bcc:	a0 93 ff 02 	sts	0x02FF, r26
    4bd0:	b0 93 00 03 	sts	0x0300, r27
		SET_BIT(TCCR1B,6);
    4bd4:	ae e4       	ldi	r26, 0x4E	; 78
    4bd6:	b0 e0       	ldi	r27, 0x00	; 0
    4bd8:	ee e4       	ldi	r30, 0x4E	; 78
    4bda:	f0 e0       	ldi	r31, 0x00	; 0
    4bdc:	80 81       	ld	r24, Z
    4bde:	80 64       	ori	r24, 0x40	; 64
    4be0:	8c 93       	st	X, r24
    4be2:	39 c0       	rjmp	.+114    	; 0x4c56 <__vector_6+0x196>
	}
	else if(ICR_COUNTER==3)
    4be4:	80 91 05 03 	lds	r24, 0x0305
    4be8:	90 91 06 03 	lds	r25, 0x0306
    4bec:	a0 91 07 03 	lds	r26, 0x0307
    4bf0:	b0 91 08 03 	lds	r27, 0x0308
    4bf4:	83 30       	cpi	r24, 0x03	; 3
    4bf6:	91 05       	cpc	r25, r1
    4bf8:	a1 05       	cpc	r26, r1
    4bfa:	b1 05       	cpc	r27, r1
    4bfc:	61 f5       	brne	.+88     	; 0x4c56 <__vector_6+0x196>
	{
		ICR_CAPT3 = ICR1 +(Num_OVF1*65535);
    4bfe:	e6 e4       	ldi	r30, 0x46	; 70
    4c00:	f0 e0       	ldi	r31, 0x00	; 0
    4c02:	80 81       	ld	r24, Z
    4c04:	91 81       	ldd	r25, Z+1	; 0x01
    4c06:	7c 01       	movw	r14, r24
    4c08:	00 e0       	ldi	r16, 0x00	; 0
    4c0a:	10 e0       	ldi	r17, 0x00	; 0
    4c0c:	80 91 f5 02 	lds	r24, 0x02F5
    4c10:	90 91 f6 02 	lds	r25, 0x02F6
    4c14:	a0 91 f7 02 	lds	r26, 0x02F7
    4c18:	b0 91 f8 02 	lds	r27, 0x02F8
    4c1c:	2f ef       	ldi	r18, 0xFF	; 255
    4c1e:	3f ef       	ldi	r19, 0xFF	; 255
    4c20:	40 e0       	ldi	r20, 0x00	; 0
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	bc 01       	movw	r22, r24
    4c26:	cd 01       	movw	r24, r26
    4c28:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__mulsi3>
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	cb 01       	movw	r24, r22
    4c30:	8e 0d       	add	r24, r14
    4c32:	9f 1d       	adc	r25, r15
    4c34:	a0 1f       	adc	r26, r16
    4c36:	b1 1f       	adc	r27, r17
    4c38:	80 93 01 03 	sts	0x0301, r24
    4c3c:	90 93 02 03 	sts	0x0302, r25
    4c40:	a0 93 03 03 	sts	0x0303, r26
    4c44:	b0 93 04 03 	sts	0x0304, r27
		CLR_BIT(TIMSK,5);
    4c48:	a9 e5       	ldi	r26, 0x59	; 89
    4c4a:	b0 e0       	ldi	r27, 0x00	; 0
    4c4c:	e9 e5       	ldi	r30, 0x59	; 89
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	80 81       	ld	r24, Z
    4c52:	8f 7d       	andi	r24, 0xDF	; 223
    4c54:	8c 93       	st	X, r24
	}


}
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	ff 91       	pop	r31
    4c5c:	ef 91       	pop	r30
    4c5e:	bf 91       	pop	r27
    4c60:	af 91       	pop	r26
    4c62:	9f 91       	pop	r25
    4c64:	8f 91       	pop	r24
    4c66:	7f 91       	pop	r23
    4c68:	6f 91       	pop	r22
    4c6a:	5f 91       	pop	r21
    4c6c:	4f 91       	pop	r20
    4c6e:	3f 91       	pop	r19
    4c70:	2f 91       	pop	r18
    4c72:	1f 91       	pop	r17
    4c74:	0f 91       	pop	r16
    4c76:	ff 90       	pop	r15
    4c78:	ef 90       	pop	r14
    4c7a:	0f 90       	pop	r0
    4c7c:	0f be       	out	0x3f, r0	; 63
    4c7e:	0f 90       	pop	r0
    4c80:	1f 90       	pop	r1
    4c82:	18 95       	reti

00004c84 <UART_Init>:
#include "UART.h"
#include <avr/io.h>


void UART_Init()
{
    4c84:	df 93       	push	r29
    4c86:	cf 93       	push	r28
    4c88:	cd b7       	in	r28, 0x3d	; 61
    4c8a:	de b7       	in	r29, 0x3e	; 62

	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
    4c8c:	aa e2       	ldi	r26, 0x2A	; 42
    4c8e:	b0 e0       	ldi	r27, 0x00	; 0
    4c90:	ea e2       	ldi	r30, 0x2A	; 42
    4c92:	f0 e0       	ldi	r31, 0x00	; 0
    4c94:	80 81       	ld	r24, Z
    4c96:	88 61       	ori	r24, 0x18	; 24
    4c98:	8c 93       	st	X, r24
		UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
    4c9a:	a0 e4       	ldi	r26, 0x40	; 64
    4c9c:	b0 e0       	ldi	r27, 0x00	; 0
    4c9e:	e0 e4       	ldi	r30, 0x40	; 64
    4ca0:	f0 e0       	ldi	r31, 0x00	; 0
    4ca2:	80 81       	ld	r24, Z
    4ca4:	86 68       	ori	r24, 0x86	; 134
    4ca6:	8c 93       	st	X, r24
		UBRRL = (((F_CPU / (9600 * 16UL))) - 1);		/* Load lower 8-bits of the baud rate value */
    4ca8:	e9 e2       	ldi	r30, 0x29	; 41
    4caa:	f0 e0       	ldi	r31, 0x00	; 0
    4cac:	87 e6       	ldi	r24, 0x67	; 103
    4cae:	80 83       	st	Z, r24
		UBRRH = ((((F_CPU / (9600 * 16UL))) - 1) >> 8);	/* Load upper 8-bits*/
    4cb0:	e0 e4       	ldi	r30, 0x40	; 64
    4cb2:	f0 e0       	ldi	r31, 0x00	; 0
    4cb4:	10 82       	st	Z, r1


	CLR_BIT(DDRD,0);
    4cb6:	a1 e3       	ldi	r26, 0x31	; 49
    4cb8:	b0 e0       	ldi	r27, 0x00	; 0
    4cba:	e1 e3       	ldi	r30, 0x31	; 49
    4cbc:	f0 e0       	ldi	r31, 0x00	; 0
    4cbe:	80 81       	ld	r24, Z
    4cc0:	8e 7f       	andi	r24, 0xFE	; 254
    4cc2:	8c 93       	st	X, r24
	SET_BIT(DDRD,1);
    4cc4:	a1 e3       	ldi	r26, 0x31	; 49
    4cc6:	b0 e0       	ldi	r27, 0x00	; 0
    4cc8:	e1 e3       	ldi	r30, 0x31	; 49
    4cca:	f0 e0       	ldi	r31, 0x00	; 0
    4ccc:	80 81       	ld	r24, Z
    4cce:	82 60       	ori	r24, 0x02	; 2
    4cd0:	8c 93       	st	X, r24

	UCSRB = 0x18;
    4cd2:	ea e2       	ldi	r30, 0x2A	; 42
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	88 e1       	ldi	r24, 0x18	; 24
    4cd8:	80 83       	st	Z, r24
	UCSRC = 0x86;
    4cda:	e0 e4       	ldi	r30, 0x40	; 64
    4cdc:	f0 e0       	ldi	r31, 0x00	; 0
    4cde:	86 e8       	ldi	r24, 0x86	; 134
    4ce0:	80 83       	st	Z, r24

	UBRRL = (80000/(16*96))-1;
    4ce2:	e9 e2       	ldi	r30, 0x29	; 41
    4ce4:	f0 e0       	ldi	r31, 0x00	; 0
    4ce6:	83 e3       	ldi	r24, 0x33	; 51
    4ce8:	80 83       	st	Z, r24

}
    4cea:	cf 91       	pop	r28
    4cec:	df 91       	pop	r29
    4cee:	08 95       	ret

00004cf0 <UART_RxChar>:

unsigned char UART_RxChar()
{
    4cf0:	df 93       	push	r29
    4cf2:	cf 93       	push	r28
    4cf4:	0f 92       	push	r0
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
	while ((UCSRA & (1 << RXC)) == 0)
    4cfa:	eb e2       	ldi	r30, 0x2B	; 43
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	80 81       	ld	r24, Z
    4d00:	88 23       	and	r24, r24
    4d02:	1c f0       	brlt	.+6      	; 0x4d0a <UART_RxChar+0x1a>
		{return 'm';};/* Wait till data is received */
    4d04:	8d e6       	ldi	r24, 0x6D	; 109
    4d06:	89 83       	std	Y+1, r24	; 0x01
    4d08:	04 c0       	rjmp	.+8      	; 0x4d12 <UART_RxChar+0x22>
	return(UDR);			/* Return the byte*/
    4d0a:	ec e2       	ldi	r30, 0x2C	; 44
    4d0c:	f0 e0       	ldi	r31, 0x00	; 0
    4d0e:	80 81       	ld	r24, Z
    4d10:	89 83       	std	Y+1, r24	; 0x01
    4d12:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d14:	0f 90       	pop	r0
    4d16:	cf 91       	pop	r28
    4d18:	df 91       	pop	r29
    4d1a:	08 95       	ret

00004d1c <UART_TxChar>:

void UART_TxChar(char ch)
{
    4d1c:	df 93       	push	r29
    4d1e:	cf 93       	push	r28
    4d20:	0f 92       	push	r0
    4d22:	cd b7       	in	r28, 0x3d	; 61
    4d24:	de b7       	in	r29, 0x3e	; 62
    4d26:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
    4d28:	eb e2       	ldi	r30, 0x2B	; 43
    4d2a:	f0 e0       	ldi	r31, 0x00	; 0
    4d2c:	80 81       	ld	r24, Z
    4d2e:	88 2f       	mov	r24, r24
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	80 72       	andi	r24, 0x20	; 32
    4d34:	90 70       	andi	r25, 0x00	; 0
    4d36:	00 97       	sbiw	r24, 0x00	; 0
    4d38:	b9 f3       	breq	.-18     	; 0x4d28 <UART_TxChar+0xc>
	UDR = ch ;
    4d3a:	ec e2       	ldi	r30, 0x2C	; 44
    4d3c:	f0 e0       	ldi	r31, 0x00	; 0
    4d3e:	89 81       	ldd	r24, Y+1	; 0x01
    4d40:	80 83       	st	Z, r24
}
    4d42:	0f 90       	pop	r0
    4d44:	cf 91       	pop	r28
    4d46:	df 91       	pop	r29
    4d48:	08 95       	ret

00004d4a <UART_SendString>:

void UART_SendString(char *str)
{
    4d4a:	df 93       	push	r29
    4d4c:	cf 93       	push	r28
    4d4e:	00 d0       	rcall	.+0      	; 0x4d50 <UART_SendString+0x6>
    4d50:	0f 92       	push	r0
    4d52:	cd b7       	in	r28, 0x3d	; 61
    4d54:	de b7       	in	r29, 0x3e	; 62
    4d56:	9b 83       	std	Y+3, r25	; 0x03
    4d58:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char j=0;
    4d5a:	19 82       	std	Y+1, r1	; 0x01
    4d5c:	0e c0       	rjmp	.+28     	; 0x4d7a <UART_SendString+0x30>

	while (str[j]!=0)		/* Send string till null */
	{
		UART_TxChar(str[j]);
    4d5e:	89 81       	ldd	r24, Y+1	; 0x01
    4d60:	28 2f       	mov	r18, r24
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	8a 81       	ldd	r24, Y+2	; 0x02
    4d66:	9b 81       	ldd	r25, Y+3	; 0x03
    4d68:	fc 01       	movw	r30, r24
    4d6a:	e2 0f       	add	r30, r18
    4d6c:	f3 1f       	adc	r31, r19
    4d6e:	80 81       	ld	r24, Z
    4d70:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <UART_TxChar>
		j++;
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	8f 5f       	subi	r24, 0xFF	; 255
    4d78:	89 83       	std	Y+1, r24	; 0x01

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
    4d7a:	89 81       	ldd	r24, Y+1	; 0x01
    4d7c:	28 2f       	mov	r18, r24
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	8a 81       	ldd	r24, Y+2	; 0x02
    4d82:	9b 81       	ldd	r25, Y+3	; 0x03
    4d84:	fc 01       	movw	r30, r24
    4d86:	e2 0f       	add	r30, r18
    4d88:	f3 1f       	adc	r31, r19
    4d8a:	80 81       	ld	r24, Z
    4d8c:	88 23       	and	r24, r24
    4d8e:	39 f7       	brne	.-50     	; 0x4d5e <UART_SendString+0x14>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
    4d90:	0f 90       	pop	r0
    4d92:	0f 90       	pop	r0
    4d94:	0f 90       	pop	r0
    4d96:	cf 91       	pop	r28
    4d98:	df 91       	pop	r29
    4d9a:	08 95       	ret

00004d9c <BUZZER_init>:

#include "BUZZER.h"


void BUZZER_init()
{
    4d9c:	df 93       	push	r29
    4d9e:	cf 93       	push	r28
    4da0:	cd b7       	in	r28, 0x3d	; 61
    4da2:	de b7       	in	r29, 0x3e	; 62
 DIO_SetPinDir(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT);
    4da4:	80 e0       	ldi	r24, 0x00	; 0
    4da6:	61 e0       	ldi	r22, 0x01	; 1
    4da8:	41 e0       	ldi	r20, 0x01	; 1
    4daa:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>

}
    4dae:	cf 91       	pop	r28
    4db0:	df 91       	pop	r29
    4db2:	08 95       	ret

00004db4 <BUZZER_START>:

void BUZZER_START()
{
    4db4:	df 93       	push	r29
    4db6:	cf 93       	push	r28
    4db8:	cd b7       	in	r28, 0x3d	; 61
    4dba:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_HIGH);
    4dbc:	80 e0       	ldi	r24, 0x00	; 0
    4dbe:	61 e0       	ldi	r22, 0x01	; 1
    4dc0:	41 e0       	ldi	r20, 0x01	; 1
    4dc2:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    4dc6:	cf 91       	pop	r28
    4dc8:	df 91       	pop	r29
    4dca:	08 95       	ret

00004dcc <BUZZER_STOP>:

void BUZZER_STOP()
{
    4dcc:	df 93       	push	r29
    4dce:	cf 93       	push	r28
    4dd0:	cd b7       	in	r28, 0x3d	; 61
    4dd2:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_LOW);
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	61 e0       	ldi	r22, 0x01	; 1
    4dd8:	40 e0       	ldi	r20, 0x00	; 0
    4dda:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>

}
    4dde:	cf 91       	pop	r28
    4de0:	df 91       	pop	r29
    4de2:	08 95       	ret

00004de4 <EEPROM_Read_Byte_From_Address>:
#include "EEPROM.h"
#include <avr/io.h>

uint8 EEPROM_Read_Byte_From_Address(const uint16 Address)
{
    4de4:	df 93       	push	r29
    4de6:	cf 93       	push	r28
    4de8:	00 d0       	rcall	.+0      	; 0x4dea <EEPROM_Read_Byte_From_Address+0x6>
    4dea:	cd b7       	in	r28, 0x3d	; 61
    4dec:	de b7       	in	r29, 0x3e	; 62
    4dee:	9a 83       	std	Y+2, r25	; 0x02
    4df0:	89 83       	std	Y+1, r24	; 0x01
	while (((EECR & (1 << EEWE))>>EEWE)==1);
    4df2:	ec e3       	ldi	r30, 0x3C	; 60
    4df4:	f0 e0       	ldi	r31, 0x00	; 0
    4df6:	80 81       	ld	r24, Z
    4df8:	88 2f       	mov	r24, r24
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	82 70       	andi	r24, 0x02	; 2
    4dfe:	90 70       	andi	r25, 0x00	; 0
    4e00:	95 95       	asr	r25
    4e02:	87 95       	ror	r24
    4e04:	81 30       	cpi	r24, 0x01	; 1
    4e06:	91 05       	cpc	r25, r1
    4e08:	a1 f3       	breq	.-24     	; 0x4df2 <EEPROM_Read_Byte_From_Address+0xe>
	EEAR = Address;
    4e0a:	ee e3       	ldi	r30, 0x3E	; 62
    4e0c:	f0 e0       	ldi	r31, 0x00	; 0
    4e0e:	89 81       	ldd	r24, Y+1	; 0x01
    4e10:	9a 81       	ldd	r25, Y+2	; 0x02
    4e12:	91 83       	std	Z+1, r25	; 0x01
    4e14:	80 83       	st	Z, r24
	EECR |= (1 << EERE);
    4e16:	ac e3       	ldi	r26, 0x3C	; 60
    4e18:	b0 e0       	ldi	r27, 0x00	; 0
    4e1a:	ec e3       	ldi	r30, 0x3C	; 60
    4e1c:	f0 e0       	ldi	r31, 0x00	; 0
    4e1e:	80 81       	ld	r24, Z
    4e20:	81 60       	ori	r24, 0x01	; 1
    4e22:	8c 93       	st	X, r24
	return EEDR;
    4e24:	ed e3       	ldi	r30, 0x3D	; 61
    4e26:	f0 e0       	ldi	r31, 0x00	; 0
    4e28:	80 81       	ld	r24, Z
}
    4e2a:	0f 90       	pop	r0
    4e2c:	0f 90       	pop	r0
    4e2e:	cf 91       	pop	r28
    4e30:	df 91       	pop	r29
    4e32:	08 95       	ret

00004e34 <EEPROM_Read_Block_From_Address>:

void EEPROM_Read_Block_From_Address(const uint16 Address, uint8* arr,const uint16 size)
{
    4e34:	df 93       	push	r29
    4e36:	cf 93       	push	r28
    4e38:	cd b7       	in	r28, 0x3d	; 61
    4e3a:	de b7       	in	r29, 0x3e	; 62
    4e3c:	28 97       	sbiw	r28, 0x08	; 8
    4e3e:	0f b6       	in	r0, 0x3f	; 63
    4e40:	f8 94       	cli
    4e42:	de bf       	out	0x3e, r29	; 62
    4e44:	0f be       	out	0x3f, r0	; 63
    4e46:	cd bf       	out	0x3d, r28	; 61
    4e48:	9c 83       	std	Y+4, r25	; 0x04
    4e4a:	8b 83       	std	Y+3, r24	; 0x03
    4e4c:	7e 83       	std	Y+6, r23	; 0x06
    4e4e:	6d 83       	std	Y+5, r22	; 0x05
    4e50:	58 87       	std	Y+8, r21	; 0x08
    4e52:	4f 83       	std	Y+7, r20	; 0x07

	while (((EECR & (1 << EEWE))>>EEWE)==1);
    4e54:	ec e3       	ldi	r30, 0x3C	; 60
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	80 81       	ld	r24, Z
    4e5a:	88 2f       	mov	r24, r24
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	82 70       	andi	r24, 0x02	; 2
    4e60:	90 70       	andi	r25, 0x00	; 0
    4e62:	95 95       	asr	r25
    4e64:	87 95       	ror	r24
    4e66:	81 30       	cpi	r24, 0x01	; 1
    4e68:	91 05       	cpc	r25, r1
    4e6a:	a1 f3       	breq	.-24     	; 0x4e54 <EEPROM_Read_Block_From_Address+0x20>
	uint16 counter = 0;
    4e6c:	1a 82       	std	Y+2, r1	; 0x02
    4e6e:	19 82       	std	Y+1, r1	; 0x01
    4e70:	21 c0       	rjmp	.+66     	; 0x4eb4 <EEPROM_Read_Block_From_Address+0x80>
	while (counter < size)
	{
		EEAR = Address + counter;
    4e72:	ee e3       	ldi	r30, 0x3E	; 62
    4e74:	f0 e0       	ldi	r31, 0x00	; 0
    4e76:	2b 81       	ldd	r18, Y+3	; 0x03
    4e78:	3c 81       	ldd	r19, Y+4	; 0x04
    4e7a:	89 81       	ldd	r24, Y+1	; 0x01
    4e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7e:	82 0f       	add	r24, r18
    4e80:	93 1f       	adc	r25, r19
    4e82:	91 83       	std	Z+1, r25	; 0x01
    4e84:	80 83       	st	Z, r24
		EECR |= (1 << EERE);
    4e86:	ac e3       	ldi	r26, 0x3C	; 60
    4e88:	b0 e0       	ldi	r27, 0x00	; 0
    4e8a:	ec e3       	ldi	r30, 0x3C	; 60
    4e8c:	f0 e0       	ldi	r31, 0x00	; 0
    4e8e:	80 81       	ld	r24, Z
    4e90:	81 60       	ori	r24, 0x01	; 1
    4e92:	8c 93       	st	X, r24
		*(arr + counter) = EEDR;
    4e94:	2d 81       	ldd	r18, Y+5	; 0x05
    4e96:	3e 81       	ldd	r19, Y+6	; 0x06
    4e98:	89 81       	ldd	r24, Y+1	; 0x01
    4e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9c:	d9 01       	movw	r26, r18
    4e9e:	a8 0f       	add	r26, r24
    4ea0:	b9 1f       	adc	r27, r25
    4ea2:	ed e3       	ldi	r30, 0x3D	; 61
    4ea4:	f0 e0       	ldi	r31, 0x00	; 0
    4ea6:	80 81       	ld	r24, Z
    4ea8:	8c 93       	st	X, r24
		counter++;
    4eaa:	89 81       	ldd	r24, Y+1	; 0x01
    4eac:	9a 81       	ldd	r25, Y+2	; 0x02
    4eae:	01 96       	adiw	r24, 0x01	; 1
    4eb0:	9a 83       	std	Y+2, r25	; 0x02
    4eb2:	89 83       	std	Y+1, r24	; 0x01
void EEPROM_Read_Block_From_Address(const uint16 Address, uint8* arr,const uint16 size)
{

	while (((EECR & (1 << EEWE))>>EEWE)==1);
	uint16 counter = 0;
	while (counter < size)
    4eb4:	29 81       	ldd	r18, Y+1	; 0x01
    4eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    4eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    4eba:	98 85       	ldd	r25, Y+8	; 0x08
    4ebc:	28 17       	cp	r18, r24
    4ebe:	39 07       	cpc	r19, r25
    4ec0:	c0 f2       	brcs	.-80     	; 0x4e72 <EEPROM_Read_Block_From_Address+0x3e>
		EEAR = Address + counter;
		EECR |= (1 << EERE);
		*(arr + counter) = EEDR;
		counter++;
	}
}
    4ec2:	28 96       	adiw	r28, 0x08	; 8
    4ec4:	0f b6       	in	r0, 0x3f	; 63
    4ec6:	f8 94       	cli
    4ec8:	de bf       	out	0x3e, r29	; 62
    4eca:	0f be       	out	0x3f, r0	; 63
    4ecc:	cd bf       	out	0x3d, r28	; 61
    4ece:	cf 91       	pop	r28
    4ed0:	df 91       	pop	r29
    4ed2:	08 95       	ret

00004ed4 <EEPROM_Write_Byte_To_Address>:

void EEPROM_Write_Byte_To_Address(const uint16 Address, const uint8 Data)
{
    4ed4:	df 93       	push	r29
    4ed6:	cf 93       	push	r28
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <EEPROM_Write_Byte_To_Address+0x6>
    4eda:	0f 92       	push	r0
    4edc:	cd b7       	in	r28, 0x3d	; 61
    4ede:	de b7       	in	r29, 0x3e	; 62
    4ee0:	9a 83       	std	Y+2, r25	; 0x02
    4ee2:	89 83       	std	Y+1, r24	; 0x01
    4ee4:	6b 83       	std	Y+3, r22	; 0x03

	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1);
    4ee6:	ec e3       	ldi	r30, 0x3C	; 60
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	80 81       	ld	r24, Z
    4eec:	88 2f       	mov	r24, r24
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	82 70       	andi	r24, 0x02	; 2
    4ef2:	90 70       	andi	r25, 0x00	; 0
    4ef4:	95 95       	asr	r25
    4ef6:	87 95       	ror	r24
    4ef8:	81 30       	cpi	r24, 0x01	; 1
    4efa:	91 05       	cpc	r25, r1
    4efc:	a1 f3       	breq	.-24     	; 0x4ee6 <EEPROM_Write_Byte_To_Address+0x12>
	EEAR = Address;
    4efe:	ee e3       	ldi	r30, 0x3E	; 62
    4f00:	f0 e0       	ldi	r31, 0x00	; 0
    4f02:	89 81       	ldd	r24, Y+1	; 0x01
    4f04:	9a 81       	ldd	r25, Y+2	; 0x02
    4f06:	91 83       	std	Z+1, r25	; 0x01
    4f08:	80 83       	st	Z, r24
	EECR |= (1 << EERE);
    4f0a:	ac e3       	ldi	r26, 0x3C	; 60
    4f0c:	b0 e0       	ldi	r27, 0x00	; 0
    4f0e:	ec e3       	ldi	r30, 0x3C	; 60
    4f10:	f0 e0       	ldi	r31, 0x00	; 0
    4f12:	80 81       	ld	r24, Z
    4f14:	81 60       	ori	r24, 0x01	; 1
    4f16:	8c 93       	st	X, r24
	if (EEDR != Data)
    4f18:	ed e3       	ldi	r30, 0x3D	; 61
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	90 81       	ld	r25, Z
    4f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f20:	98 17       	cp	r25, r24
    4f22:	91 f0       	breq	.+36     	; 0x4f48 <EEPROM_Write_Byte_To_Address+0x74>
	{
		EEDR = Data;
    4f24:	ed e3       	ldi	r30, 0x3D	; 61
    4f26:	f0 e0       	ldi	r31, 0x00	; 0
    4f28:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2a:	80 83       	st	Z, r24
		EECR |= (1 << EEMWE);
    4f2c:	ac e3       	ldi	r26, 0x3C	; 60
    4f2e:	b0 e0       	ldi	r27, 0x00	; 0
    4f30:	ec e3       	ldi	r30, 0x3C	; 60
    4f32:	f0 e0       	ldi	r31, 0x00	; 0
    4f34:	80 81       	ld	r24, Z
    4f36:	84 60       	ori	r24, 0x04	; 4
    4f38:	8c 93       	st	X, r24
		EECR |= (1 << EEWE);
    4f3a:	ac e3       	ldi	r26, 0x3C	; 60
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	ec e3       	ldi	r30, 0x3C	; 60
    4f40:	f0 e0       	ldi	r31, 0x00	; 0
    4f42:	80 81       	ld	r24, Z
    4f44:	82 60       	ori	r24, 0x02	; 2
    4f46:	8c 93       	st	X, r24
	else
	{

	}

}
    4f48:	0f 90       	pop	r0
    4f4a:	0f 90       	pop	r0
    4f4c:	0f 90       	pop	r0
    4f4e:	cf 91       	pop	r28
    4f50:	df 91       	pop	r29
    4f52:	08 95       	ret

00004f54 <EEPROM_Write_Block_To_Address>:

void EEPROM_Write_Block_To_Address(const uint16 Address, const uint8* arr,const uint16 size)
{
    4f54:	df 93       	push	r29
    4f56:	cf 93       	push	r28
    4f58:	cd b7       	in	r28, 0x3d	; 61
    4f5a:	de b7       	in	r29, 0x3e	; 62
    4f5c:	28 97       	sbiw	r28, 0x08	; 8
    4f5e:	0f b6       	in	r0, 0x3f	; 63
    4f60:	f8 94       	cli
    4f62:	de bf       	out	0x3e, r29	; 62
    4f64:	0f be       	out	0x3f, r0	; 63
    4f66:	cd bf       	out	0x3d, r28	; 61
    4f68:	9c 83       	std	Y+4, r25	; 0x04
    4f6a:	8b 83       	std	Y+3, r24	; 0x03
    4f6c:	7e 83       	std	Y+6, r23	; 0x06
    4f6e:	6d 83       	std	Y+5, r22	; 0x05
    4f70:	58 87       	std	Y+8, r21	; 0x08
    4f72:	4f 83       	std	Y+7, r20	; 0x07
	uint16 counter = 0;
    4f74:	1a 82       	std	Y+2, r1	; 0x02
    4f76:	19 82       	std	Y+1, r1	; 0x01
    4f78:	48 c0       	rjmp	.+144    	; 0x500a <EEPROM_Write_Block_To_Address+0xb6>
	while (counter < size)
	{
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1);
    4f7a:	ec e3       	ldi	r30, 0x3C	; 60
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	80 81       	ld	r24, Z
    4f80:	88 2f       	mov	r24, r24
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	82 70       	andi	r24, 0x02	; 2
    4f86:	90 70       	andi	r25, 0x00	; 0
    4f88:	95 95       	asr	r25
    4f8a:	87 95       	ror	r24
    4f8c:	81 30       	cpi	r24, 0x01	; 1
    4f8e:	91 05       	cpc	r25, r1
    4f90:	a1 f3       	breq	.-24     	; 0x4f7a <EEPROM_Write_Block_To_Address+0x26>
		EEAR = Address + counter;
    4f92:	ee e3       	ldi	r30, 0x3E	; 62
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	2b 81       	ldd	r18, Y+3	; 0x03
    4f98:	3c 81       	ldd	r19, Y+4	; 0x04
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f9e:	82 0f       	add	r24, r18
    4fa0:	93 1f       	adc	r25, r19
    4fa2:	91 83       	std	Z+1, r25	; 0x01
    4fa4:	80 83       	st	Z, r24
		EECR |= (1 << EERE);
    4fa6:	ac e3       	ldi	r26, 0x3C	; 60
    4fa8:	b0 e0       	ldi	r27, 0x00	; 0
    4faa:	ec e3       	ldi	r30, 0x3C	; 60
    4fac:	f0 e0       	ldi	r31, 0x00	; 0
    4fae:	80 81       	ld	r24, Z
    4fb0:	81 60       	ori	r24, 0x01	; 1
    4fb2:	8c 93       	st	X, r24
		if (EEDR != (*(arr + counter)))
    4fb4:	ed e3       	ldi	r30, 0x3D	; 61
    4fb6:	f0 e0       	ldi	r31, 0x00	; 0
    4fb8:	40 81       	ld	r20, Z
    4fba:	2d 81       	ldd	r18, Y+5	; 0x05
    4fbc:	3e 81       	ldd	r19, Y+6	; 0x06
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc2:	f9 01       	movw	r30, r18
    4fc4:	e8 0f       	add	r30, r24
    4fc6:	f9 1f       	adc	r31, r25
    4fc8:	80 81       	ld	r24, Z
    4fca:	48 17       	cp	r20, r24
    4fcc:	c9 f0       	breq	.+50     	; 0x5000 <EEPROM_Write_Block_To_Address+0xac>
		{
			EEDR = *(arr + counter);
    4fce:	ad e3       	ldi	r26, 0x3D	; 61
    4fd0:	b0 e0       	ldi	r27, 0x00	; 0
    4fd2:	2d 81       	ldd	r18, Y+5	; 0x05
    4fd4:	3e 81       	ldd	r19, Y+6	; 0x06
    4fd6:	89 81       	ldd	r24, Y+1	; 0x01
    4fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fda:	f9 01       	movw	r30, r18
    4fdc:	e8 0f       	add	r30, r24
    4fde:	f9 1f       	adc	r31, r25
    4fe0:	80 81       	ld	r24, Z
    4fe2:	8c 93       	st	X, r24
			EECR |= (1 << EEMWE);
    4fe4:	ac e3       	ldi	r26, 0x3C	; 60
    4fe6:	b0 e0       	ldi	r27, 0x00	; 0
    4fe8:	ec e3       	ldi	r30, 0x3C	; 60
    4fea:	f0 e0       	ldi	r31, 0x00	; 0
    4fec:	80 81       	ld	r24, Z
    4fee:	84 60       	ori	r24, 0x04	; 4
    4ff0:	8c 93       	st	X, r24
			EECR |= (1 << EEWE);
    4ff2:	ac e3       	ldi	r26, 0x3C	; 60
    4ff4:	b0 e0       	ldi	r27, 0x00	; 0
    4ff6:	ec e3       	ldi	r30, 0x3C	; 60
    4ff8:	f0 e0       	ldi	r31, 0x00	; 0
    4ffa:	80 81       	ld	r24, Z
    4ffc:	82 60       	ori	r24, 0x02	; 2
    4ffe:	8c 93       	st	X, r24
		}
		else
		{

		}
		counter++;//increase bytes counter
    5000:	89 81       	ldd	r24, Y+1	; 0x01
    5002:	9a 81       	ldd	r25, Y+2	; 0x02
    5004:	01 96       	adiw	r24, 0x01	; 1
    5006:	9a 83       	std	Y+2, r25	; 0x02
    5008:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_Write_Block_To_Address(const uint16 Address, const uint8* arr,const uint16 size)
{
	uint16 counter = 0;
	while (counter < size)
    500a:	29 81       	ldd	r18, Y+1	; 0x01
    500c:	3a 81       	ldd	r19, Y+2	; 0x02
    500e:	8f 81       	ldd	r24, Y+7	; 0x07
    5010:	98 85       	ldd	r25, Y+8	; 0x08
    5012:	28 17       	cp	r18, r24
    5014:	39 07       	cpc	r19, r25
    5016:	08 f4       	brcc	.+2      	; 0x501a <EEPROM_Write_Block_To_Address+0xc6>
    5018:	b0 cf       	rjmp	.-160    	; 0x4f7a <EEPROM_Write_Block_To_Address+0x26>
		{

		}
		counter++;//increase bytes counter
	}
}
    501a:	28 96       	adiw	r28, 0x08	; 8
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	cf 91       	pop	r28
    5028:	df 91       	pop	r29
    502a:	08 95       	ret

0000502c <EraseEEPROM>:

void EraseEEPROM()
{
    502c:	df 93       	push	r29
    502e:	cf 93       	push	r28
    5030:	cd b7       	in	r28, 0x3d	; 61
    5032:	de b7       	in	r29, 0x3e	; 62
    5034:	69 97       	sbiw	r28, 0x19	; 25
    5036:	0f b6       	in	r0, 0x3f	; 63
    5038:	f8 94       	cli
    503a:	de bf       	out	0x3e, r29	; 62
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	cd bf       	out	0x3d, r28	; 61
 uint8_t sreg, i;
 uint16_t addr;
 uint8_t clear[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    5040:	ce 01       	movw	r24, r28
    5042:	05 96       	adiw	r24, 0x05	; 5
    5044:	9e 8b       	std	Y+22, r25	; 0x16
    5046:	8d 8b       	std	Y+21, r24	; 0x15
    5048:	ef eb       	ldi	r30, 0xBF	; 191
    504a:	f2 e0       	ldi	r31, 0x02	; 2
    504c:	f8 8f       	std	Y+24, r31	; 0x18
    504e:	ef 8b       	std	Y+23, r30	; 0x17
    5050:	f8 e0       	ldi	r31, 0x08	; 8
    5052:	f9 8f       	std	Y+25, r31	; 0x19
    5054:	ef 89       	ldd	r30, Y+23	; 0x17
    5056:	f8 8d       	ldd	r31, Y+24	; 0x18
    5058:	00 80       	ld	r0, Z
    505a:	8f 89       	ldd	r24, Y+23	; 0x17
    505c:	98 8d       	ldd	r25, Y+24	; 0x18
    505e:	01 96       	adiw	r24, 0x01	; 1
    5060:	98 8f       	std	Y+24, r25	; 0x18
    5062:	8f 8b       	std	Y+23, r24	; 0x17
    5064:	ed 89       	ldd	r30, Y+21	; 0x15
    5066:	fe 89       	ldd	r31, Y+22	; 0x16
    5068:	00 82       	st	Z, r0
    506a:	8d 89       	ldd	r24, Y+21	; 0x15
    506c:	9e 89       	ldd	r25, Y+22	; 0x16
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	9e 8b       	std	Y+22, r25	; 0x16
    5072:	8d 8b       	std	Y+21, r24	; 0x15
    5074:	99 8d       	ldd	r25, Y+25	; 0x19
    5076:	91 50       	subi	r25, 0x01	; 1
    5078:	99 8f       	std	Y+25, r25	; 0x19
    507a:	e9 8d       	ldd	r30, Y+25	; 0x19
    507c:	ee 23       	and	r30, r30
    507e:	51 f7       	brne	.-44     	; 0x5054 <EraseEEPROM+0x28>




 // Write page by page using the block writing method
 for(addr = 0; addr < 86; addr += 8)
    5080:	1a 82       	std	Y+2, r1	; 0x02
    5082:	19 82       	std	Y+1, r1	; 0x01
    5084:	2b c0       	rjmp	.+86     	; 0x50dc <EraseEEPROM+0xb0>
 {
   EEPROM_Read_Block_From_Address((void *)&data[0],(const void *)addr,8);
    5086:	ce 01       	movw	r24, r28
    5088:	0d 96       	adiw	r24, 0x0d	; 13
    508a:	29 81       	ldd	r18, Y+1	; 0x01
    508c:	3a 81       	ldd	r19, Y+2	; 0x02
    508e:	b9 01       	movw	r22, r18
    5090:	48 e0       	ldi	r20, 0x08	; 8
    5092:	50 e0       	ldi	r21, 0x00	; 0
    5094:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_Read_Block_From_Address>
   for(i = 0; i < 8; i++)
    5098:	1b 82       	std	Y+3, r1	; 0x03
    509a:	18 c0       	rjmp	.+48     	; 0x50cc <EraseEEPROM+0xa0>
     if(data[i] != 0xFF)
    509c:	8b 81       	ldd	r24, Y+3	; 0x03
    509e:	28 2f       	mov	r18, r24
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	ce 01       	movw	r24, r28
    50a4:	0d 96       	adiw	r24, 0x0d	; 13
    50a6:	fc 01       	movw	r30, r24
    50a8:	e2 0f       	add	r30, r18
    50aa:	f3 1f       	adc	r31, r19
    50ac:	80 81       	ld	r24, Z
    50ae:	8f 3f       	cpi	r24, 0xFF	; 255
    50b0:	51 f0       	breq	.+20     	; 0x50c6 <EraseEEPROM+0x9a>
     {
       EEPROM_Write_Block_To_Address((void*)&clear[0], (void*)addr, 8);
    50b2:	ce 01       	movw	r24, r28
    50b4:	05 96       	adiw	r24, 0x05	; 5
    50b6:	29 81       	ldd	r18, Y+1	; 0x01
    50b8:	3a 81       	ldd	r19, Y+2	; 0x02
    50ba:	b9 01       	movw	r22, r18
    50bc:	48 e0       	ldi	r20, 0x08	; 8
    50be:	50 e0       	ldi	r21, 0x00	; 0
    50c0:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <EEPROM_Write_Block_To_Address>
    50c4:	06 c0       	rjmp	.+12     	; 0x50d2 <EraseEEPROM+0xa6>

 // Write page by page using the block writing method
 for(addr = 0; addr < 86; addr += 8)
 {
   EEPROM_Read_Block_From_Address((void *)&data[0],(const void *)addr,8);
   for(i = 0; i < 8; i++)
    50c6:	8b 81       	ldd	r24, Y+3	; 0x03
    50c8:	8f 5f       	subi	r24, 0xFF	; 255
    50ca:	8b 83       	std	Y+3, r24	; 0x03
    50cc:	8b 81       	ldd	r24, Y+3	; 0x03
    50ce:	88 30       	cpi	r24, 0x08	; 8
    50d0:	28 f3       	brcs	.-54     	; 0x509c <EraseEEPROM+0x70>




 // Write page by page using the block writing method
 for(addr = 0; addr < 86; addr += 8)
    50d2:	89 81       	ldd	r24, Y+1	; 0x01
    50d4:	9a 81       	ldd	r25, Y+2	; 0x02
    50d6:	08 96       	adiw	r24, 0x08	; 8
    50d8:	9a 83       	std	Y+2, r25	; 0x02
    50da:	89 83       	std	Y+1, r24	; 0x01
    50dc:	89 81       	ldd	r24, Y+1	; 0x01
    50de:	9a 81       	ldd	r25, Y+2	; 0x02
    50e0:	86 35       	cpi	r24, 0x56	; 86
    50e2:	91 05       	cpc	r25, r1
    50e4:	80 f2       	brcs	.-96     	; 0x5086 <EraseEEPROM+0x5a>
       break;
     }
 }

;
}
    50e6:	69 96       	adiw	r28, 0x19	; 25
    50e8:	0f b6       	in	r0, 0x3f	; 63
    50ea:	f8 94       	cli
    50ec:	de bf       	out	0x3e, r29	; 62
    50ee:	0f be       	out	0x3f, r0	; 63
    50f0:	cd bf       	out	0x3d, r28	; 61
    50f2:	cf 91       	pop	r28
    50f4:	df 91       	pop	r29
    50f6:	08 95       	ret

000050f8 <KeyPad_Init>:
								   {'c' , '0' , '=' , '+'}  };



void KeyPad_Init(void)
{
    50f8:	df 93       	push	r29
    50fa:	cf 93       	push	r28
    50fc:	cd b7       	in	r28, 0x3d	; 61
    50fe:	de b7       	in	r29, 0x3e	; 62

DIO_SetPinDir(KEYPAD_PORT, KEYPAD_COLUM_0, DIO_PIN_OUTPUT);
    5100:	82 e0       	ldi	r24, 0x02	; 2
    5102:	60 e0       	ldi	r22, 0x00	; 0
    5104:	41 e0       	ldi	r20, 0x01	; 1
    5106:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
DIO_SetPinDir(KEYPAD_PORT, KEYPAD_COLUM_1, DIO_PIN_OUTPUT);
    510a:	82 e0       	ldi	r24, 0x02	; 2
    510c:	61 e0       	ldi	r22, 0x01	; 1
    510e:	41 e0       	ldi	r20, 0x01	; 1
    5110:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
DIO_SetPinDir(KEYPAD_PORT, KEYPAD_COLUM_2, DIO_PIN_OUTPUT);
    5114:	82 e0       	ldi	r24, 0x02	; 2
    5116:	62 e0       	ldi	r22, 0x02	; 2
    5118:	41 e0       	ldi	r20, 0x01	; 1
    511a:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
DIO_SetPinDir(KEYPAD_PORT, KEYPAD_COLUM_3, DIO_PIN_OUTPUT);
    511e:	82 e0       	ldi	r24, 0x02	; 2
    5120:	63 e0       	ldi	r22, 0x03	; 3
    5122:	41 e0       	ldi	r20, 0x01	; 1
    5124:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
/*DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_0, DIO_PIN_HIGH);
DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_1, DIO_PIN_HIGH);
DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_2, DIO_PIN_HIGH);
DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_3, DIO_PIN_HIGH);*/

DIO_SetPinDir(KEYPAD_PORT, KEYPAD_ROW_0, DIO_PIN_INPUT);
    5128:	82 e0       	ldi	r24, 0x02	; 2
    512a:	64 e0       	ldi	r22, 0x04	; 4
    512c:	40 e0       	ldi	r20, 0x00	; 0
    512e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
DIO_SetPinDir(KEYPAD_PORT, KEYPAD_ROW_1, DIO_PIN_INPUT);
    5132:	82 e0       	ldi	r24, 0x02	; 2
    5134:	65 e0       	ldi	r22, 0x05	; 5
    5136:	40 e0       	ldi	r20, 0x00	; 0
    5138:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
DIO_SetPinDir(KEYPAD_PORT, KEYPAD_ROW_2, DIO_PIN_INPUT);
    513c:	82 e0       	ldi	r24, 0x02	; 2
    513e:	66 e0       	ldi	r22, 0x06	; 6
    5140:	40 e0       	ldi	r20, 0x00	; 0
    5142:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
DIO_SetPinDir(KEYPAD_PORT, KEYPAD_ROW_3, DIO_PIN_INPUT);
    5146:	82 e0       	ldi	r24, 0x02	; 2
    5148:	67 e0       	ldi	r22, 0x07	; 7
    514a:	40 e0       	ldi	r20, 0x00	; 0
    514c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>


DIO_SetPullUpRes(KEYPAD_PORT, KEYPAD_ROW_0);
    5150:	82 e0       	ldi	r24, 0x02	; 2
    5152:	64 e0       	ldi	r22, 0x04	; 4
    5154:	0e 94 46 22 	call	0x448c	; 0x448c <DIO_SetPullUpRes>
DIO_SetPullUpRes(KEYPAD_PORT, KEYPAD_ROW_1);
    5158:	82 e0       	ldi	r24, 0x02	; 2
    515a:	65 e0       	ldi	r22, 0x05	; 5
    515c:	0e 94 46 22 	call	0x448c	; 0x448c <DIO_SetPullUpRes>
DIO_SetPullUpRes(KEYPAD_PORT, KEYPAD_ROW_2);
    5160:	82 e0       	ldi	r24, 0x02	; 2
    5162:	66 e0       	ldi	r22, 0x06	; 6
    5164:	0e 94 46 22 	call	0x448c	; 0x448c <DIO_SetPullUpRes>
DIO_SetPullUpRes(KEYPAD_PORT, KEYPAD_ROW_3);
    5168:	82 e0       	ldi	r24, 0x02	; 2
    516a:	67 e0       	ldi	r22, 0x07	; 7
    516c:	0e 94 46 22 	call	0x448c	; 0x448c <DIO_SetPullUpRes>


}
    5170:	cf 91       	pop	r28
    5172:	df 91       	pop	r29
    5174:	08 95       	ret

00005176 <KeyPad_GetChar>:

uint8 KeyPad_GetChar(void)
{
    5176:	df 93       	push	r29
    5178:	cf 93       	push	r28
    517a:	00 d0       	rcall	.+0      	; 0x517c <KeyPad_GetChar+0x6>
    517c:	00 d0       	rcall	.+0      	; 0x517e <KeyPad_GetChar+0x8>
    517e:	cd b7       	in	r28, 0x3d	; 61
    5180:	de b7       	in	r29, 0x3e	; 62
                                       {'4' , '5' , '6' , '*'} ,
		                               {'1' , '2' , '3' , '-'} ,
		                                {'c' , '0' , '=' , '+'}  };

	uint8 row ,colume ,x;
	uint8 returnval='m';
    5182:	8d e6       	ldi	r24, 0x6D	; 109
    5184:	89 83       	std	Y+1, r24	; 0x01
	for(row=0;row<4;row++)
    5186:	1c 82       	std	Y+4, r1	; 0x04
    5188:	45 c0       	rjmp	.+138    	; 0x5214 <KeyPad_GetChar+0x9e>
	{
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_0, DIO_PIN_HIGH);
    518a:	82 e0       	ldi	r24, 0x02	; 2
    518c:	60 e0       	ldi	r22, 0x00	; 0
    518e:	41 e0       	ldi	r20, 0x01	; 1
    5190:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_1, DIO_PIN_HIGH);
    5194:	82 e0       	ldi	r24, 0x02	; 2
    5196:	61 e0       	ldi	r22, 0x01	; 1
    5198:	41 e0       	ldi	r20, 0x01	; 1
    519a:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_2, DIO_PIN_HIGH);
    519e:	82 e0       	ldi	r24, 0x02	; 2
    51a0:	62 e0       	ldi	r22, 0x02	; 2
    51a2:	41 e0       	ldi	r20, 0x01	; 1
    51a4:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_3, DIO_PIN_HIGH);
    51a8:	82 e0       	ldi	r24, 0x02	; 2
    51aa:	63 e0       	ldi	r22, 0x03	; 3
    51ac:	41 e0       	ldi	r20, 0x01	; 1
    51ae:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
		DIO_SetPinVal(KEYPAD_PORT, row, DIO_PIN_LOW);
    51b2:	82 e0       	ldi	r24, 0x02	; 2
    51b4:	6c 81       	ldd	r22, Y+4	; 0x04
    51b6:	40 e0       	ldi	r20, 0x00	; 0
    51b8:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
		for(colume=0;colume<4;colume++)
    51bc:	1b 82       	std	Y+3, r1	; 0x03
    51be:	21 c0       	rjmp	.+66     	; 0x5202 <KeyPad_GetChar+0x8c>
		{
			x=DIO_GetPinVal(KEYPAD_PORT,(colume+4));
    51c0:	8b 81       	ldd	r24, Y+3	; 0x03
    51c2:	98 2f       	mov	r25, r24
    51c4:	9c 5f       	subi	r25, 0xFC	; 252
    51c6:	82 e0       	ldi	r24, 0x02	; 2
    51c8:	69 2f       	mov	r22, r25
    51ca:	0e 94 4f 21 	call	0x429e	; 0x429e <DIO_GetPinVal>
    51ce:	8a 83       	std	Y+2, r24	; 0x02
			if(x==0)
    51d0:	8a 81       	ldd	r24, Y+2	; 0x02
    51d2:	88 23       	and	r24, r24
    51d4:	99 f4       	brne	.+38     	; 0x51fc <KeyPad_GetChar+0x86>
			{
				returnval=KeyPad_Values[row][colume];
    51d6:	8c 81       	ldd	r24, Y+4	; 0x04
    51d8:	48 2f       	mov	r20, r24
    51da:	50 e0       	ldi	r21, 0x00	; 0
    51dc:	8b 81       	ldd	r24, Y+3	; 0x03
    51de:	28 2f       	mov	r18, r24
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	ca 01       	movw	r24, r20
    51e4:	88 0f       	add	r24, r24
    51e6:	99 1f       	adc	r25, r25
    51e8:	88 0f       	add	r24, r24
    51ea:	99 1f       	adc	r25, r25
    51ec:	82 0f       	add	r24, r18
    51ee:	93 1f       	adc	r25, r19
    51f0:	fc 01       	movw	r30, r24
    51f2:	e9 52       	subi	r30, 0x29	; 41
    51f4:	fd 4f       	sbci	r31, 0xFD	; 253
    51f6:	80 81       	ld	r24, Z
    51f8:	89 83       	std	Y+1, r24	; 0x01
    51fa:	06 c0       	rjmp	.+12     	; 0x5208 <KeyPad_GetChar+0x92>
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_0, DIO_PIN_HIGH);
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_1, DIO_PIN_HIGH);
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_2, DIO_PIN_HIGH);
		DIO_SetPinVal(KEYPAD_PORT, KEYPAD_COLUM_3, DIO_PIN_HIGH);
		DIO_SetPinVal(KEYPAD_PORT, row, DIO_PIN_LOW);
		for(colume=0;colume<4;colume++)
    51fc:	8b 81       	ldd	r24, Y+3	; 0x03
    51fe:	8f 5f       	subi	r24, 0xFF	; 255
    5200:	8b 83       	std	Y+3, r24	; 0x03
    5202:	8b 81       	ldd	r24, Y+3	; 0x03
    5204:	84 30       	cpi	r24, 0x04	; 4
    5206:	e0 f2       	brcs	.-72     	; 0x51c0 <KeyPad_GetChar+0x4a>
			{
				returnval=KeyPad_Values[row][colume];
				break;
			}
		}
			if(x==0)
    5208:	8a 81       	ldd	r24, Y+2	; 0x02
    520a:	88 23       	and	r24, r24
    520c:	39 f0       	breq	.+14     	; 0x521c <KeyPad_GetChar+0xa6>
		                               {'1' , '2' , '3' , '-'} ,
		                                {'c' , '0' , '=' , '+'}  };

	uint8 row ,colume ,x;
	uint8 returnval='m';
	for(row=0;row<4;row++)
    520e:	8c 81       	ldd	r24, Y+4	; 0x04
    5210:	8f 5f       	subi	r24, 0xFF	; 255
    5212:	8c 83       	std	Y+4, r24	; 0x04
    5214:	8c 81       	ldd	r24, Y+4	; 0x04
    5216:	84 30       	cpi	r24, 0x04	; 4
    5218:	08 f4       	brcc	.+2      	; 0x521c <KeyPad_GetChar+0xa6>
    521a:	b7 cf       	rjmp	.-146    	; 0x518a <KeyPad_GetChar+0x14>
			if(x==0)
			{
				break;
			}
		}
	return returnval;
    521c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	0f 90       	pop	r0
    5224:	0f 90       	pop	r0
    5226:	cf 91       	pop	r28
    5228:	df 91       	pop	r29
    522a:	08 95       	ret

0000522c <LCD_Init>:


#include "LCD.h"
#include <util/delay.h>
void LCD_Init()
{
    522c:	df 93       	push	r29
    522e:	cf 93       	push	r28
    5230:	cd b7       	in	r28, 0x3d	; 61
    5232:	de b7       	in	r29, 0x3e	; 62
    5234:	2e 97       	sbiw	r28, 0x0e	; 14
    5236:	0f b6       	in	r0, 0x3f	; 63
    5238:	f8 94       	cli
    523a:	de bf       	out	0x3e, r29	; 62
    523c:	0f be       	out	0x3f, r0	; 63
    523e:	cd bf       	out	0x3d, r28	; 61
	/*Return Home*/
	LCD_WriteCommand(0x02);

	#elif    LCD_MODE   ==    4
	/*initializing the pins direction in 4-bit mode*/
	DIO_SetPinDir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT);
    5240:	81 e0       	ldi	r24, 0x01	; 1
    5242:	61 e0       	ldi	r22, 0x01	; 1
    5244:	41 e0       	ldi	r20, 0x01	; 1
    5246:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT);
    524a:	81 e0       	ldi	r24, 0x01	; 1
    524c:	62 e0       	ldi	r22, 0x02	; 2
    524e:	41 e0       	ldi	r20, 0x01	; 1
    5250:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);
    5254:	81 e0       	ldi	r24, 0x01	; 1
    5256:	60 e0       	ldi	r22, 0x00	; 0
    5258:	41 e0       	ldi	r20, 0x01	; 1
    525a:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>

	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D4_PIN , DIO_PIN_OUTPUT);
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	64 e0       	ldi	r22, 0x04	; 4
    5262:	41 e0       	ldi	r20, 0x01	; 1
    5264:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D5_PIN , DIO_PIN_OUTPUT);
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	65 e0       	ldi	r22, 0x05	; 5
    526c:	41 e0       	ldi	r20, 0x01	; 1
    526e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D6_PIN , DIO_PIN_OUTPUT);
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	66 e0       	ldi	r22, 0x06	; 6
    5276:	41 e0       	ldi	r20, 0x01	; 1
    5278:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D7_PIN , DIO_PIN_OUTPUT);
    527c:	80 e0       	ldi	r24, 0x00	; 0
    527e:	67 e0       	ldi	r22, 0x07	; 7
    5280:	41 e0       	ldi	r20, 0x01	; 1
    5282:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
    5286:	80 e0       	ldi	r24, 0x00	; 0
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	a8 ec       	ldi	r26, 0xC8	; 200
    528c:	b2 e4       	ldi	r27, 0x42	; 66
    528e:	8b 87       	std	Y+11, r24	; 0x0b
    5290:	9c 87       	std	Y+12, r25	; 0x0c
    5292:	ad 87       	std	Y+13, r26	; 0x0d
    5294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5296:	6b 85       	ldd	r22, Y+11	; 0x0b
    5298:	7c 85       	ldd	r23, Y+12	; 0x0c
    529a:	8d 85       	ldd	r24, Y+13	; 0x0d
    529c:	9e 85       	ldd	r25, Y+14	; 0x0e
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	4a e7       	ldi	r20, 0x7A	; 122
    52a4:	55 e4       	ldi	r21, 0x45	; 69
    52a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	8f 83       	std	Y+7, r24	; 0x07
    52b0:	98 87       	std	Y+8, r25	; 0x08
    52b2:	a9 87       	std	Y+9, r26	; 0x09
    52b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52b6:	6f 81       	ldd	r22, Y+7	; 0x07
    52b8:	78 85       	ldd	r23, Y+8	; 0x08
    52ba:	89 85       	ldd	r24, Y+9	; 0x09
    52bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	40 e8       	ldi	r20, 0x80	; 128
    52c4:	5f e3       	ldi	r21, 0x3F	; 63
    52c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52ca:	88 23       	and	r24, r24
    52cc:	2c f4       	brge	.+10     	; 0x52d8 <LCD_Init+0xac>
		__ticks = 1;
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	9e 83       	std	Y+6, r25	; 0x06
    52d4:	8d 83       	std	Y+5, r24	; 0x05
    52d6:	3f c0       	rjmp	.+126    	; 0x5356 <LCD_Init+0x12a>
	else if (__tmp > 65535)
    52d8:	6f 81       	ldd	r22, Y+7	; 0x07
    52da:	78 85       	ldd	r23, Y+8	; 0x08
    52dc:	89 85       	ldd	r24, Y+9	; 0x09
    52de:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	3f ef       	ldi	r19, 0xFF	; 255
    52e4:	4f e7       	ldi	r20, 0x7F	; 127
    52e6:	57 e4       	ldi	r21, 0x47	; 71
    52e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52ec:	18 16       	cp	r1, r24
    52ee:	4c f5       	brge	.+82     	; 0x5342 <LCD_Init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    52f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    52f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	40 e2       	ldi	r20, 0x20	; 32
    52fe:	51 e4       	ldi	r21, 0x41	; 65
    5300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	bc 01       	movw	r22, r24
    530a:	cd 01       	movw	r24, r26
    530c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5310:	dc 01       	movw	r26, r24
    5312:	cb 01       	movw	r24, r22
    5314:	9e 83       	std	Y+6, r25	; 0x06
    5316:	8d 83       	std	Y+5, r24	; 0x05
    5318:	0f c0       	rjmp	.+30     	; 0x5338 <LCD_Init+0x10c>
    531a:	80 e9       	ldi	r24, 0x90	; 144
    531c:	91 e0       	ldi	r25, 0x01	; 1
    531e:	9c 83       	std	Y+4, r25	; 0x04
    5320:	8b 83       	std	Y+3, r24	; 0x03
    5322:	8b 81       	ldd	r24, Y+3	; 0x03
    5324:	9c 81       	ldd	r25, Y+4	; 0x04
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	f1 f7       	brne	.-4      	; 0x5326 <LCD_Init+0xfa>
    532a:	9c 83       	std	Y+4, r25	; 0x04
    532c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	01 97       	sbiw	r24, 0x01	; 1
    5334:	9e 83       	std	Y+6, r25	; 0x06
    5336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5338:	8d 81       	ldd	r24, Y+5	; 0x05
    533a:	9e 81       	ldd	r25, Y+6	; 0x06
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	69 f7       	brne	.-38     	; 0x531a <LCD_Init+0xee>
    5340:	14 c0       	rjmp	.+40     	; 0x536a <LCD_Init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5342:	6f 81       	ldd	r22, Y+7	; 0x07
    5344:	78 85       	ldd	r23, Y+8	; 0x08
    5346:	89 85       	ldd	r24, Y+9	; 0x09
    5348:	9a 85       	ldd	r25, Y+10	; 0x0a
    534a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534e:	dc 01       	movw	r26, r24
    5350:	cb 01       	movw	r24, r22
    5352:	9e 83       	std	Y+6, r25	; 0x06
    5354:	8d 83       	std	Y+5, r24	; 0x05
    5356:	8d 81       	ldd	r24, Y+5	; 0x05
    5358:	9e 81       	ldd	r25, Y+6	; 0x06
    535a:	9a 83       	std	Y+2, r25	; 0x02
    535c:	89 83       	std	Y+1, r24	; 0x01
    535e:	89 81       	ldd	r24, Y+1	; 0x01
    5360:	9a 81       	ldd	r25, Y+2	; 0x02
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	f1 f7       	brne	.-4      	; 0x5362 <LCD_Init+0x136>
    5366:	9a 83       	std	Y+2, r25	; 0x02
    5368:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);
	/*send commands to LCD for initializing as 4-bit mode*/
	LCD_WriteCommand(0x33);
    536a:	83 e3       	ldi	r24, 0x33	; 51
    536c:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
    5370:	82 e3       	ldi	r24, 0x32	; 50
    5372:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
    5376:	88 e2       	ldi	r24, 0x28	; 40
    5378:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <LCD_WriteCommand>

	/*display on ,cursor off*/
	LCD_WriteCommand(0x0C);
    537c:	8c e0       	ldi	r24, 0x0C	; 12
    537e:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <LCD_WriteCommand>
	/*clear display*/
	LCD_WriteCommand(0x01);
    5382:	81 e0       	ldi	r24, 0x01	; 1
    5384:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <LCD_WriteCommand>
	/* return home*/
	LCD_WriteCommand(0x02);
    5388:	82 e0       	ldi	r24, 0x02	; 2
    538a:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <LCD_WriteCommand>
#else



#endif
}
    538e:	2e 96       	adiw	r28, 0x0e	; 14
    5390:	0f b6       	in	r0, 0x3f	; 63
    5392:	f8 94       	cli
    5394:	de bf       	out	0x3e, r29	; 62
    5396:	0f be       	out	0x3f, r0	; 63
    5398:	cd bf       	out	0x3d, r28	; 61
    539a:	cf 91       	pop	r28
    539c:	df 91       	pop	r29
    539e:	08 95       	ret

000053a0 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8 cmd)
{
    53a0:	df 93       	push	r29
    53a2:	cf 93       	push	r28
    53a4:	cd b7       	in	r28, 0x3d	; 61
    53a6:	de b7       	in	r29, 0x3e	; 62
    53a8:	ad 97       	sbiw	r28, 0x2d	; 45
    53aa:	0f b6       	in	r0, 0x3f	; 63
    53ac:	f8 94       	cli
    53ae:	de bf       	out	0x3e, r29	; 62
    53b0:	0f be       	out	0x3f, r0	; 63
    53b2:	cd bf       	out	0x3d, r28	; 61
    53b4:	8d a7       	std	Y+45, r24	; 0x2d
		uint8 command,portValue;
		//send command
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	61 e0       	ldi	r22, 0x01	; 1
    53ba:	40 e0       	ldi	r20, 0x00	; 0
    53bc:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
		//Write on LCD
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	62 e0       	ldi	r22, 0x02	; 2
    53c4:	40 e0       	ldi	r20, 0x00	; 0
    53c6:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
		//Low level on E PIN
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	60 e0       	ldi	r22, 0x00	; 0
    53ce:	40 e0       	ldi	r20, 0x00	; 0
    53d0:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>

		//get data of the port
		portValue=DIO_GetPortVal(LCD_4BIT_DATA_PORT);
    53d4:	80 e0       	ldi	r24, 0x00	; 0
    53d6:	0e 94 0d 21 	call	0x421a	; 0x421a <DIO_GetPortVal>
    53da:	8b a7       	std	Y+43, r24	; 0x2b
		//write high bit of my cmd
		command = (cmd & 0xf0) | ( portValue & 0x0f);
    53dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    53de:	98 2f       	mov	r25, r24
    53e0:	90 7f       	andi	r25, 0xF0	; 240
    53e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    53e4:	8f 70       	andi	r24, 0x0F	; 15
    53e6:	89 2b       	or	r24, r25
    53e8:	8c a7       	std	Y+44, r24	; 0x2c
		// write it bach to port
		DIO_SetPortVal(LCD_4BIT_DATA_PORT, command);
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	6c a5       	ldd	r22, Y+44	; 0x2c
    53ee:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DIO_SetPortVal>

		//E PIN high
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	60 e0       	ldi	r22, 0x00	; 0
    53f6:	41 e0       	ldi	r20, 0x01	; 1
    53f8:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
    53fc:	80 e0       	ldi	r24, 0x00	; 0
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	a0 e8       	ldi	r26, 0x80	; 128
    5402:	bf e3       	ldi	r27, 0x3F	; 63
    5404:	8f a3       	std	Y+39, r24	; 0x27
    5406:	98 a7       	std	Y+40, r25	; 0x28
    5408:	a9 a7       	std	Y+41, r26	; 0x29
    540a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    540c:	6f a1       	ldd	r22, Y+39	; 0x27
    540e:	78 a5       	ldd	r23, Y+40	; 0x28
    5410:	89 a5       	ldd	r24, Y+41	; 0x29
    5412:	9a a5       	ldd	r25, Y+42	; 0x2a
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	4a e7       	ldi	r20, 0x7A	; 122
    541a:	55 e4       	ldi	r21, 0x45	; 69
    541c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5420:	dc 01       	movw	r26, r24
    5422:	cb 01       	movw	r24, r22
    5424:	8b a3       	std	Y+35, r24	; 0x23
    5426:	9c a3       	std	Y+36, r25	; 0x24
    5428:	ad a3       	std	Y+37, r26	; 0x25
    542a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    542c:	6b a1       	ldd	r22, Y+35	; 0x23
    542e:	7c a1       	ldd	r23, Y+36	; 0x24
    5430:	8d a1       	ldd	r24, Y+37	; 0x25
    5432:	9e a1       	ldd	r25, Y+38	; 0x26
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	40 e8       	ldi	r20, 0x80	; 128
    543a:	5f e3       	ldi	r21, 0x3F	; 63
    543c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5440:	88 23       	and	r24, r24
    5442:	2c f4       	brge	.+10     	; 0x544e <LCD_WriteCommand+0xae>
		__ticks = 1;
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	9a a3       	std	Y+34, r25	; 0x22
    544a:	89 a3       	std	Y+33, r24	; 0x21
    544c:	3f c0       	rjmp	.+126    	; 0x54cc <LCD_WriteCommand+0x12c>
	else if (__tmp > 65535)
    544e:	6b a1       	ldd	r22, Y+35	; 0x23
    5450:	7c a1       	ldd	r23, Y+36	; 0x24
    5452:	8d a1       	ldd	r24, Y+37	; 0x25
    5454:	9e a1       	ldd	r25, Y+38	; 0x26
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	3f ef       	ldi	r19, 0xFF	; 255
    545a:	4f e7       	ldi	r20, 0x7F	; 127
    545c:	57 e4       	ldi	r21, 0x47	; 71
    545e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5462:	18 16       	cp	r1, r24
    5464:	4c f5       	brge	.+82     	; 0x54b8 <LCD_WriteCommand+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5466:	6f a1       	ldd	r22, Y+39	; 0x27
    5468:	78 a5       	ldd	r23, Y+40	; 0x28
    546a:	89 a5       	ldd	r24, Y+41	; 0x29
    546c:	9a a5       	ldd	r25, Y+42	; 0x2a
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	40 e2       	ldi	r20, 0x20	; 32
    5474:	51 e4       	ldi	r21, 0x41	; 65
    5476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    547a:	dc 01       	movw	r26, r24
    547c:	cb 01       	movw	r24, r22
    547e:	bc 01       	movw	r22, r24
    5480:	cd 01       	movw	r24, r26
    5482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5486:	dc 01       	movw	r26, r24
    5488:	cb 01       	movw	r24, r22
    548a:	9a a3       	std	Y+34, r25	; 0x22
    548c:	89 a3       	std	Y+33, r24	; 0x21
    548e:	0f c0       	rjmp	.+30     	; 0x54ae <LCD_WriteCommand+0x10e>
    5490:	80 e9       	ldi	r24, 0x90	; 144
    5492:	91 e0       	ldi	r25, 0x01	; 1
    5494:	98 a3       	std	Y+32, r25	; 0x20
    5496:	8f 8f       	std	Y+31, r24	; 0x1f
    5498:	8f 8d       	ldd	r24, Y+31	; 0x1f
    549a:	98 a1       	ldd	r25, Y+32	; 0x20
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	f1 f7       	brne	.-4      	; 0x549c <LCD_WriteCommand+0xfc>
    54a0:	98 a3       	std	Y+32, r25	; 0x20
    54a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54a4:	89 a1       	ldd	r24, Y+33	; 0x21
    54a6:	9a a1       	ldd	r25, Y+34	; 0x22
    54a8:	01 97       	sbiw	r24, 0x01	; 1
    54aa:	9a a3       	std	Y+34, r25	; 0x22
    54ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54ae:	89 a1       	ldd	r24, Y+33	; 0x21
    54b0:	9a a1       	ldd	r25, Y+34	; 0x22
    54b2:	00 97       	sbiw	r24, 0x00	; 0
    54b4:	69 f7       	brne	.-38     	; 0x5490 <LCD_WriteCommand+0xf0>
    54b6:	14 c0       	rjmp	.+40     	; 0x54e0 <LCD_WriteCommand+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b8:	6b a1       	ldd	r22, Y+35	; 0x23
    54ba:	7c a1       	ldd	r23, Y+36	; 0x24
    54bc:	8d a1       	ldd	r24, Y+37	; 0x25
    54be:	9e a1       	ldd	r25, Y+38	; 0x26
    54c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22
    54c8:	9a a3       	std	Y+34, r25	; 0x22
    54ca:	89 a3       	std	Y+33, r24	; 0x21
    54cc:	89 a1       	ldd	r24, Y+33	; 0x21
    54ce:	9a a1       	ldd	r25, Y+34	; 0x22
    54d0:	9e 8f       	std	Y+30, r25	; 0x1e
    54d2:	8d 8f       	std	Y+29, r24	; 0x1d
    54d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    54d8:	01 97       	sbiw	r24, 0x01	; 1
    54da:	f1 f7       	brne	.-4      	; 0x54d8 <LCD_WriteCommand+0x138>
    54dc:	9e 8f       	std	Y+30, r25	; 0x1e
    54de:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		//e PIN LOW to get edge triggered
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
    54e0:	81 e0       	ldi	r24, 0x01	; 1
    54e2:	60 e0       	ldi	r22, 0x00	; 0
    54e4:	40 e0       	ldi	r20, 0x00	; 0
    54e6:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>

		portValue=DIO_GetPortVal(LCD_4BIT_DATA_PORT);
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	0e 94 0d 21 	call	0x421a	; 0x421a <DIO_GetPortVal>
    54f0:	8b a7       	std	Y+43, r24	; 0x2b
		command = (cmd << 4) | (portValue & 0x0f);
    54f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    54f4:	88 2f       	mov	r24, r24
    54f6:	90 e0       	ldi	r25, 0x00	; 0
    54f8:	82 95       	swap	r24
    54fa:	92 95       	swap	r25
    54fc:	90 7f       	andi	r25, 0xF0	; 240
    54fe:	98 27       	eor	r25, r24
    5500:	80 7f       	andi	r24, 0xF0	; 240
    5502:	98 27       	eor	r25, r24
    5504:	98 2f       	mov	r25, r24
    5506:	8b a5       	ldd	r24, Y+43	; 0x2b
    5508:	8f 70       	andi	r24, 0x0F	; 15
    550a:	89 2b       	or	r24, r25
    550c:	8c a7       	std	Y+44, r24	; 0x2c

		DIO_SetPortVal(LCD_4BIT_DATA_PORT, command);
    550e:	80 e0       	ldi	r24, 0x00	; 0
    5510:	6c a5       	ldd	r22, Y+44	; 0x2c
    5512:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DIO_SetPortVal>

		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	60 e0       	ldi	r22, 0x00	; 0
    551a:	41 e0       	ldi	r20, 0x01	; 1
    551c:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
    5520:	80 e0       	ldi	r24, 0x00	; 0
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	a0 e8       	ldi	r26, 0x80	; 128
    5526:	bf e3       	ldi	r27, 0x3F	; 63
    5528:	89 8f       	std	Y+25, r24	; 0x19
    552a:	9a 8f       	std	Y+26, r25	; 0x1a
    552c:	ab 8f       	std	Y+27, r26	; 0x1b
    552e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5530:	69 8d       	ldd	r22, Y+25	; 0x19
    5532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5538:	20 e0       	ldi	r18, 0x00	; 0
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	4a e7       	ldi	r20, 0x7A	; 122
    553e:	55 e4       	ldi	r21, 0x45	; 69
    5540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	8d 8b       	std	Y+21, r24	; 0x15
    554a:	9e 8b       	std	Y+22, r25	; 0x16
    554c:	af 8b       	std	Y+23, r26	; 0x17
    554e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5550:	6d 89       	ldd	r22, Y+21	; 0x15
    5552:	7e 89       	ldd	r23, Y+22	; 0x16
    5554:	8f 89       	ldd	r24, Y+23	; 0x17
    5556:	98 8d       	ldd	r25, Y+24	; 0x18
    5558:	20 e0       	ldi	r18, 0x00	; 0
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	40 e8       	ldi	r20, 0x80	; 128
    555e:	5f e3       	ldi	r21, 0x3F	; 63
    5560:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5564:	88 23       	and	r24, r24
    5566:	2c f4       	brge	.+10     	; 0x5572 <LCD_WriteCommand+0x1d2>
		__ticks = 1;
    5568:	81 e0       	ldi	r24, 0x01	; 1
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	9c 8b       	std	Y+20, r25	; 0x14
    556e:	8b 8b       	std	Y+19, r24	; 0x13
    5570:	3f c0       	rjmp	.+126    	; 0x55f0 <LCD_WriteCommand+0x250>
	else if (__tmp > 65535)
    5572:	6d 89       	ldd	r22, Y+21	; 0x15
    5574:	7e 89       	ldd	r23, Y+22	; 0x16
    5576:	8f 89       	ldd	r24, Y+23	; 0x17
    5578:	98 8d       	ldd	r25, Y+24	; 0x18
    557a:	20 e0       	ldi	r18, 0x00	; 0
    557c:	3f ef       	ldi	r19, 0xFF	; 255
    557e:	4f e7       	ldi	r20, 0x7F	; 127
    5580:	57 e4       	ldi	r21, 0x47	; 71
    5582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5586:	18 16       	cp	r1, r24
    5588:	4c f5       	brge	.+82     	; 0x55dc <LCD_WriteCommand+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    558a:	69 8d       	ldd	r22, Y+25	; 0x19
    558c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    558e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5592:	20 e0       	ldi	r18, 0x00	; 0
    5594:	30 e0       	ldi	r19, 0x00	; 0
    5596:	40 e2       	ldi	r20, 0x20	; 32
    5598:	51 e4       	ldi	r21, 0x41	; 65
    559a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    559e:	dc 01       	movw	r26, r24
    55a0:	cb 01       	movw	r24, r22
    55a2:	bc 01       	movw	r22, r24
    55a4:	cd 01       	movw	r24, r26
    55a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	9c 8b       	std	Y+20, r25	; 0x14
    55b0:	8b 8b       	std	Y+19, r24	; 0x13
    55b2:	0f c0       	rjmp	.+30     	; 0x55d2 <LCD_WriteCommand+0x232>
    55b4:	80 e9       	ldi	r24, 0x90	; 144
    55b6:	91 e0       	ldi	r25, 0x01	; 1
    55b8:	9a 8b       	std	Y+18, r25	; 0x12
    55ba:	89 8b       	std	Y+17, r24	; 0x11
    55bc:	89 89       	ldd	r24, Y+17	; 0x11
    55be:	9a 89       	ldd	r25, Y+18	; 0x12
    55c0:	01 97       	sbiw	r24, 0x01	; 1
    55c2:	f1 f7       	brne	.-4      	; 0x55c0 <LCD_WriteCommand+0x220>
    55c4:	9a 8b       	std	Y+18, r25	; 0x12
    55c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55c8:	8b 89       	ldd	r24, Y+19	; 0x13
    55ca:	9c 89       	ldd	r25, Y+20	; 0x14
    55cc:	01 97       	sbiw	r24, 0x01	; 1
    55ce:	9c 8b       	std	Y+20, r25	; 0x14
    55d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55d2:	8b 89       	ldd	r24, Y+19	; 0x13
    55d4:	9c 89       	ldd	r25, Y+20	; 0x14
    55d6:	00 97       	sbiw	r24, 0x00	; 0
    55d8:	69 f7       	brne	.-38     	; 0x55b4 <LCD_WriteCommand+0x214>
    55da:	14 c0       	rjmp	.+40     	; 0x5604 <LCD_WriteCommand+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55dc:	6d 89       	ldd	r22, Y+21	; 0x15
    55de:	7e 89       	ldd	r23, Y+22	; 0x16
    55e0:	8f 89       	ldd	r24, Y+23	; 0x17
    55e2:	98 8d       	ldd	r25, Y+24	; 0x18
    55e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55e8:	dc 01       	movw	r26, r24
    55ea:	cb 01       	movw	r24, r22
    55ec:	9c 8b       	std	Y+20, r25	; 0x14
    55ee:	8b 8b       	std	Y+19, r24	; 0x13
    55f0:	8b 89       	ldd	r24, Y+19	; 0x13
    55f2:	9c 89       	ldd	r25, Y+20	; 0x14
    55f4:	98 8b       	std	Y+16, r25	; 0x10
    55f6:	8f 87       	std	Y+15, r24	; 0x0f
    55f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    55fa:	98 89       	ldd	r25, Y+16	; 0x10
    55fc:	01 97       	sbiw	r24, 0x01	; 1
    55fe:	f1 f7       	brne	.-4      	; 0x55fc <LCD_WriteCommand+0x25c>
    5600:	98 8b       	std	Y+16, r25	; 0x10
    5602:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
    5604:	81 e0       	ldi	r24, 0x01	; 1
    5606:	60 e0       	ldi	r22, 0x00	; 0
    5608:	40 e0       	ldi	r20, 0x00	; 0
    560a:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	a0 ea       	ldi	r26, 0xA0	; 160
    5614:	b0 e4       	ldi	r27, 0x40	; 64
    5616:	8b 87       	std	Y+11, r24	; 0x0b
    5618:	9c 87       	std	Y+12, r25	; 0x0c
    561a:	ad 87       	std	Y+13, r26	; 0x0d
    561c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    561e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5620:	7c 85       	ldd	r23, Y+12	; 0x0c
    5622:	8d 85       	ldd	r24, Y+13	; 0x0d
    5624:	9e 85       	ldd	r25, Y+14	; 0x0e
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	4a e7       	ldi	r20, 0x7A	; 122
    562c:	55 e4       	ldi	r21, 0x45	; 69
    562e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5632:	dc 01       	movw	r26, r24
    5634:	cb 01       	movw	r24, r22
    5636:	8f 83       	std	Y+7, r24	; 0x07
    5638:	98 87       	std	Y+8, r25	; 0x08
    563a:	a9 87       	std	Y+9, r26	; 0x09
    563c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    563e:	6f 81       	ldd	r22, Y+7	; 0x07
    5640:	78 85       	ldd	r23, Y+8	; 0x08
    5642:	89 85       	ldd	r24, Y+9	; 0x09
    5644:	9a 85       	ldd	r25, Y+10	; 0x0a
    5646:	20 e0       	ldi	r18, 0x00	; 0
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	40 e8       	ldi	r20, 0x80	; 128
    564c:	5f e3       	ldi	r21, 0x3F	; 63
    564e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5652:	88 23       	and	r24, r24
    5654:	2c f4       	brge	.+10     	; 0x5660 <LCD_WriteCommand+0x2c0>
		__ticks = 1;
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	9e 83       	std	Y+6, r25	; 0x06
    565c:	8d 83       	std	Y+5, r24	; 0x05
    565e:	3f c0       	rjmp	.+126    	; 0x56de <LCD_WriteCommand+0x33e>
	else if (__tmp > 65535)
    5660:	6f 81       	ldd	r22, Y+7	; 0x07
    5662:	78 85       	ldd	r23, Y+8	; 0x08
    5664:	89 85       	ldd	r24, Y+9	; 0x09
    5666:	9a 85       	ldd	r25, Y+10	; 0x0a
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	3f ef       	ldi	r19, 0xFF	; 255
    566c:	4f e7       	ldi	r20, 0x7F	; 127
    566e:	57 e4       	ldi	r21, 0x47	; 71
    5670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5674:	18 16       	cp	r1, r24
    5676:	4c f5       	brge	.+82     	; 0x56ca <LCD_WriteCommand+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5678:	6b 85       	ldd	r22, Y+11	; 0x0b
    567a:	7c 85       	ldd	r23, Y+12	; 0x0c
    567c:	8d 85       	ldd	r24, Y+13	; 0x0d
    567e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5680:	20 e0       	ldi	r18, 0x00	; 0
    5682:	30 e0       	ldi	r19, 0x00	; 0
    5684:	40 e2       	ldi	r20, 0x20	; 32
    5686:	51 e4       	ldi	r21, 0x41	; 65
    5688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    568c:	dc 01       	movw	r26, r24
    568e:	cb 01       	movw	r24, r22
    5690:	bc 01       	movw	r22, r24
    5692:	cd 01       	movw	r24, r26
    5694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5698:	dc 01       	movw	r26, r24
    569a:	cb 01       	movw	r24, r22
    569c:	9e 83       	std	Y+6, r25	; 0x06
    569e:	8d 83       	std	Y+5, r24	; 0x05
    56a0:	0f c0       	rjmp	.+30     	; 0x56c0 <LCD_WriteCommand+0x320>
    56a2:	80 e9       	ldi	r24, 0x90	; 144
    56a4:	91 e0       	ldi	r25, 0x01	; 1
    56a6:	9c 83       	std	Y+4, r25	; 0x04
    56a8:	8b 83       	std	Y+3, r24	; 0x03
    56aa:	8b 81       	ldd	r24, Y+3	; 0x03
    56ac:	9c 81       	ldd	r25, Y+4	; 0x04
    56ae:	01 97       	sbiw	r24, 0x01	; 1
    56b0:	f1 f7       	brne	.-4      	; 0x56ae <LCD_WriteCommand+0x30e>
    56b2:	9c 83       	std	Y+4, r25	; 0x04
    56b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b6:	8d 81       	ldd	r24, Y+5	; 0x05
    56b8:	9e 81       	ldd	r25, Y+6	; 0x06
    56ba:	01 97       	sbiw	r24, 0x01	; 1
    56bc:	9e 83       	std	Y+6, r25	; 0x06
    56be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c0:	8d 81       	ldd	r24, Y+5	; 0x05
    56c2:	9e 81       	ldd	r25, Y+6	; 0x06
    56c4:	00 97       	sbiw	r24, 0x00	; 0
    56c6:	69 f7       	brne	.-38     	; 0x56a2 <LCD_WriteCommand+0x302>
    56c8:	14 c0       	rjmp	.+40     	; 0x56f2 <LCD_WriteCommand+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56ca:	6f 81       	ldd	r22, Y+7	; 0x07
    56cc:	78 85       	ldd	r23, Y+8	; 0x08
    56ce:	89 85       	ldd	r24, Y+9	; 0x09
    56d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d6:	dc 01       	movw	r26, r24
    56d8:	cb 01       	movw	r24, r22
    56da:	9e 83       	std	Y+6, r25	; 0x06
    56dc:	8d 83       	std	Y+5, r24	; 0x05
    56de:	8d 81       	ldd	r24, Y+5	; 0x05
    56e0:	9e 81       	ldd	r25, Y+6	; 0x06
    56e2:	9a 83       	std	Y+2, r25	; 0x02
    56e4:	89 83       	std	Y+1, r24	; 0x01
    56e6:	89 81       	ldd	r24, Y+1	; 0x01
    56e8:	9a 81       	ldd	r25, Y+2	; 0x02
    56ea:	01 97       	sbiw	r24, 0x01	; 1
    56ec:	f1 f7       	brne	.-4      	; 0x56ea <LCD_WriteCommand+0x34a>
    56ee:	9a 83       	std	Y+2, r25	; 0x02
    56f0:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(5);

}
    56f2:	ad 96       	adiw	r28, 0x2d	; 45
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	f8 94       	cli
    56f8:	de bf       	out	0x3e, r29	; 62
    56fa:	0f be       	out	0x3f, r0	; 63
    56fc:	cd bf       	out	0x3d, r28	; 61
    56fe:	cf 91       	pop	r28
    5700:	df 91       	pop	r29
    5702:	08 95       	ret

00005704 <LCD_WriteChar>:

void LCD_WriteChar(uint8 chr)
{
    5704:	df 93       	push	r29
    5706:	cf 93       	push	r28
    5708:	cd b7       	in	r28, 0x3d	; 61
    570a:	de b7       	in	r29, 0x3e	; 62
    570c:	ad 97       	sbiw	r28, 0x2d	; 45
    570e:	0f b6       	in	r0, 0x3f	; 63
    5710:	f8 94       	cli
    5712:	de bf       	out	0x3e, r29	; 62
    5714:	0f be       	out	0x3f, r0	; 63
    5716:	cd bf       	out	0x3d, r28	; 61
    5718:	8d a7       	std	Y+45, r24	; 0x2d
	UART_TxChar(chr);
    571a:	8d a5       	ldd	r24, Y+45	; 0x2d
    571c:	88 2f       	mov	r24, r24
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <UART_TxChar>

	uint8 data,portValue;
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);
    5724:	81 e0       	ldi	r24, 0x01	; 1
    5726:	61 e0       	ldi	r22, 0x01	; 1
    5728:	41 e0       	ldi	r20, 0x01	; 1
    572a:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	62 e0       	ldi	r22, 0x02	; 2
    5732:	40 e0       	ldi	r20, 0x00	; 0
    5734:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
    5738:	81 e0       	ldi	r24, 0x01	; 1
    573a:	60 e0       	ldi	r22, 0x00	; 0
    573c:	40 e0       	ldi	r20, 0x00	; 0
    573e:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>

	portValue=DIO_GetPortVal(LCD_4BIT_DATA_PORT);
    5742:	80 e0       	ldi	r24, 0x00	; 0
    5744:	0e 94 0d 21 	call	0x421a	; 0x421a <DIO_GetPortVal>
    5748:	8b a7       	std	Y+43, r24	; 0x2b
	data = (chr & 0xf0) | (portValue & 0x0f);
    574a:	8d a5       	ldd	r24, Y+45	; 0x2d
    574c:	98 2f       	mov	r25, r24
    574e:	90 7f       	andi	r25, 0xF0	; 240
    5750:	8b a5       	ldd	r24, Y+43	; 0x2b
    5752:	8f 70       	andi	r24, 0x0F	; 15
    5754:	89 2b       	or	r24, r25
    5756:	8c a7       	std	Y+44, r24	; 0x2c

	DIO_SetPortVal(LCD_4BIT_DATA_PORT, data);
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	6c a5       	ldd	r22, Y+44	; 0x2c
    575c:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DIO_SetPortVal>

	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	60 e0       	ldi	r22, 0x00	; 0
    5764:	41 e0       	ldi	r20, 0x01	; 1
    5766:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	a0 e8       	ldi	r26, 0x80	; 128
    5770:	bf e3       	ldi	r27, 0x3F	; 63
    5772:	8f a3       	std	Y+39, r24	; 0x27
    5774:	98 a7       	std	Y+40, r25	; 0x28
    5776:	a9 a7       	std	Y+41, r26	; 0x29
    5778:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    577a:	6f a1       	ldd	r22, Y+39	; 0x27
    577c:	78 a5       	ldd	r23, Y+40	; 0x28
    577e:	89 a5       	ldd	r24, Y+41	; 0x29
    5780:	9a a5       	ldd	r25, Y+42	; 0x2a
    5782:	20 e0       	ldi	r18, 0x00	; 0
    5784:	30 e0       	ldi	r19, 0x00	; 0
    5786:	4a e7       	ldi	r20, 0x7A	; 122
    5788:	55 e4       	ldi	r21, 0x45	; 69
    578a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    578e:	dc 01       	movw	r26, r24
    5790:	cb 01       	movw	r24, r22
    5792:	8b a3       	std	Y+35, r24	; 0x23
    5794:	9c a3       	std	Y+36, r25	; 0x24
    5796:	ad a3       	std	Y+37, r26	; 0x25
    5798:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    579a:	6b a1       	ldd	r22, Y+35	; 0x23
    579c:	7c a1       	ldd	r23, Y+36	; 0x24
    579e:	8d a1       	ldd	r24, Y+37	; 0x25
    57a0:	9e a1       	ldd	r25, Y+38	; 0x26
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	40 e8       	ldi	r20, 0x80	; 128
    57a8:	5f e3       	ldi	r21, 0x3F	; 63
    57aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ae:	88 23       	and	r24, r24
    57b0:	2c f4       	brge	.+10     	; 0x57bc <LCD_WriteChar+0xb8>
		__ticks = 1;
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	9a a3       	std	Y+34, r25	; 0x22
    57b8:	89 a3       	std	Y+33, r24	; 0x21
    57ba:	3f c0       	rjmp	.+126    	; 0x583a <LCD_WriteChar+0x136>
	else if (__tmp > 65535)
    57bc:	6b a1       	ldd	r22, Y+35	; 0x23
    57be:	7c a1       	ldd	r23, Y+36	; 0x24
    57c0:	8d a1       	ldd	r24, Y+37	; 0x25
    57c2:	9e a1       	ldd	r25, Y+38	; 0x26
    57c4:	20 e0       	ldi	r18, 0x00	; 0
    57c6:	3f ef       	ldi	r19, 0xFF	; 255
    57c8:	4f e7       	ldi	r20, 0x7F	; 127
    57ca:	57 e4       	ldi	r21, 0x47	; 71
    57cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57d0:	18 16       	cp	r1, r24
    57d2:	4c f5       	brge	.+82     	; 0x5826 <LCD_WriteChar+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d4:	6f a1       	ldd	r22, Y+39	; 0x27
    57d6:	78 a5       	ldd	r23, Y+40	; 0x28
    57d8:	89 a5       	ldd	r24, Y+41	; 0x29
    57da:	9a a5       	ldd	r25, Y+42	; 0x2a
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	40 e2       	ldi	r20, 0x20	; 32
    57e2:	51 e4       	ldi	r21, 0x41	; 65
    57e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	bc 01       	movw	r22, r24
    57ee:	cd 01       	movw	r24, r26
    57f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	9a a3       	std	Y+34, r25	; 0x22
    57fa:	89 a3       	std	Y+33, r24	; 0x21
    57fc:	0f c0       	rjmp	.+30     	; 0x581c <LCD_WriteChar+0x118>
    57fe:	80 e9       	ldi	r24, 0x90	; 144
    5800:	91 e0       	ldi	r25, 0x01	; 1
    5802:	98 a3       	std	Y+32, r25	; 0x20
    5804:	8f 8f       	std	Y+31, r24	; 0x1f
    5806:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5808:	98 a1       	ldd	r25, Y+32	; 0x20
    580a:	01 97       	sbiw	r24, 0x01	; 1
    580c:	f1 f7       	brne	.-4      	; 0x580a <LCD_WriteChar+0x106>
    580e:	98 a3       	std	Y+32, r25	; 0x20
    5810:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5812:	89 a1       	ldd	r24, Y+33	; 0x21
    5814:	9a a1       	ldd	r25, Y+34	; 0x22
    5816:	01 97       	sbiw	r24, 0x01	; 1
    5818:	9a a3       	std	Y+34, r25	; 0x22
    581a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    581c:	89 a1       	ldd	r24, Y+33	; 0x21
    581e:	9a a1       	ldd	r25, Y+34	; 0x22
    5820:	00 97       	sbiw	r24, 0x00	; 0
    5822:	69 f7       	brne	.-38     	; 0x57fe <LCD_WriteChar+0xfa>
    5824:	14 c0       	rjmp	.+40     	; 0x584e <LCD_WriteChar+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5826:	6b a1       	ldd	r22, Y+35	; 0x23
    5828:	7c a1       	ldd	r23, Y+36	; 0x24
    582a:	8d a1       	ldd	r24, Y+37	; 0x25
    582c:	9e a1       	ldd	r25, Y+38	; 0x26
    582e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5832:	dc 01       	movw	r26, r24
    5834:	cb 01       	movw	r24, r22
    5836:	9a a3       	std	Y+34, r25	; 0x22
    5838:	89 a3       	std	Y+33, r24	; 0x21
    583a:	89 a1       	ldd	r24, Y+33	; 0x21
    583c:	9a a1       	ldd	r25, Y+34	; 0x22
    583e:	9e 8f       	std	Y+30, r25	; 0x1e
    5840:	8d 8f       	std	Y+29, r24	; 0x1d
    5842:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5844:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5846:	01 97       	sbiw	r24, 0x01	; 1
    5848:	f1 f7       	brne	.-4      	; 0x5846 <LCD_WriteChar+0x142>
    584a:	9e 8f       	std	Y+30, r25	; 0x1e
    584c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
    584e:	81 e0       	ldi	r24, 0x01	; 1
    5850:	60 e0       	ldi	r22, 0x00	; 0
    5852:	40 e0       	ldi	r20, 0x00	; 0
    5854:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>

	portValue=DIO_GetPortVal(LCD_4BIT_DATA_PORT);
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	0e 94 0d 21 	call	0x421a	; 0x421a <DIO_GetPortVal>
    585e:	8b a7       	std	Y+43, r24	; 0x2b
	data = (chr << 4) | (portValue & 0x0f);
    5860:	8d a5       	ldd	r24, Y+45	; 0x2d
    5862:	88 2f       	mov	r24, r24
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	82 95       	swap	r24
    5868:	92 95       	swap	r25
    586a:	90 7f       	andi	r25, 0xF0	; 240
    586c:	98 27       	eor	r25, r24
    586e:	80 7f       	andi	r24, 0xF0	; 240
    5870:	98 27       	eor	r25, r24
    5872:	98 2f       	mov	r25, r24
    5874:	8b a5       	ldd	r24, Y+43	; 0x2b
    5876:	8f 70       	andi	r24, 0x0F	; 15
    5878:	89 2b       	or	r24, r25
    587a:	8c a7       	std	Y+44, r24	; 0x2c

	DIO_SetPortVal(LCD_4BIT_DATA_PORT, data);
    587c:	80 e0       	ldi	r24, 0x00	; 0
    587e:	6c a5       	ldd	r22, Y+44	; 0x2c
    5880:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DIO_SetPortVal>

	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
    5884:	81 e0       	ldi	r24, 0x01	; 1
    5886:	60 e0       	ldi	r22, 0x00	; 0
    5888:	41 e0       	ldi	r20, 0x01	; 1
    588a:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	a0 e8       	ldi	r26, 0x80	; 128
    5894:	bf e3       	ldi	r27, 0x3F	; 63
    5896:	89 8f       	std	Y+25, r24	; 0x19
    5898:	9a 8f       	std	Y+26, r25	; 0x1a
    589a:	ab 8f       	std	Y+27, r26	; 0x1b
    589c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    589e:	69 8d       	ldd	r22, Y+25	; 0x19
    58a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	4a e7       	ldi	r20, 0x7A	; 122
    58ac:	55 e4       	ldi	r21, 0x45	; 69
    58ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	8d 8b       	std	Y+21, r24	; 0x15
    58b8:	9e 8b       	std	Y+22, r25	; 0x16
    58ba:	af 8b       	std	Y+23, r26	; 0x17
    58bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    58be:	6d 89       	ldd	r22, Y+21	; 0x15
    58c0:	7e 89       	ldd	r23, Y+22	; 0x16
    58c2:	8f 89       	ldd	r24, Y+23	; 0x17
    58c4:	98 8d       	ldd	r25, Y+24	; 0x18
    58c6:	20 e0       	ldi	r18, 0x00	; 0
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	40 e8       	ldi	r20, 0x80	; 128
    58cc:	5f e3       	ldi	r21, 0x3F	; 63
    58ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58d2:	88 23       	and	r24, r24
    58d4:	2c f4       	brge	.+10     	; 0x58e0 <LCD_WriteChar+0x1dc>
		__ticks = 1;
    58d6:	81 e0       	ldi	r24, 0x01	; 1
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	9c 8b       	std	Y+20, r25	; 0x14
    58dc:	8b 8b       	std	Y+19, r24	; 0x13
    58de:	3f c0       	rjmp	.+126    	; 0x595e <LCD_WriteChar+0x25a>
	else if (__tmp > 65535)
    58e0:	6d 89       	ldd	r22, Y+21	; 0x15
    58e2:	7e 89       	ldd	r23, Y+22	; 0x16
    58e4:	8f 89       	ldd	r24, Y+23	; 0x17
    58e6:	98 8d       	ldd	r25, Y+24	; 0x18
    58e8:	20 e0       	ldi	r18, 0x00	; 0
    58ea:	3f ef       	ldi	r19, 0xFF	; 255
    58ec:	4f e7       	ldi	r20, 0x7F	; 127
    58ee:	57 e4       	ldi	r21, 0x47	; 71
    58f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58f4:	18 16       	cp	r1, r24
    58f6:	4c f5       	brge	.+82     	; 0x594a <LCD_WriteChar+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58f8:	69 8d       	ldd	r22, Y+25	; 0x19
    58fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5900:	20 e0       	ldi	r18, 0x00	; 0
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	40 e2       	ldi	r20, 0x20	; 32
    5906:	51 e4       	ldi	r21, 0x41	; 65
    5908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    590c:	dc 01       	movw	r26, r24
    590e:	cb 01       	movw	r24, r22
    5910:	bc 01       	movw	r22, r24
    5912:	cd 01       	movw	r24, r26
    5914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5918:	dc 01       	movw	r26, r24
    591a:	cb 01       	movw	r24, r22
    591c:	9c 8b       	std	Y+20, r25	; 0x14
    591e:	8b 8b       	std	Y+19, r24	; 0x13
    5920:	0f c0       	rjmp	.+30     	; 0x5940 <LCD_WriteChar+0x23c>
    5922:	80 e9       	ldi	r24, 0x90	; 144
    5924:	91 e0       	ldi	r25, 0x01	; 1
    5926:	9a 8b       	std	Y+18, r25	; 0x12
    5928:	89 8b       	std	Y+17, r24	; 0x11
    592a:	89 89       	ldd	r24, Y+17	; 0x11
    592c:	9a 89       	ldd	r25, Y+18	; 0x12
    592e:	01 97       	sbiw	r24, 0x01	; 1
    5930:	f1 f7       	brne	.-4      	; 0x592e <LCD_WriteChar+0x22a>
    5932:	9a 8b       	std	Y+18, r25	; 0x12
    5934:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5936:	8b 89       	ldd	r24, Y+19	; 0x13
    5938:	9c 89       	ldd	r25, Y+20	; 0x14
    593a:	01 97       	sbiw	r24, 0x01	; 1
    593c:	9c 8b       	std	Y+20, r25	; 0x14
    593e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5940:	8b 89       	ldd	r24, Y+19	; 0x13
    5942:	9c 89       	ldd	r25, Y+20	; 0x14
    5944:	00 97       	sbiw	r24, 0x00	; 0
    5946:	69 f7       	brne	.-38     	; 0x5922 <LCD_WriteChar+0x21e>
    5948:	14 c0       	rjmp	.+40     	; 0x5972 <LCD_WriteChar+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    594a:	6d 89       	ldd	r22, Y+21	; 0x15
    594c:	7e 89       	ldd	r23, Y+22	; 0x16
    594e:	8f 89       	ldd	r24, Y+23	; 0x17
    5950:	98 8d       	ldd	r25, Y+24	; 0x18
    5952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5956:	dc 01       	movw	r26, r24
    5958:	cb 01       	movw	r24, r22
    595a:	9c 8b       	std	Y+20, r25	; 0x14
    595c:	8b 8b       	std	Y+19, r24	; 0x13
    595e:	8b 89       	ldd	r24, Y+19	; 0x13
    5960:	9c 89       	ldd	r25, Y+20	; 0x14
    5962:	98 8b       	std	Y+16, r25	; 0x10
    5964:	8f 87       	std	Y+15, r24	; 0x0f
    5966:	8f 85       	ldd	r24, Y+15	; 0x0f
    5968:	98 89       	ldd	r25, Y+16	; 0x10
    596a:	01 97       	sbiw	r24, 0x01	; 1
    596c:	f1 f7       	brne	.-4      	; 0x596a <LCD_WriteChar+0x266>
    596e:	98 8b       	std	Y+16, r25	; 0x10
    5970:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
    5972:	81 e0       	ldi	r24, 0x01	; 1
    5974:	60 e0       	ldi	r22, 0x00	; 0
    5976:	40 e0       	ldi	r20, 0x00	; 0
    5978:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
    597c:	80 e0       	ldi	r24, 0x00	; 0
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	a0 ea       	ldi	r26, 0xA0	; 160
    5982:	b0 e4       	ldi	r27, 0x40	; 64
    5984:	8b 87       	std	Y+11, r24	; 0x0b
    5986:	9c 87       	std	Y+12, r25	; 0x0c
    5988:	ad 87       	std	Y+13, r26	; 0x0d
    598a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    598c:	6b 85       	ldd	r22, Y+11	; 0x0b
    598e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5990:	8d 85       	ldd	r24, Y+13	; 0x0d
    5992:	9e 85       	ldd	r25, Y+14	; 0x0e
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	4a e7       	ldi	r20, 0x7A	; 122
    599a:	55 e4       	ldi	r21, 0x45	; 69
    599c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59a0:	dc 01       	movw	r26, r24
    59a2:	cb 01       	movw	r24, r22
    59a4:	8f 83       	std	Y+7, r24	; 0x07
    59a6:	98 87       	std	Y+8, r25	; 0x08
    59a8:	a9 87       	std	Y+9, r26	; 0x09
    59aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59ac:	6f 81       	ldd	r22, Y+7	; 0x07
    59ae:	78 85       	ldd	r23, Y+8	; 0x08
    59b0:	89 85       	ldd	r24, Y+9	; 0x09
    59b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59b4:	20 e0       	ldi	r18, 0x00	; 0
    59b6:	30 e0       	ldi	r19, 0x00	; 0
    59b8:	40 e8       	ldi	r20, 0x80	; 128
    59ba:	5f e3       	ldi	r21, 0x3F	; 63
    59bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59c0:	88 23       	and	r24, r24
    59c2:	2c f4       	brge	.+10     	; 0x59ce <LCD_WriteChar+0x2ca>
		__ticks = 1;
    59c4:	81 e0       	ldi	r24, 0x01	; 1
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	9e 83       	std	Y+6, r25	; 0x06
    59ca:	8d 83       	std	Y+5, r24	; 0x05
    59cc:	3f c0       	rjmp	.+126    	; 0x5a4c <LCD_WriteChar+0x348>
	else if (__tmp > 65535)
    59ce:	6f 81       	ldd	r22, Y+7	; 0x07
    59d0:	78 85       	ldd	r23, Y+8	; 0x08
    59d2:	89 85       	ldd	r24, Y+9	; 0x09
    59d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	3f ef       	ldi	r19, 0xFF	; 255
    59da:	4f e7       	ldi	r20, 0x7F	; 127
    59dc:	57 e4       	ldi	r21, 0x47	; 71
    59de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59e2:	18 16       	cp	r1, r24
    59e4:	4c f5       	brge	.+82     	; 0x5a38 <LCD_WriteChar+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    59e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    59ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    59ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    59ee:	20 e0       	ldi	r18, 0x00	; 0
    59f0:	30 e0       	ldi	r19, 0x00	; 0
    59f2:	40 e2       	ldi	r20, 0x20	; 32
    59f4:	51 e4       	ldi	r21, 0x41	; 65
    59f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59fa:	dc 01       	movw	r26, r24
    59fc:	cb 01       	movw	r24, r22
    59fe:	bc 01       	movw	r22, r24
    5a00:	cd 01       	movw	r24, r26
    5a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a06:	dc 01       	movw	r26, r24
    5a08:	cb 01       	movw	r24, r22
    5a0a:	9e 83       	std	Y+6, r25	; 0x06
    5a0c:	8d 83       	std	Y+5, r24	; 0x05
    5a0e:	0f c0       	rjmp	.+30     	; 0x5a2e <LCD_WriteChar+0x32a>
    5a10:	80 e9       	ldi	r24, 0x90	; 144
    5a12:	91 e0       	ldi	r25, 0x01	; 1
    5a14:	9c 83       	std	Y+4, r25	; 0x04
    5a16:	8b 83       	std	Y+3, r24	; 0x03
    5a18:	8b 81       	ldd	r24, Y+3	; 0x03
    5a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a1c:	01 97       	sbiw	r24, 0x01	; 1
    5a1e:	f1 f7       	brne	.-4      	; 0x5a1c <LCD_WriteChar+0x318>
    5a20:	9c 83       	std	Y+4, r25	; 0x04
    5a22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a24:	8d 81       	ldd	r24, Y+5	; 0x05
    5a26:	9e 81       	ldd	r25, Y+6	; 0x06
    5a28:	01 97       	sbiw	r24, 0x01	; 1
    5a2a:	9e 83       	std	Y+6, r25	; 0x06
    5a2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a30:	9e 81       	ldd	r25, Y+6	; 0x06
    5a32:	00 97       	sbiw	r24, 0x00	; 0
    5a34:	69 f7       	brne	.-38     	; 0x5a10 <LCD_WriteChar+0x30c>
    5a36:	14 c0       	rjmp	.+40     	; 0x5a60 <LCD_WriteChar+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a38:	6f 81       	ldd	r22, Y+7	; 0x07
    5a3a:	78 85       	ldd	r23, Y+8	; 0x08
    5a3c:	89 85       	ldd	r24, Y+9	; 0x09
    5a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a44:	dc 01       	movw	r26, r24
    5a46:	cb 01       	movw	r24, r22
    5a48:	9e 83       	std	Y+6, r25	; 0x06
    5a4a:	8d 83       	std	Y+5, r24	; 0x05
    5a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a50:	9a 83       	std	Y+2, r25	; 0x02
    5a52:	89 83       	std	Y+1, r24	; 0x01
    5a54:	89 81       	ldd	r24, Y+1	; 0x01
    5a56:	9a 81       	ldd	r25, Y+2	; 0x02
    5a58:	01 97       	sbiw	r24, 0x01	; 1
    5a5a:	f1 f7       	brne	.-4      	; 0x5a58 <LCD_WriteChar+0x354>
    5a5c:	9a 83       	std	Y+2, r25	; 0x02
    5a5e:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(5);
}
    5a60:	ad 96       	adiw	r28, 0x2d	; 45
    5a62:	0f b6       	in	r0, 0x3f	; 63
    5a64:	f8 94       	cli
    5a66:	de bf       	out	0x3e, r29	; 62
    5a68:	0f be       	out	0x3f, r0	; 63
    5a6a:	cd bf       	out	0x3d, r28	; 61
    5a6c:	cf 91       	pop	r28
    5a6e:	df 91       	pop	r29
    5a70:	08 95       	ret

00005a72 <LCD_WriteString>:


void LCD_WriteString(uint8* str)
{
    5a72:	df 93       	push	r29
    5a74:	cf 93       	push	r28
    5a76:	00 d0       	rcall	.+0      	; 0x5a78 <LCD_WriteString+0x6>
    5a78:	0f 92       	push	r0
    5a7a:	cd b7       	in	r28, 0x3d	; 61
    5a7c:	de b7       	in	r29, 0x3e	; 62
    5a7e:	9b 83       	std	Y+3, r25	; 0x03
    5a80:	8a 83       	std	Y+2, r24	; 0x02
	UART_SendString(str);
    5a82:	8a 81       	ldd	r24, Y+2	; 0x02
    5a84:	9b 81       	ldd	r25, Y+3	; 0x03
    5a86:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <UART_SendString>
	uint8 i = 0 ;
    5a8a:	19 82       	std	Y+1, r1	; 0x01
    5a8c:	0e c0       	rjmp	.+28     	; 0x5aaa <LCD_WriteString+0x38>

	while(str[i] != '\0')
	{
		LCD_WriteChar(str[i]);
    5a8e:	89 81       	ldd	r24, Y+1	; 0x01
    5a90:	28 2f       	mov	r18, r24
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	8a 81       	ldd	r24, Y+2	; 0x02
    5a96:	9b 81       	ldd	r25, Y+3	; 0x03
    5a98:	fc 01       	movw	r30, r24
    5a9a:	e2 0f       	add	r30, r18
    5a9c:	f3 1f       	adc	r31, r19
    5a9e:	80 81       	ld	r24, Z
    5aa0:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
		i++;
    5aa4:	89 81       	ldd	r24, Y+1	; 0x01
    5aa6:	8f 5f       	subi	r24, 0xFF	; 255
    5aa8:	89 83       	std	Y+1, r24	; 0x01
void LCD_WriteString(uint8* str)
{
	UART_SendString(str);
	uint8 i = 0 ;

	while(str[i] != '\0')
    5aaa:	89 81       	ldd	r24, Y+1	; 0x01
    5aac:	28 2f       	mov	r18, r24
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	e2 0f       	add	r30, r18
    5ab8:	f3 1f       	adc	r31, r19
    5aba:	80 81       	ld	r24, Z
    5abc:	88 23       	and	r24, r24
    5abe:	39 f7       	brne	.-50     	; 0x5a8e <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(str[i]);
		i++;
	}
}
    5ac0:	0f 90       	pop	r0
    5ac2:	0f 90       	pop	r0
    5ac4:	0f 90       	pop	r0
    5ac6:	cf 91       	pop	r28
    5ac8:	df 91       	pop	r29
    5aca:	08 95       	ret

00005acc <LCD_GoTo>:


void LCD_GoTo(uint8 row , uint8 col)
{
    5acc:	df 93       	push	r29
    5ace:	cf 93       	push	r28
    5ad0:	00 d0       	rcall	.+0      	; 0x5ad2 <LCD_GoTo+0x6>
    5ad2:	00 d0       	rcall	.+0      	; 0x5ad4 <LCD_GoTo+0x8>
    5ad4:	cd b7       	in	r28, 0x3d	; 61
    5ad6:	de b7       	in	r29, 0x3e	; 62
    5ad8:	8b 83       	std	Y+3, r24	; 0x03
    5ada:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pos[2] = {0x80 , 0xc0};
    5adc:	80 e8       	ldi	r24, 0x80	; 128
    5ade:	89 83       	std	Y+1, r24	; 0x01
    5ae0:	80 ec       	ldi	r24, 0xC0	; 192
    5ae2:	8a 83       	std	Y+2, r24	; 0x02

	LCD_WriteCommand(pos[row]+col);
    5ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae6:	28 2f       	mov	r18, r24
    5ae8:	30 e0       	ldi	r19, 0x00	; 0
    5aea:	ce 01       	movw	r24, r28
    5aec:	01 96       	adiw	r24, 0x01	; 1
    5aee:	fc 01       	movw	r30, r24
    5af0:	e2 0f       	add	r30, r18
    5af2:	f3 1f       	adc	r31, r19
    5af4:	90 81       	ld	r25, Z
    5af6:	8c 81       	ldd	r24, Y+4	; 0x04
    5af8:	89 0f       	add	r24, r25
    5afa:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <LCD_WriteCommand>
}
    5afe:	0f 90       	pop	r0
    5b00:	0f 90       	pop	r0
    5b02:	0f 90       	pop	r0
    5b04:	0f 90       	pop	r0
    5b06:	cf 91       	pop	r28
    5b08:	df 91       	pop	r29
    5b0a:	08 95       	ret

00005b0c <LCD_WriteInteger>:

void LCD_WriteInteger(sint32 intgr)
{
    5b0c:	ef 92       	push	r14
    5b0e:	ff 92       	push	r15
    5b10:	0f 93       	push	r16
    5b12:	1f 93       	push	r17
    5b14:	df 93       	push	r29
    5b16:	cf 93       	push	r28
    5b18:	cd b7       	in	r28, 0x3d	; 61
    5b1a:	de b7       	in	r29, 0x3e	; 62
    5b1c:	28 97       	sbiw	r28, 0x08	; 8
    5b1e:	0f b6       	in	r0, 0x3f	; 63
    5b20:	f8 94       	cli
    5b22:	de bf       	out	0x3e, r29	; 62
    5b24:	0f be       	out	0x3f, r0	; 63
    5b26:	cd bf       	out	0x3d, r28	; 61
    5b28:	6d 83       	std	Y+5, r22	; 0x05
    5b2a:	7e 83       	std	Y+6, r23	; 0x06
    5b2c:	8f 83       	std	Y+7, r24	; 0x07
    5b2e:	98 87       	std	Y+8, r25	; 0x08

	sint32 y = 1;
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	a0 e0       	ldi	r26, 0x00	; 0
    5b36:	b0 e0       	ldi	r27, 0x00	; 0
    5b38:	89 83       	std	Y+1, r24	; 0x01
    5b3a:	9a 83       	std	Y+2, r25	; 0x02
    5b3c:	ab 83       	std	Y+3, r26	; 0x03
    5b3e:	bc 83       	std	Y+4, r27	; 0x04

	if(intgr < 0)
    5b40:	8d 81       	ldd	r24, Y+5	; 0x05
    5b42:	9e 81       	ldd	r25, Y+6	; 0x06
    5b44:	af 81       	ldd	r26, Y+7	; 0x07
    5b46:	b8 85       	ldd	r27, Y+8	; 0x08
    5b48:	bb 23       	and	r27, r27
    5b4a:	0c f0       	brlt	.+2      	; 0x5b4e <LCD_WriteInteger+0x42>
    5b4c:	49 c0       	rjmp	.+146    	; 0x5be0 <LCD_WriteInteger+0xd4>
	{
		LCD_WriteChar('-');
    5b4e:	8d e2       	ldi	r24, 0x2D	; 45
    5b50:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
		intgr *= -1;
    5b54:	8d 81       	ldd	r24, Y+5	; 0x05
    5b56:	9e 81       	ldd	r25, Y+6	; 0x06
    5b58:	af 81       	ldd	r26, Y+7	; 0x07
    5b5a:	b8 85       	ldd	r27, Y+8	; 0x08
    5b5c:	b0 95       	com	r27
    5b5e:	a0 95       	com	r26
    5b60:	90 95       	com	r25
    5b62:	81 95       	neg	r24
    5b64:	9f 4f       	sbci	r25, 0xFF	; 255
    5b66:	af 4f       	sbci	r26, 0xFF	; 255
    5b68:	bf 4f       	sbci	r27, 0xFF	; 255
    5b6a:	8d 83       	std	Y+5, r24	; 0x05
    5b6c:	9e 83       	std	Y+6, r25	; 0x06
    5b6e:	af 83       	std	Y+7, r26	; 0x07
    5b70:	b8 87       	std	Y+8, r27	; 0x08
    5b72:	36 c0       	rjmp	.+108    	; 0x5be0 <LCD_WriteInteger+0xd4>
	}

	while(intgr > 0)
	{
		y = ((y*10) + (intgr%10));
    5b74:	89 81       	ldd	r24, Y+1	; 0x01
    5b76:	9a 81       	ldd	r25, Y+2	; 0x02
    5b78:	ab 81       	ldd	r26, Y+3	; 0x03
    5b7a:	bc 81       	ldd	r27, Y+4	; 0x04
    5b7c:	2a e0       	ldi	r18, 0x0A	; 10
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	40 e0       	ldi	r20, 0x00	; 0
    5b82:	50 e0       	ldi	r21, 0x00	; 0
    5b84:	bc 01       	movw	r22, r24
    5b86:	cd 01       	movw	r24, r26
    5b88:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__mulsi3>
    5b8c:	7b 01       	movw	r14, r22
    5b8e:	8c 01       	movw	r16, r24
    5b90:	8d 81       	ldd	r24, Y+5	; 0x05
    5b92:	9e 81       	ldd	r25, Y+6	; 0x06
    5b94:	af 81       	ldd	r26, Y+7	; 0x07
    5b96:	b8 85       	ldd	r27, Y+8	; 0x08
    5b98:	2a e0       	ldi	r18, 0x0A	; 10
    5b9a:	30 e0       	ldi	r19, 0x00	; 0
    5b9c:	40 e0       	ldi	r20, 0x00	; 0
    5b9e:	50 e0       	ldi	r21, 0x00	; 0
    5ba0:	bc 01       	movw	r22, r24
    5ba2:	cd 01       	movw	r24, r26
    5ba4:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__divmodsi4>
    5ba8:	dc 01       	movw	r26, r24
    5baa:	cb 01       	movw	r24, r22
    5bac:	8e 0d       	add	r24, r14
    5bae:	9f 1d       	adc	r25, r15
    5bb0:	a0 1f       	adc	r26, r16
    5bb2:	b1 1f       	adc	r27, r17
    5bb4:	89 83       	std	Y+1, r24	; 0x01
    5bb6:	9a 83       	std	Y+2, r25	; 0x02
    5bb8:	ab 83       	std	Y+3, r26	; 0x03
    5bba:	bc 83       	std	Y+4, r27	; 0x04
		intgr /= 10;
    5bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    5bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    5bc0:	af 81       	ldd	r26, Y+7	; 0x07
    5bc2:	b8 85       	ldd	r27, Y+8	; 0x08
    5bc4:	2a e0       	ldi	r18, 0x0A	; 10
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	40 e0       	ldi	r20, 0x00	; 0
    5bca:	50 e0       	ldi	r21, 0x00	; 0
    5bcc:	bc 01       	movw	r22, r24
    5bce:	cd 01       	movw	r24, r26
    5bd0:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__divmodsi4>
    5bd4:	da 01       	movw	r26, r20
    5bd6:	c9 01       	movw	r24, r18
    5bd8:	8d 83       	std	Y+5, r24	; 0x05
    5bda:	9e 83       	std	Y+6, r25	; 0x06
    5bdc:	af 83       	std	Y+7, r26	; 0x07
    5bde:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_WriteChar('-');
		intgr *= -1;
	}

	while(intgr > 0)
    5be0:	8d 81       	ldd	r24, Y+5	; 0x05
    5be2:	9e 81       	ldd	r25, Y+6	; 0x06
    5be4:	af 81       	ldd	r26, Y+7	; 0x07
    5be6:	b8 85       	ldd	r27, Y+8	; 0x08
    5be8:	18 16       	cp	r1, r24
    5bea:	19 06       	cpc	r1, r25
    5bec:	1a 06       	cpc	r1, r26
    5bee:	1b 06       	cpc	r1, r27
    5bf0:	0c f2       	brlt	.-126    	; 0x5b74 <LCD_WriteInteger+0x68>
    5bf2:	23 c0       	rjmp	.+70     	; 0x5c3a <LCD_WriteInteger+0x12e>
		intgr /= 10;
	}

	while(y > 1 )
	{
		LCD_WriteChar(((y%10)+48));
    5bf4:	89 81       	ldd	r24, Y+1	; 0x01
    5bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf8:	ab 81       	ldd	r26, Y+3	; 0x03
    5bfa:	bc 81       	ldd	r27, Y+4	; 0x04
    5bfc:	2a e0       	ldi	r18, 0x0A	; 10
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	40 e0       	ldi	r20, 0x00	; 0
    5c02:	50 e0       	ldi	r21, 0x00	; 0
    5c04:	bc 01       	movw	r22, r24
    5c06:	cd 01       	movw	r24, r26
    5c08:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__divmodsi4>
    5c0c:	dc 01       	movw	r26, r24
    5c0e:	cb 01       	movw	r24, r22
    5c10:	80 5d       	subi	r24, 0xD0	; 208
    5c12:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_WriteChar>
		y /= 10;
    5c16:	89 81       	ldd	r24, Y+1	; 0x01
    5c18:	9a 81       	ldd	r25, Y+2	; 0x02
    5c1a:	ab 81       	ldd	r26, Y+3	; 0x03
    5c1c:	bc 81       	ldd	r27, Y+4	; 0x04
    5c1e:	2a e0       	ldi	r18, 0x0A	; 10
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	40 e0       	ldi	r20, 0x00	; 0
    5c24:	50 e0       	ldi	r21, 0x00	; 0
    5c26:	bc 01       	movw	r22, r24
    5c28:	cd 01       	movw	r24, r26
    5c2a:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__divmodsi4>
    5c2e:	da 01       	movw	r26, r20
    5c30:	c9 01       	movw	r24, r18
    5c32:	89 83       	std	Y+1, r24	; 0x01
    5c34:	9a 83       	std	Y+2, r25	; 0x02
    5c36:	ab 83       	std	Y+3, r26	; 0x03
    5c38:	bc 83       	std	Y+4, r27	; 0x04
	{
		y = ((y*10) + (intgr%10));
		intgr /= 10;
	}

	while(y > 1 )
    5c3a:	89 81       	ldd	r24, Y+1	; 0x01
    5c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c3e:	ab 81       	ldd	r26, Y+3	; 0x03
    5c40:	bc 81       	ldd	r27, Y+4	; 0x04
    5c42:	82 30       	cpi	r24, 0x02	; 2
    5c44:	91 05       	cpc	r25, r1
    5c46:	a1 05       	cpc	r26, r1
    5c48:	b1 05       	cpc	r27, r1
    5c4a:	a4 f6       	brge	.-88     	; 0x5bf4 <LCD_WriteInteger+0xe8>
	{
		LCD_WriteChar(((y%10)+48));
		y /= 10;
	}
}
    5c4c:	28 96       	adiw	r28, 0x08	; 8
    5c4e:	0f b6       	in	r0, 0x3f	; 63
    5c50:	f8 94       	cli
    5c52:	de bf       	out	0x3e, r29	; 62
    5c54:	0f be       	out	0x3f, r0	; 63
    5c56:	cd bf       	out	0x3d, r28	; 61
    5c58:	cf 91       	pop	r28
    5c5a:	df 91       	pop	r29
    5c5c:	1f 91       	pop	r17
    5c5e:	0f 91       	pop	r16
    5c60:	ff 90       	pop	r15
    5c62:	ef 90       	pop	r14
    5c64:	08 95       	ret

00005c66 <LED1_Init>:

#include "LED.h"
//init
void LED1_Init()
{
    5c66:	df 93       	push	r29
    5c68:	cf 93       	push	r28
    5c6a:	cd b7       	in	r28, 0x3d	; 61
    5c6c:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinDir(DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT);
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	64 e0       	ldi	r22, 0x04	; 4
    5c72:	41 e0       	ldi	r20, 0x01	; 1
    5c74:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
}
    5c78:	cf 91       	pop	r28
    5c7a:	df 91       	pop	r29
    5c7c:	08 95       	ret

00005c7e <LED2_Init>:
void LED2_Init()
{
    5c7e:	df 93       	push	r29
    5c80:	cf 93       	push	r28
    5c82:	cd b7       	in	r28, 0x3d	; 61
    5c84:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinDir(DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT);
    5c86:	81 e0       	ldi	r24, 0x01	; 1
    5c88:	65 e0       	ldi	r22, 0x05	; 5
    5c8a:	41 e0       	ldi	r20, 0x01	; 1
    5c8c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
}
    5c90:	cf 91       	pop	r28
    5c92:	df 91       	pop	r29
    5c94:	08 95       	ret

00005c96 <LED3_Init>:
void LED3_Init()
{
    5c96:	df 93       	push	r29
    5c98:	cf 93       	push	r28
    5c9a:	cd b7       	in	r28, 0x3d	; 61
    5c9c:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinDir(DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);
    5c9e:	81 e0       	ldi	r24, 0x01	; 1
    5ca0:	66 e0       	ldi	r22, 0x06	; 6
    5ca2:	41 e0       	ldi	r20, 0x01	; 1
    5ca4:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
}
    5ca8:	cf 91       	pop	r28
    5caa:	df 91       	pop	r29
    5cac:	08 95       	ret

00005cae <LED4_Init>:
void LED4_Init()
{
    5cae:	df 93       	push	r29
    5cb0:	cf 93       	push	r28
    5cb2:	cd b7       	in	r28, 0x3d	; 61
    5cb4:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinDir(DIO_PORTB, DIO_PIN7, DIO_PIN_OUTPUT);
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	67 e0       	ldi	r22, 0x07	; 7
    5cba:	41 e0       	ldi	r20, 0x01	; 1
    5cbc:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
}
    5cc0:	cf 91       	pop	r28
    5cc2:	df 91       	pop	r29
    5cc4:	08 95       	ret

00005cc6 <LED5_Init>:
void LED5_Init()
{
    5cc6:	df 93       	push	r29
    5cc8:	cf 93       	push	r28
    5cca:	cd b7       	in	r28, 0x3d	; 61
    5ccc:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinDir(DIO_PORTD, DIO_PIN6, DIO_PIN_OUTPUT);
    5cce:	83 e0       	ldi	r24, 0x03	; 3
    5cd0:	66 e0       	ldi	r22, 0x06	; 6
    5cd2:	41 e0       	ldi	r20, 0x01	; 1
    5cd4:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <DIO_SetPinDir>
}
    5cd8:	cf 91       	pop	r28
    5cda:	df 91       	pop	r29
    5cdc:	08 95       	ret

00005cde <LED1_TurnOn>:

//turn on
void LED1_TurnOn()
{
    5cde:	df 93       	push	r29
    5ce0:	cf 93       	push	r28
    5ce2:	cd b7       	in	r28, 0x3d	; 61
    5ce4:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinVal(DIO_PORTB, DIO_PIN4, DIO_PIN_HIGH);
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	64 e0       	ldi	r22, 0x04	; 4
    5cea:	41 e0       	ldi	r20, 0x01	; 1
    5cec:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5cf0:	cf 91       	pop	r28
    5cf2:	df 91       	pop	r29
    5cf4:	08 95       	ret

00005cf6 <LED2_TurnOn>:
void LED2_TurnOn()
{
    5cf6:	df 93       	push	r29
    5cf8:	cf 93       	push	r28
    5cfa:	cd b7       	in	r28, 0x3d	; 61
    5cfc:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinVal(DIO_PORTB, DIO_PIN5, DIO_PIN_HIGH);
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	65 e0       	ldi	r22, 0x05	; 5
    5d02:	41 e0       	ldi	r20, 0x01	; 1
    5d04:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5d08:	cf 91       	pop	r28
    5d0a:	df 91       	pop	r29
    5d0c:	08 95       	ret

00005d0e <LED3_TurnOn>:
void LED3_TurnOn()
{
    5d0e:	df 93       	push	r29
    5d10:	cf 93       	push	r28
    5d12:	cd b7       	in	r28, 0x3d	; 61
    5d14:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinVal(DIO_PORTB, DIO_PIN6, DIO_PIN_HIGH);
    5d16:	81 e0       	ldi	r24, 0x01	; 1
    5d18:	66 e0       	ldi	r22, 0x06	; 6
    5d1a:	41 e0       	ldi	r20, 0x01	; 1
    5d1c:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5d20:	cf 91       	pop	r28
    5d22:	df 91       	pop	r29
    5d24:	08 95       	ret

00005d26 <LED4_TurnOn>:
void LED4_TurnOn()
{
    5d26:	df 93       	push	r29
    5d28:	cf 93       	push	r28
    5d2a:	cd b7       	in	r28, 0x3d	; 61
    5d2c:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinVal(DIO_PORTB, DIO_PIN7, DIO_PIN_HIGH);
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	67 e0       	ldi	r22, 0x07	; 7
    5d32:	41 e0       	ldi	r20, 0x01	; 1
    5d34:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5d38:	cf 91       	pop	r28
    5d3a:	df 91       	pop	r29
    5d3c:	08 95       	ret

00005d3e <LED5_TurnOn>:
void LED5_TurnOn()
{
    5d3e:	df 93       	push	r29
    5d40:	cf 93       	push	r28
    5d42:	cd b7       	in	r28, 0x3d	; 61
    5d44:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinVal(DIO_PORTD, DIO_PIN6, DIO_PIN_HIGH);
    5d46:	83 e0       	ldi	r24, 0x03	; 3
    5d48:	66 e0       	ldi	r22, 0x06	; 6
    5d4a:	41 e0       	ldi	r20, 0x01	; 1
    5d4c:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5d50:	cf 91       	pop	r28
    5d52:	df 91       	pop	r29
    5d54:	08 95       	ret

00005d56 <LED1_TurnOff>:


//turn off

void LED1_TurnOff()
{
    5d56:	df 93       	push	r29
    5d58:	cf 93       	push	r28
    5d5a:	cd b7       	in	r28, 0x3d	; 61
    5d5c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(DIO_PORTB, DIO_PIN4, DIO_PIN_LOW);
    5d5e:	81 e0       	ldi	r24, 0x01	; 1
    5d60:	64 e0       	ldi	r22, 0x04	; 4
    5d62:	40 e0       	ldi	r20, 0x00	; 0
    5d64:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5d68:	cf 91       	pop	r28
    5d6a:	df 91       	pop	r29
    5d6c:	08 95       	ret

00005d6e <LED2_TurnOff>:
void LED2_TurnOff()
{
    5d6e:	df 93       	push	r29
    5d70:	cf 93       	push	r28
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(DIO_PORTB, DIO_PIN5, DIO_PIN_LOW);
    5d76:	81 e0       	ldi	r24, 0x01	; 1
    5d78:	65 e0       	ldi	r22, 0x05	; 5
    5d7a:	40 e0       	ldi	r20, 0x00	; 0
    5d7c:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5d80:	cf 91       	pop	r28
    5d82:	df 91       	pop	r29
    5d84:	08 95       	ret

00005d86 <LED3_TurnOff>:
void LED3_TurnOff()
{
    5d86:	df 93       	push	r29
    5d88:	cf 93       	push	r28
    5d8a:	cd b7       	in	r28, 0x3d	; 61
    5d8c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(DIO_PORTB, DIO_PIN6, DIO_PIN_LOW);
    5d8e:	81 e0       	ldi	r24, 0x01	; 1
    5d90:	66 e0       	ldi	r22, 0x06	; 6
    5d92:	40 e0       	ldi	r20, 0x00	; 0
    5d94:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5d98:	cf 91       	pop	r28
    5d9a:	df 91       	pop	r29
    5d9c:	08 95       	ret

00005d9e <LED4_TurnOff>:
void LED4_TurnOff()
{
    5d9e:	df 93       	push	r29
    5da0:	cf 93       	push	r28
    5da2:	cd b7       	in	r28, 0x3d	; 61
    5da4:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(DIO_PORTB, DIO_PIN7, DIO_PIN_LOW);
    5da6:	81 e0       	ldi	r24, 0x01	; 1
    5da8:	67 e0       	ldi	r22, 0x07	; 7
    5daa:	40 e0       	ldi	r20, 0x00	; 0
    5dac:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5db0:	cf 91       	pop	r28
    5db2:	df 91       	pop	r29
    5db4:	08 95       	ret

00005db6 <LED5_TurnOff>:
void LED5_TurnOff()
{
    5db6:	df 93       	push	r29
    5db8:	cf 93       	push	r28
    5dba:	cd b7       	in	r28, 0x3d	; 61
    5dbc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(DIO_PORTD, DIO_PIN6, DIO_PIN_LOW);
    5dbe:	83 e0       	ldi	r24, 0x03	; 3
    5dc0:	66 e0       	ldi	r22, 0x06	; 6
    5dc2:	40 e0       	ldi	r20, 0x00	; 0
    5dc4:	0e 94 05 20 	call	0x400a	; 0x400a <DIO_SetPinVal>
}
    5dc8:	cf 91       	pop	r28
    5dca:	df 91       	pop	r29
    5dcc:	08 95       	ret

00005dce <LED0_Toggle>:




void LED0_Toggle()
{
    5dce:	df 93       	push	r29
    5dd0:	cf 93       	push	r28
    5dd2:	cd b7       	in	r28, 0x3d	; 61
    5dd4:	de b7       	in	r29, 0x3e	; 62
	DIO_TogllePin(DIO_PORTB, DIO_PIN5);
    5dd6:	81 e0       	ldi	r24, 0x01	; 1
    5dd8:	65 e0       	ldi	r22, 0x05	; 5
    5dda:	0e 94 c9 21 	call	0x4392	; 0x4392 <DIO_TogllePin>
}
    5dde:	cf 91       	pop	r28
    5de0:	df 91       	pop	r29
    5de2:	08 95       	ret

00005de4 <all_led_init>:

void all_led_init(){
    5de4:	df 93       	push	r29
    5de6:	cf 93       	push	r28
    5de8:	cd b7       	in	r28, 0x3d	; 61
    5dea:	de b7       	in	r29, 0x3e	; 62
	LED1_Init();
    5dec:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <LED1_Init>
	LED2_Init();
    5df0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <LED2_Init>
	LED3_Init();
    5df4:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <LED3_Init>
	LED4_Init();
    5df8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <LED4_Init>
	LED5_Init();
    5dfc:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <LED5_Init>
}
    5e00:	cf 91       	pop	r28
    5e02:	df 91       	pop	r29
    5e04:	08 95       	ret

00005e06 <ServoMotor_Init>:


#include "Servo.h"

void ServoMotor_Init()
{
    5e06:	df 93       	push	r29
    5e08:	cf 93       	push	r28
    5e0a:	cd b7       	in	r28, 0x3d	; 61
    5e0c:	de b7       	in	r29, 0x3e	; 62
	PWM1_INIT(); //20ms -- 50hz
    5e0e:	0e 94 92 24 	call	0x4924	; 0x4924 <PWM1_INIT>
}
    5e12:	cf 91       	pop	r28
    5e14:	df 91       	pop	r29
    5e16:	08 95       	ret

00005e18 <ServoMotor_Set_Degree>:

void ServoMotor_Set_Degree(ServoDegree degree)
{
    5e18:	df 93       	push	r29
    5e1a:	cf 93       	push	r28
    5e1c:	00 d0       	rcall	.+0      	; 0x5e1e <ServoMotor_Set_Degree+0x6>
    5e1e:	0f 92       	push	r0
    5e20:	cd b7       	in	r28, 0x3d	; 61
    5e22:	de b7       	in	r29, 0x3e	; 62
    5e24:	89 83       	std	Y+1, r24	; 0x01

	switch(degree)
    5e26:	89 81       	ldd	r24, Y+1	; 0x01
    5e28:	28 2f       	mov	r18, r24
    5e2a:	30 e0       	ldi	r19, 0x00	; 0
    5e2c:	3b 83       	std	Y+3, r19	; 0x03
    5e2e:	2a 83       	std	Y+2, r18	; 0x02
    5e30:	8a 81       	ldd	r24, Y+2	; 0x02
    5e32:	9b 81       	ldd	r25, Y+3	; 0x03
    5e34:	81 30       	cpi	r24, 0x01	; 1
    5e36:	91 05       	cpc	r25, r1
    5e38:	71 f0       	breq	.+28     	; 0x5e56 <ServoMotor_Set_Degree+0x3e>
    5e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    5e3c:	3b 81       	ldd	r19, Y+3	; 0x03
    5e3e:	22 30       	cpi	r18, 0x02	; 2
    5e40:	31 05       	cpc	r19, r1
    5e42:	71 f0       	breq	.+28     	; 0x5e60 <ServoMotor_Set_Degree+0x48>
    5e44:	8a 81       	ldd	r24, Y+2	; 0x02
    5e46:	9b 81       	ldd	r25, Y+3	; 0x03
    5e48:	00 97       	sbiw	r24, 0x00	; 0
    5e4a:	71 f4       	brne	.+28     	; 0x5e68 <ServoMotor_Set_Degree+0x50>
	{
	case 0:
		PWM_Set_OCR(97);
    5e4c:	81 e6       	ldi	r24, 0x61	; 97
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	0e 94 d7 24 	call	0x49ae	; 0x49ae <PWM_Set_OCR>
    5e54:	09 c0       	rjmp	.+18     	; 0x5e68 <ServoMotor_Set_Degree+0x50>
		break;
	case 1:
		PWM_Set_OCR(316);
    5e56:	8c e3       	ldi	r24, 0x3C	; 60
    5e58:	91 e0       	ldi	r25, 0x01	; 1
    5e5a:	0e 94 d7 24 	call	0x49ae	; 0x49ae <PWM_Set_OCR>
    5e5e:	04 c0       	rjmp	.+8      	; 0x5e68 <ServoMotor_Set_Degree+0x50>
		break;
	case 2:
		PWM_Set_OCR(535);
    5e60:	87 e1       	ldi	r24, 0x17	; 23
    5e62:	92 e0       	ldi	r25, 0x02	; 2
    5e64:	0e 94 d7 24 	call	0x49ae	; 0x49ae <PWM_Set_OCR>
		break;

	}

}
    5e68:	0f 90       	pop	r0
    5e6a:	0f 90       	pop	r0
    5e6c:	0f 90       	pop	r0
    5e6e:	cf 91       	pop	r28
    5e70:	df 91       	pop	r29
    5e72:	08 95       	ret

00005e74 <TEMP_Init>:


#include "TEMP.h"

void TEMP_Init()
{
    5e74:	df 93       	push	r29
    5e76:	cf 93       	push	r28
    5e78:	cd b7       	in	r28, 0x3d	; 61
    5e7a:	de b7       	in	r29, 0x3e	; 62
	ADC_vinit();
    5e7c:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <ADC_vinit>
}
    5e80:	cf 91       	pop	r28
    5e82:	df 91       	pop	r29
    5e84:	08 95       	ret

00005e86 <TEMP_Read>:

uint16 TEMP_Read()
{
    5e86:	df 93       	push	r29
    5e88:	cf 93       	push	r28
    5e8a:	00 d0       	rcall	.+0      	; 0x5e8c <TEMP_Read+0x6>
    5e8c:	00 d0       	rcall	.+0      	; 0x5e8e <TEMP_Read+0x8>
    5e8e:	cd b7       	in	r28, 0x3d	; 61
    5e90:	de b7       	in	r29, 0x3e	; 62

	uint16 Digital_Output;
	uint16 temp;
	Digital_Output = ADC_u16Read();
    5e92:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <ADC_u16Read>
    5e96:	9c 83       	std	Y+4, r25	; 0x04
    5e98:	8b 83       	std	Y+3, r24	; 0x03
	temp = ((Digital_Output * 4.88)/20)+1;
    5e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e9e:	cc 01       	movw	r24, r24
    5ea0:	a0 e0       	ldi	r26, 0x00	; 0
    5ea2:	b0 e0       	ldi	r27, 0x00	; 0
    5ea4:	bc 01       	movw	r22, r24
    5ea6:	cd 01       	movw	r24, r26
    5ea8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5eac:	dc 01       	movw	r26, r24
    5eae:	cb 01       	movw	r24, r22
    5eb0:	bc 01       	movw	r22, r24
    5eb2:	cd 01       	movw	r24, r26
    5eb4:	26 ef       	ldi	r18, 0xF6	; 246
    5eb6:	38 e2       	ldi	r19, 0x28	; 40
    5eb8:	4c e9       	ldi	r20, 0x9C	; 156
    5eba:	50 e4       	ldi	r21, 0x40	; 64
    5ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ec0:	dc 01       	movw	r26, r24
    5ec2:	cb 01       	movw	r24, r22
    5ec4:	bc 01       	movw	r22, r24
    5ec6:	cd 01       	movw	r24, r26
    5ec8:	20 e0       	ldi	r18, 0x00	; 0
    5eca:	30 e0       	ldi	r19, 0x00	; 0
    5ecc:	40 ea       	ldi	r20, 0xA0	; 160
    5ece:	51 e4       	ldi	r21, 0x41	; 65
    5ed0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5ed4:	dc 01       	movw	r26, r24
    5ed6:	cb 01       	movw	r24, r22
    5ed8:	bc 01       	movw	r22, r24
    5eda:	cd 01       	movw	r24, r26
    5edc:	20 e0       	ldi	r18, 0x00	; 0
    5ede:	30 e0       	ldi	r19, 0x00	; 0
    5ee0:	40 e8       	ldi	r20, 0x80	; 128
    5ee2:	5f e3       	ldi	r21, 0x3F	; 63
    5ee4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5ee8:	dc 01       	movw	r26, r24
    5eea:	cb 01       	movw	r24, r22
    5eec:	bc 01       	movw	r22, r24
    5eee:	cd 01       	movw	r24, r26
    5ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ef4:	dc 01       	movw	r26, r24
    5ef6:	cb 01       	movw	r24, r22
    5ef8:	9a 83       	std	Y+2, r25	; 0x02
    5efa:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    5efc:	89 81       	ldd	r24, Y+1	; 0x01
    5efe:	9a 81       	ldd	r25, Y+2	; 0x02

}
    5f00:	0f 90       	pop	r0
    5f02:	0f 90       	pop	r0
    5f04:	0f 90       	pop	r0
    5f06:	0f 90       	pop	r0
    5f08:	cf 91       	pop	r28
    5f0a:	df 91       	pop	r29
    5f0c:	08 95       	ret

00005f0e <__mulsi3>:
    5f0e:	62 9f       	mul	r22, r18
    5f10:	d0 01       	movw	r26, r0
    5f12:	73 9f       	mul	r23, r19
    5f14:	f0 01       	movw	r30, r0
    5f16:	82 9f       	mul	r24, r18
    5f18:	e0 0d       	add	r30, r0
    5f1a:	f1 1d       	adc	r31, r1
    5f1c:	64 9f       	mul	r22, r20
    5f1e:	e0 0d       	add	r30, r0
    5f20:	f1 1d       	adc	r31, r1
    5f22:	92 9f       	mul	r25, r18
    5f24:	f0 0d       	add	r31, r0
    5f26:	83 9f       	mul	r24, r19
    5f28:	f0 0d       	add	r31, r0
    5f2a:	74 9f       	mul	r23, r20
    5f2c:	f0 0d       	add	r31, r0
    5f2e:	65 9f       	mul	r22, r21
    5f30:	f0 0d       	add	r31, r0
    5f32:	99 27       	eor	r25, r25
    5f34:	72 9f       	mul	r23, r18
    5f36:	b0 0d       	add	r27, r0
    5f38:	e1 1d       	adc	r30, r1
    5f3a:	f9 1f       	adc	r31, r25
    5f3c:	63 9f       	mul	r22, r19
    5f3e:	b0 0d       	add	r27, r0
    5f40:	e1 1d       	adc	r30, r1
    5f42:	f9 1f       	adc	r31, r25
    5f44:	bd 01       	movw	r22, r26
    5f46:	cf 01       	movw	r24, r30
    5f48:	11 24       	eor	r1, r1
    5f4a:	08 95       	ret

00005f4c <__udivmodhi4>:
    5f4c:	aa 1b       	sub	r26, r26
    5f4e:	bb 1b       	sub	r27, r27
    5f50:	51 e1       	ldi	r21, 0x11	; 17
    5f52:	07 c0       	rjmp	.+14     	; 0x5f62 <__udivmodhi4_ep>

00005f54 <__udivmodhi4_loop>:
    5f54:	aa 1f       	adc	r26, r26
    5f56:	bb 1f       	adc	r27, r27
    5f58:	a6 17       	cp	r26, r22
    5f5a:	b7 07       	cpc	r27, r23
    5f5c:	10 f0       	brcs	.+4      	; 0x5f62 <__udivmodhi4_ep>
    5f5e:	a6 1b       	sub	r26, r22
    5f60:	b7 0b       	sbc	r27, r23

00005f62 <__udivmodhi4_ep>:
    5f62:	88 1f       	adc	r24, r24
    5f64:	99 1f       	adc	r25, r25
    5f66:	5a 95       	dec	r21
    5f68:	a9 f7       	brne	.-22     	; 0x5f54 <__udivmodhi4_loop>
    5f6a:	80 95       	com	r24
    5f6c:	90 95       	com	r25
    5f6e:	bc 01       	movw	r22, r24
    5f70:	cd 01       	movw	r24, r26
    5f72:	08 95       	ret

00005f74 <__udivmodsi4>:
    5f74:	a1 e2       	ldi	r26, 0x21	; 33
    5f76:	1a 2e       	mov	r1, r26
    5f78:	aa 1b       	sub	r26, r26
    5f7a:	bb 1b       	sub	r27, r27
    5f7c:	fd 01       	movw	r30, r26
    5f7e:	0d c0       	rjmp	.+26     	; 0x5f9a <__udivmodsi4_ep>

00005f80 <__udivmodsi4_loop>:
    5f80:	aa 1f       	adc	r26, r26
    5f82:	bb 1f       	adc	r27, r27
    5f84:	ee 1f       	adc	r30, r30
    5f86:	ff 1f       	adc	r31, r31
    5f88:	a2 17       	cp	r26, r18
    5f8a:	b3 07       	cpc	r27, r19
    5f8c:	e4 07       	cpc	r30, r20
    5f8e:	f5 07       	cpc	r31, r21
    5f90:	20 f0       	brcs	.+8      	; 0x5f9a <__udivmodsi4_ep>
    5f92:	a2 1b       	sub	r26, r18
    5f94:	b3 0b       	sbc	r27, r19
    5f96:	e4 0b       	sbc	r30, r20
    5f98:	f5 0b       	sbc	r31, r21

00005f9a <__udivmodsi4_ep>:
    5f9a:	66 1f       	adc	r22, r22
    5f9c:	77 1f       	adc	r23, r23
    5f9e:	88 1f       	adc	r24, r24
    5fa0:	99 1f       	adc	r25, r25
    5fa2:	1a 94       	dec	r1
    5fa4:	69 f7       	brne	.-38     	; 0x5f80 <__udivmodsi4_loop>
    5fa6:	60 95       	com	r22
    5fa8:	70 95       	com	r23
    5faa:	80 95       	com	r24
    5fac:	90 95       	com	r25
    5fae:	9b 01       	movw	r18, r22
    5fb0:	ac 01       	movw	r20, r24
    5fb2:	bd 01       	movw	r22, r26
    5fb4:	cf 01       	movw	r24, r30
    5fb6:	08 95       	ret

00005fb8 <__divmodsi4>:
    5fb8:	97 fb       	bst	r25, 7
    5fba:	09 2e       	mov	r0, r25
    5fbc:	05 26       	eor	r0, r21
    5fbe:	0e d0       	rcall	.+28     	; 0x5fdc <__divmodsi4_neg1>
    5fc0:	57 fd       	sbrc	r21, 7
    5fc2:	04 d0       	rcall	.+8      	; 0x5fcc <__divmodsi4_neg2>
    5fc4:	d7 df       	rcall	.-82     	; 0x5f74 <__udivmodsi4>
    5fc6:	0a d0       	rcall	.+20     	; 0x5fdc <__divmodsi4_neg1>
    5fc8:	00 1c       	adc	r0, r0
    5fca:	38 f4       	brcc	.+14     	; 0x5fda <__divmodsi4_exit>

00005fcc <__divmodsi4_neg2>:
    5fcc:	50 95       	com	r21
    5fce:	40 95       	com	r20
    5fd0:	30 95       	com	r19
    5fd2:	21 95       	neg	r18
    5fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    5fd8:	5f 4f       	sbci	r21, 0xFF	; 255

00005fda <__divmodsi4_exit>:
    5fda:	08 95       	ret

00005fdc <__divmodsi4_neg1>:
    5fdc:	f6 f7       	brtc	.-4      	; 0x5fda <__divmodsi4_exit>
    5fde:	90 95       	com	r25
    5fe0:	80 95       	com	r24
    5fe2:	70 95       	com	r23
    5fe4:	61 95       	neg	r22
    5fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    5fea:	9f 4f       	sbci	r25, 0xFF	; 255
    5fec:	08 95       	ret

00005fee <__prologue_saves__>:
    5fee:	2f 92       	push	r2
    5ff0:	3f 92       	push	r3
    5ff2:	4f 92       	push	r4
    5ff4:	5f 92       	push	r5
    5ff6:	6f 92       	push	r6
    5ff8:	7f 92       	push	r7
    5ffa:	8f 92       	push	r8
    5ffc:	9f 92       	push	r9
    5ffe:	af 92       	push	r10
    6000:	bf 92       	push	r11
    6002:	cf 92       	push	r12
    6004:	df 92       	push	r13
    6006:	ef 92       	push	r14
    6008:	ff 92       	push	r15
    600a:	0f 93       	push	r16
    600c:	1f 93       	push	r17
    600e:	cf 93       	push	r28
    6010:	df 93       	push	r29
    6012:	cd b7       	in	r28, 0x3d	; 61
    6014:	de b7       	in	r29, 0x3e	; 62
    6016:	ca 1b       	sub	r28, r26
    6018:	db 0b       	sbc	r29, r27
    601a:	0f b6       	in	r0, 0x3f	; 63
    601c:	f8 94       	cli
    601e:	de bf       	out	0x3e, r29	; 62
    6020:	0f be       	out	0x3f, r0	; 63
    6022:	cd bf       	out	0x3d, r28	; 61
    6024:	09 94       	ijmp

00006026 <__epilogue_restores__>:
    6026:	2a 88       	ldd	r2, Y+18	; 0x12
    6028:	39 88       	ldd	r3, Y+17	; 0x11
    602a:	48 88       	ldd	r4, Y+16	; 0x10
    602c:	5f 84       	ldd	r5, Y+15	; 0x0f
    602e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6030:	7d 84       	ldd	r7, Y+13	; 0x0d
    6032:	8c 84       	ldd	r8, Y+12	; 0x0c
    6034:	9b 84       	ldd	r9, Y+11	; 0x0b
    6036:	aa 84       	ldd	r10, Y+10	; 0x0a
    6038:	b9 84       	ldd	r11, Y+9	; 0x09
    603a:	c8 84       	ldd	r12, Y+8	; 0x08
    603c:	df 80       	ldd	r13, Y+7	; 0x07
    603e:	ee 80       	ldd	r14, Y+6	; 0x06
    6040:	fd 80       	ldd	r15, Y+5	; 0x05
    6042:	0c 81       	ldd	r16, Y+4	; 0x04
    6044:	1b 81       	ldd	r17, Y+3	; 0x03
    6046:	aa 81       	ldd	r26, Y+2	; 0x02
    6048:	b9 81       	ldd	r27, Y+1	; 0x01
    604a:	ce 0f       	add	r28, r30
    604c:	d1 1d       	adc	r29, r1
    604e:	0f b6       	in	r0, 0x3f	; 63
    6050:	f8 94       	cli
    6052:	de bf       	out	0x3e, r29	; 62
    6054:	0f be       	out	0x3f, r0	; 63
    6056:	cd bf       	out	0x3d, r28	; 61
    6058:	ed 01       	movw	r28, r26
    605a:	08 95       	ret

0000605c <_exit>:
    605c:	f8 94       	cli

0000605e <__stop_program>:
    605e:	ff cf       	rjmp	.-2      	; 0x605e <__stop_program>
